<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT 日志</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-21T06:00:49.938Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PS基本工具</title>
    <link href="http://example.com/2022/01/21/PS%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7%E8%AE%B2%E8%A7%A3/"/>
    <id>http://example.com/2022/01/21/PS%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7%E8%AE%B2%E8%A7%A3/</id>
    <published>2022-01-21T05:59:01.000Z</published>
    <updated>2022-01-21T06:00:49.938Z</updated>
    
    <content type="html"><![CDATA[<p>啥也不是</p><span id="more"></span><ol><li>放大镜：放大图片，点击alt+拖动鼠标，缩小图片，ctrl+0：图片回到全部显示。</li><li>小手：拖动图片</li><li>图层属性面板：图层一层一层覆盖</li><li>混合模式：两个图片以特殊的形式混合在一起</li></ol><h2 id="图片裁切（需要特定尺寸）"><a href="#图片裁切（需要特定尺寸）" class="headerlink" title="图片裁切（需要特定尺寸）"></a>图片裁切（需要特定尺寸）</h2><ol><li><p>选框工具裁切：一般不使用，一般用此工具选中图片中的某一部分。</p></li><li><p>套索工具：一般不使用，一般用此工具扣出图片中的一些人或物。</p></li><li><p>裁切工具：裁切图片和画布。</p></li><li><p>导航栏选择图像找到图像大小，输入特定的像素值，作用：把图像变一个像素的尺寸，图像会出现压扁和拉升的现象。</p></li><li><p>导航栏选择图像找到画布大小，输入特定的像素值，作用：图像会出现裁剪的样式。并且可以拖动找到自己想要的位置。</p><p>优点：可以实现同比缩放，ctrl+T,按下shift键可以实现。按下alt实现以中心点进行缩放。</p></li></ol><h2 id="蒙板"><a href="#蒙板" class="headerlink" title="蒙板"></a>蒙板</h2><ol><li>ctrl+t：调节图像的大小和位置。</li><li>作用：可以实现去除一张照片中不需要的部分，并且不会破坏照片本身。</li><li>添加方法：选中图层，在右下角选择图层蒙板。</li><li>去除不需要的位置：是用画笔对不需要的部分进行擦除（可恢复）（黑透白不透）</li><li>流量：调节擦除程度。</li></ol><h2 id="校色"><a href="#校色" class="headerlink" title="校色"></a>校色</h2><ol><li>使用图像里的调整。（不建议使用，原因：调整后不便于返回修改）</li><li>曲线：调整亮暗对比度。</li><li>色彩平衡：调整图片的冷暖色调。</li><li>建议使用：选择右下角的创建新的填充和调整图层，使用这里的校色工具进行调整。</li></ol><h2 id="钢笔"><a href="#钢笔" class="headerlink" title="钢笔"></a>钢笔</h2><ol><li>可以绘制两种路径：直线和曲线。</li><li>作用：扣掉图片中的人或物。</li><li>移动锚点位置：按下ctrl键，鼠标移动锚点。</li><li>移动锚点一边的滑杆：按下alt键，鼠标选择一边的滑杆移动。</li><li>建立选区：右键钢笔绘制的封闭框，选择建立选取。</li><li>使用蒙版以保证不破坏图片。</li><li>精确扣图使用钢笔。</li></ol><h2 id="图像修改"><a href="#图像修改" class="headerlink" title="图像修改"></a>图像修改</h2><ol><li>修复画笔：修复污点并且很好的和周围融合。</li><li>仿制图章工具：完全复制所选部分。</li><li>修补工具：将一部分图像复制给另一部分。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;啥也不是&lt;/p&gt;</summary>
    
    
    
    <category term="PS" scheme="http://example.com/categories/PS/"/>
    
    
    <category term="PS" scheme="http://example.com/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>RSA共模攻击（m，n相同）</title>
    <link href="http://example.com/2022/01/21/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB%EF%BC%88m%EF%BC%8Cn%E7%9B%B8%E5%90%8C%EF%BC%89/"/>
    <id>http://example.com/2022/01/21/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB%EF%BC%88m%EF%BC%8Cn%E7%9B%B8%E5%90%8C%EF%BC%89/</id>
    <published>2022-01-21T04:17:05.000Z</published>
    <updated>2022-01-21T05:57:33.336Z</updated>
    
    <content type="html"><![CDATA[<p>RSA共模攻击，m，n相同，c，e不同。</p><span id="more"></span><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>对于m，n相同，有$c_1$、$c_2$,$e_1$、$e_2$。</p><p>首先$c_1$、$c_2$,$e_1$、$e_2$满足关系</p><script type="math/tex; mode=display">\begin{cases}        c_1\equiv m^{e_1}mod(n)        \\        c_2\equiv m^{e_2}mod(n)\end{cases}</script><ol><li><p>$e_1$、$e_2$互素</p><p>存在$s_1$、$s_2$满足</p><script type="math/tex; mode=display">e_1*s_1+e_2*s_2=1</script><p>所以有</p><script type="math/tex; mode=display">c_1^{s_1}*c_2^{s_2}\equiv (m^{e_1}mod(n))^{s_1}*(m^{e_2}mod(n))^{s_2}\equiv m^{e_1*s_1+e_2*s_2}\equiv m \quad mod(n)</script><p>所以</p><script type="math/tex; mode=display">m\equiv c_1^{s_1}*c_2^{s_2}mod(n)</script><p>因为$s_1$、$s_2$为一正一负，所以需要对负的取逆元，假设$s_1$为负,则 ${c_1}^{-1}$ 满足</p><script type="math/tex; mode=display">{c_1}^{-1}c_1\equiv1mod(n)</script><p>所以有</p><script type="math/tex; mode=display">m\equiv ({c_1}^{-1})^{-s_1}*{c_2}^{s_2}mod(n)</script></li></ol><ol><li><p>$e_1$、$e_2$不互素，且gcd($e_1$,$e_2$)=t</p><p>存在$s_1$、$s_2$满足</p><script type="math/tex; mode=display">e_1*s_1+e_2*s_2=t</script><p>所以有</p><script type="math/tex; mode=display">c_1^{s_1}*c_2^{s_2}\equiv (m^{e_1}mod(n))^{s_1}*(m^{e_2}mod(n))^{s_2}\equiv m^{e_1*s_1+e_2*s_2}\equiv m^t mod(n)</script><p>所以</p><script type="math/tex; mode=display">m^t\equiv c_1^{s_1}*c_2^{s_2}mod(n)</script><p>因为$s_1$、$s_2$为一正一负，所以需要对负的取逆元，假设$s_1$为负,则 ${c_1}^{-1}$ 满足</p><script type="math/tex; mode=display">{c_1}^{-1}c_1\equiv1mod(n)</script><p>所以有</p><script type="math/tex; mode=display">m^t\equiv ({c_1}^{-1})^{-s_1}*c_2^{s_2}mod(n)</script></li></ol><h2 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 RSA共模攻击 n，m相同，c，e不相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#gcd(e1,e2)=1</span></span><br><span class="line"><span class="comment">#使用欧几里得算法计算最大公约数，和s，t</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">e1,e2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> e1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (e2,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x = egcd(e2%e1,e1)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(e2//e1)*y,y)</span><br><span class="line">n=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line"></span><br><span class="line">s=egcd(e1,e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找负数求逆元</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1=-s1</span><br><span class="line">    c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2=-s2</span><br><span class="line">    c2=gmpy2.invert(c2,n)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1)*<span class="built_in">pow</span>(c2,s2))%n</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RSA共模攻击，m，n相同，c，e不同。&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>CTF小学生——RSA班wp</title>
    <link href="http://example.com/2022/01/12/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp/"/>
    <id>http://example.com/2022/01/12/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp/</id>
    <published>2022-01-12T09:02:27.000Z</published>
    <updated>2022-01-12T12:07:32.729Z</updated>
    
    <content type="html"><![CDATA[<p>CTF小学生——RSA班解题过程</p><span id="more"></span><p>题目：风二西_RSA1</p><p>e=1 (风二西原创题)</p><p>解答:打开看到e=1，m就是c，使用libnum库的n2s()函数直接求解得到flag</p><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">flag=<span class="number">56006392793403067781861231386277942050474101531963376999457063633948500765747587998496106575433840765</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(flag))</span><br></pre></td></tr></table></figure><p>注：libnum库一些函数介绍</p><ol><li>libnum.n2s() 整数转字符串</li><li>libnum.s2n() 字符串转整数</li><li>libnum.b2s() 二进制位串转字符串</li><li>libnum.s2b() 字符串转二进制位串</li><li>libnum.generate_prime(n) 生成n位素数</li><li>libnum.factorize(n) 分解质因数n</li></ol><hr><p>题目:风二西_RSA2 975 </p><p>还是e=1 风二西原创题</p><p>解答：e=1，这次给了三个n，对同一个m进行加密，所以m要比n要大，可以得到同余式</p><script type="math/tex; mode=display">\begin{cases} m\equiv c_1^emod(n_1)\\            m\equiv c_2^emod(n_2)\\            m\equiv c_3^emod(n_3)\end{cases}</script><p>解同余式得到m，通过libnum.n2s(m)得到flag</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n1= <span class="number">172774622114813683746188230007837413819</span></span><br><span class="line">c1= <span class="number">170260248491697016437095929037490480036</span></span><br><span class="line">n2= <span class="number">160333927436069409658483084503168246581</span></span><br><span class="line">c2= <span class="number">45134242975344810542214361639231372051</span></span><br><span class="line">n3= <span class="number">170109598387116572557100744899522621873</span></span><br><span class="line">c3= <span class="number">47903985600747367026642413789127948969</span></span><br><span class="line">M1 = n2*n3</span><br><span class="line">M2 = n1*n3</span><br><span class="line">M3 = n1*n2</span><br><span class="line">m = n1*n2*n3</span><br><span class="line">M1ni = gmpy2.invert(M1,n1)</span><br><span class="line">M2ni = gmpy2.invert(M2,n2)</span><br><span class="line">M3ni = gmpy2.invert(M3,n3)</span><br><span class="line">flag = (M1ni*M1*c1+M2ni*M2*c2+M3ni*M3*c3)%m</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">flag=<span class="number">56006392793428520954660428183473354430118021091291952136948688581395416086505962460430292111645161341</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(flag))</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF小学生——RSA班解题过程&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>RSA基础</title>
    <link href="http://example.com/2022/01/12/RAS%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/01/12/RAS%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-12T03:58:27.000Z</published>
    <updated>2022-01-12T07:22:37.924Z</updated>
    
    <content type="html"><![CDATA[<p>RSA基础知识</p><span id="more"></span><h2 id="RSA简介"><a href="#RSA简介" class="headerlink" title="RSA简介"></a>RSA简介</h2><p>RSA是最流行的非对称加密算法之一。也被称为公钥加密。</p><p>RSA是非对称的，也就是用来加密的密钥和用来解密的密钥不是同一个。和DES一样的是，RSA也是分组加密算法，不同的是分组大小可以根据密钥的大小而改变。如果加密的数据不是分组大小的整数倍，则会根据具体的应用方式增加额外的填充位。</p><p>RSA作为一种非对称的加密算法，其中很重要的一特点是当数据在网络中传输时，用来加密数据的密钥并不需要也和数据一起传送。因此，这就减少了密钥泄露的可能性。RSA在不允许加密方解密数据时也很有用，加密的一方使用一个密钥，称为公钥，解密的一方使用另一个密钥，称为私钥，私钥需要保持其私有性。</p><p>RSA被认为是非常安全的，不过计算速度要比DES慢很多。同DES一样，其安全性也从未被证明过，但想攻破RSA算法涉及的大数（至少200位的大数）的因子分解是一个极其困难的问题。所以，由于缺乏解决大数的因子分解的有效方法，因此，可以推测出目前没有有效的办法可以破解RSA。</p><h2 id="RSA实现过程"><a href="#RSA实现过程" class="headerlink" title="RSA实现过程"></a>RSA实现过程</h2><ol><li>随机生成两个素数p，q</li><li>计算得到n=p*q</li><li>计算欧拉函数$phi=\psi(n)=(p-1)*(q-1)$</li><li>随机生成一个与phi互质的整数e，$gcd(e,phi)=1$</li><li>生成e关于phi的逆元d，$e*d\equiv1mod(phi)$</li><li>对明文m加密得到密文c，$c\equiv m^emod(n)$</li><li>对密文c解密得到明文m，$m \equiv c^dmod(n)$</li></ol><h2 id="RSA原理"><a href="#RSA原理" class="headerlink" title="RSA原理"></a>RSA原理</h2><p>根据欧拉定理</p><script type="math/tex; mode=display">c^{\psi(n)} \equiv 1mod(n)</script><p>又因为$e*d \equiv 1mod(phi)$,所以有</p><script type="math/tex; mode=display">e*d = phi*k+1(k是整数)</script><p>又因为$phi=\psi(n),m&lt;n$,所以有</p><script type="math/tex; mode=display">c^{e*d} =c^{phi*k+1}\equiv c^{phi+1}\equiv cmod(n)</script><p>所以有</p><script type="math/tex; mode=display">c\equiv c^{d*e}mod(n)</script><p>又因为对明文m加密得到密文c</p><script type="math/tex; mode=display">c\equiv m^emod(n)</script><p>所以得到</p><script type="math/tex; mode=display">m\equiv c^dmod(n)</script><p>从上面不难看出RSA在一次加密时明文的长度不能大于n。所以当所需要加密的数字过于长的时候，就需要将明文分段加密。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RSA基础知识&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>java的特点和对java常见误解</title>
    <link href="http://example.com/2022/01/11/java%E7%9A%84%E7%89%B9%E7%82%B9%E5%92%8C%E5%AF%B9java%E5%B8%B8%E8%A7%81%E8%AF%AF%E8%A7%A3/"/>
    <id>http://example.com/2022/01/11/java%E7%9A%84%E7%89%B9%E7%82%B9%E5%92%8C%E5%AF%B9java%E5%B8%B8%E8%A7%81%E8%AF%AF%E8%A7%A3/</id>
    <published>2022-01-11T05:36:14.000Z</published>
    <updated>2022-01-11T07:19:09.054Z</updated>
    
    <content type="html"><![CDATA[<p>​    学习java之前可以了解一下</p><span id="more"></span><h2 id="java的特点"><a href="#java的特点" class="headerlink" title="java的特点"></a>java的特点</h2><ol><li><p>简单性</p><p>java没有头文件、指针运算（甚至指针语法）、结构、联合、操作符重载、虚基类。</p></li><li><p>面向对象</p><p>java的面向对象特性与C++旗鼓相当，java与C++的主要不同点在于多重继承，在Java中，取而代之的是简单的接口概念。与C++相比，java提供了更丰富的运行时自省功能。</p></li><li><p>分布式</p><p>java有一个丰富的例程库，用于处理像HTTP和FTP之类的TCP/IP协议。java应用程序能通过URL打开和访问网络上的对象，其便捷程度就好像访问本地文件一样</p><p>分布式：分布式计算是计算机科学中一个研究方向，它研究如何把一个需要非常巨大的计算能力才能解决的问题分成许多小的部分，然后把这些部分分配给多个计算机进行处理，最后把这些计算结果综合起来得到最终的结果。</p></li><li><p>健壮性</p><p>java非常强调进行早期的问题检测、后期动态的（运行时）检测，以及消除容易出错的地方，java与C/C++最大的不同在于java采用的指针模型可以消除重写内存和损坏数据的可能性。</p></li><li><p>安全性</p><p>java可以构建防病毒、防篡改的系统。</p></li><li><p>体系结构中立</p><p>编译器生成一个体系结构中立的目标文件格式，这是一种编译过的代码，只要有java运行时系统，这些编译后的代码可以在许多处理器上运行。java编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。</p></li><li><p>可移植性</p><p>java规范中没有“依赖具体实现”的地方，基本数据类型的大小以及有关运算的行为都有明确说明。</p><p>作为系统组成部分的类库，定义了可移植的接口。除了与用户界面有关的部分外，所有其他java库能很好地支持平台独立性。可以处理文件、正则表达式、XML、日期和时间、数据库、网络连接、线程等，不用操心底层操作系统。</p></li><li><p>解释性</p><p>java解释器可以在任何移植了解释器地机器上直接执行java字节码，由于连接是一个增量且轻量级的过程，所以，开发过程也变得更加快捷，更加具有探索性。</p></li><li><p>高能性</p><p>字节码可以（在运行时）动态的转换成对应运行这个应用的特定CPU的机器码。</p></li><li><p>多线程</p></li><li><p>动态性</p><p>java与C/C++相比更加具有动态性，它能够适应不断发展的环境，库中可以自由地添加新方法和实例变量，而对客户端却没有任何影响，在java中找出运行时类型信息十分简单。</p></li></ol><hr><h2 id="关于Java的常见误解"><a href="#关于Java的常见误解" class="headerlink" title="关于Java的常见误解"></a>关于Java的常见误解</h2><ol><li><p>java是HTML的扩展</p><p>java是一种程序设计语言，HTML是一种描述网页结构的方式。</p></li><li><p>使用XML，所以不需要java</p><p>java是一种程序设计语言，XML是一种数据描述的方式，可以使用任何一种程序设计语言处理XML数据，java API 对XML处理提供了很好的支持。许多重要的XML工具都采用java编写。</p></li><li><p>java是一种非常容易学习的程序设计语言</p><p>要将编写玩具式程序的轻松与开发实际项目的艰难区分开来。</p></li><li><p>java将成为适用于所有平台的通用性编程语言</p><p>java在服务器端编程和跨平台客户端应用领域很有优势。</p></li><li><p>java是专用的，应该避免使用。</p></li><li><p>java是解释型的，因此对于关键的应用程序速度太慢了。</p><p>早期java是解释型的，现在java虚拟机使用了即时编译器，因此采用java编写的“热点”代码运行速度与C++相差无几，有些情况下甚至更快。</p></li><li><p>所有的java程序都是在网页中运行的。</p><p>大多数的java程序是运行在web浏览器之外的独立应用程序。</p></li><li><p>JavaScript是java的简易版</p><p>JavaScript是一种可以在网页中使用的脚本语言，最初的名字是LiveScript，JavaScript的语法让人想到java，名字也很像，但除此之外，两者并无任何关系。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    学习java之前可以了解一下&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>buu——wp2</title>
    <link href="http://example.com/2022/01/09/buu%E2%80%94%E2%80%94wp2/"/>
    <id>http://example.com/2022/01/09/buu%E2%80%94%E2%80%94wp2/</id>
    <published>2022-01-09T07:42:37.000Z</published>
    <updated>2022-01-09T09:34:17.922Z</updated>
    
    <content type="html"><![CDATA[<p>​    记录一些buu的wp</p><span id="more"></span><p>题目：RSAROLL</p><p>注意：得到的 flag 请包上 flag{} 提交<a href="https://files.buuoj.cn/files/218f38fb1b8ebb64aae06efec9795955/02c01a13-3a86-47de-8648-f03328a5e5d8.zip"> 02c01a13-3a86-47de-8648-f03328a5e5d8.zip</a></p><p>解答：打开压缩包，一个题目文档，一个data文档，观察data文档一个{}里面的两个数是公钥，后面一个{}里面的数是密文，将n通过yafu分解质因数，得到p和q，根据题目提示的roll，想到将后一个密文里的数一个一个解密，得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rsa roll roll roll</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">49891</span></span><br><span class="line">q = <span class="number">18443</span></span><br><span class="line">e =<span class="number">19</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">704796792</span>,<span class="number">752211152</span>,<span class="number">274704164</span>,<span class="number">18414022</span>,<span class="number">368270835</span>,<span class="number">483295235</span>,<span class="number">263072905</span>,<span class="number">459788476</span>,<span class="number">483295235</span>,<span class="number">459788476</span>,<span class="number">663551792</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">428313374</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">425392137</span>,<span class="number">704796792</span>,<span class="number">458265677</span>,<span class="number">341524652</span>,<span class="number">483295235</span>,<span class="number">534149509</span>,<span class="number">425392137</span>,<span class="number">428313374</span>,<span class="number">425392137</span>,<span class="number">341524652</span>,<span class="number">458265677</span>,<span class="number">263072905</span>,<span class="number">483295235</span>,<span class="number">828509797</span>,<span class="number">341524652</span>,<span class="number">425392137</span>,<span class="number">475206804</span>,<span class="number">428313374</span>,<span class="number">483295235</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">306220148</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(num2str(<span class="built_in">pow</span>(i,d,p*q)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num2str</span>(<span class="params">n</span>):</span></span><br><span class="line">    tmp=<span class="built_in">str</span>(<span class="built_in">hex</span>(n))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tmp)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp=<span class="string">&#x27;0&#x27;</span>+tmp</span><br><span class="line">    s=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(tmp),<span class="number">2</span>):</span><br><span class="line">        temp=tmp[i]+tmp[i+<span class="number">1</span>]</span><br><span class="line">        s+=<span class="built_in">chr</span>(<span class="built_in">int</span>(temp,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><hr><p>题目:RSA</p><p>RSA 注意：得到的 flag 请包上 flag{} 提交</p><p>解答:解压压缩包得到flag.enc和pub.key文件，首先在python中通过ssl协议打开pub.key文件得到公钥，如下图：</p><img src="/2022/01/09/buu%E2%80%94%E2%80%94wp2/1.png" class><p>得到n通过yafu分解质因数得到p和q</p><p>然后读取flag文件中的密文，解密得到flag</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RSA!!</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#bytes型字符串转化为数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes2num</span>(<span class="params">b</span>):</span></span><br><span class="line">    s=<span class="string">&#x27;0x&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> b:</span><br><span class="line">        tmp=<span class="built_in">str</span>(<span class="built_in">hex</span>(x))[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tmp)==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp=<span class="string">&#x27;0&#x27;</span>+tmp</span><br><span class="line">        <span class="comment">#print(tmp)</span></span><br><span class="line">        s+=tmp</span><br><span class="line">        num=<span class="built_in">int</span>(s,<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="comment">#将 10 进制数值按照 ascii 码转为字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num2str</span>(<span class="params">n</span>):</span></span><br><span class="line">    tmp=<span class="built_in">str</span>(<span class="built_in">hex</span>(n))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tmp)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp=<span class="string">&#x27;0&#x27;</span>+tmp</span><br><span class="line">    s=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(tmp),<span class="number">2</span>):</span><br><span class="line">        temp=tmp[i]+tmp[i+<span class="number">1</span>]</span><br><span class="line">        s+=<span class="built_in">chr</span>(<span class="built_in">int</span>(temp,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">r=<span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">r=r.read()</span><br><span class="line">r=bytes2num(r)</span><br><span class="line"><span class="comment"># print(r)</span></span><br><span class="line">c = <span class="number">29666689760194689065394649908301285751747553295673979512822807815563732622178</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = num2str(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>题目:异性相吸</p><p>最近出现了一个奇葩观点，说性别都不一样，怎么能谈恋爱？为了证明这个观点错误，请大家证明异性是相吸的。 注意：得到的 flag 请包上 flag{} 提交<a href="https://files.buuoj.cn/files/d18ec9192c4b61a2ebb37dd730aad205/b8c1caee-43d6-42ee-aecc-d72502a5ade2.zip"> b8c1caee-43d6-42ee-aecc-d72502a5ade2.zip</a></p><p>解答：打开压缩包是一个密文和一个key文本文档，使用010分别打开两个文档，以二进制方式复制，再写脚本将两串二进制数异或，再010中新建一个hex文件，将得到的二进制数粘贴进去（以二进制数粘贴），得到flag</p><img src="/2022/01/09/buu%E2%80%94%E2%80%94wp2/2.png" class><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#异性相吸</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;01100001 01110011 01100001 01100100 01110011 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01110001 01110111 01100101 01110011 01110001 01100110&#x27;</span></span><br><span class="line">密文 = <span class="string">&#x27;00000111 00011111 00000000 00000011 00001000 00000100 00010010 01010101 00000011 00010000 01010100 01011000 01001011 01011100 01011000 01001010 01010110 01010011 01000100 01010010 00000011 01000100 00000010 01011000 01000110 00000110 01010100 01000111 00000101 01010110 01000111 01010111 01000100 00010010 01011101 01001010 00010100 00011011&#x27;</span></span><br><span class="line">str1 = key.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">str2 = 密文.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> str1[i]==str2[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    记录一些buu的wp&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>buu——wp1</title>
    <link href="http://example.com/2021/12/12/buu%E2%80%94%E2%80%94wp1/"/>
    <id>http://example.com/2021/12/12/buu%E2%80%94%E2%80%94wp1/</id>
    <published>2021-12-12T10:31:19.000Z</published>
    <updated>2022-01-09T08:11:13.178Z</updated>
    
    <content type="html"><![CDATA[<p>buu第一页需要写脚本的密码题题解。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">题目：变异凯撒</span><br><span class="line">注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;afZ_r9VYfScOeO_UL^RWUc&#x27;</span></span><br><span class="line">i = <span class="number">5</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s)+i)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">RSA</span><br><span class="line">题目：在一次RSA密钥对生成中，假设p=<span class="number">473398607161</span>，q=<span class="number">4511491</span>，e=<span class="number">17</span></span><br><span class="line">求解出d作为flga提交</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">473398607161</span></span><br><span class="line">q = <span class="number">4511491</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">Alice与Bob</span><br><span class="line">密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。</span><br><span class="line">就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:<span class="number">98554799767</span>,请分解为两个素数，分解后，小的放前面，大的放后面，</span><br><span class="line">合成一个新的数字，进行md5的<span class="number">32</span>位小写哈希，提交答案。 注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5value</span>(<span class="params">key</span>):</span></span><br><span class="line">    input_name = hashlib.md5()</span><br><span class="line">    input_name.update(key.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;大写的32位&quot;</span> + (input_name.hexdigest()).upper())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;大写的16位&quot;</span>+(input_name.hexdigest())[<span class="number">8</span>:-<span class="number">8</span>].upper())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;小写的32位&quot;</span> + (input_name.hexdigest()).lower())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;小写的16位&quot;</span> + (input_name.hexdigest())[<span class="number">8</span>:-<span class="number">8</span>].lower())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P6 = <span class="number">966233</span></span><br><span class="line">P7 = <span class="number">101999</span></span><br><span class="line">p = <span class="number">101999966233</span></span><br><span class="line">md5value(<span class="built_in">str</span>(p))</span><br><span class="line"></span><br><span class="line">丢失的MD5</span><br><span class="line">注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            m=hashlib.md5()</span><br><span class="line">            m.update((<span class="string">&#x27;TASC&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">chr</span>(i))+<span class="string">&#x27;O3RJMV&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">chr</span>(j))+<span class="string">&#x27;WDJKX&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">chr</span>(k))+<span class="string">&#x27;ZM&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            des=m.hexdigest()</span><br><span class="line">            <span class="comment"># print(des)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;e9032&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;da&#x27;</span> <span class="keyword">in</span> des <span class="keyword">and</span> <span class="string">&#x27;911513&#x27;</span> <span class="keyword">in</span> des:</span><br><span class="line">                <span class="built_in">print</span>(des)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 题目:rsarsa</span></span><br><span class="line"><span class="comment"># 注意：得到的 flag 请包上 flag&#123;&#125; 提交</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p =  <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q =  <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c =  <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">n = p*q</span><br><span class="line">flag = gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">题目:RSA1</span><br><span class="line">注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">I = gmpy2.invert(p,q)</span><br><span class="line">mp = gmpy2.powmod(c,dp,p)</span><br><span class="line">mq = gmpy2.powmod(c,dq,q)</span><br><span class="line">m = ((I*(mp-mq))%q)*p+mp</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">题目：我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的<span class="number">32</span>位MD5码。</span><br><span class="line">但是我们获得它的<span class="number">32</span>位MD5码也是残缺不全，E903???4DAB????08?????<span class="number">51</span>?<span class="number">80</span>??8A?,</span><br><span class="line">请猜出神秘字符串的原本模样，并且提交这个字串的<span class="number">32</span>位MD5码作为答案。 注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str1 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">sorce = re.<span class="built_in">compile</span>(<span class="string">r&#x27;E903...4DAB....08.....51.80..8A.&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str1:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> str1:</span><br><span class="line">            str2 = <span class="string">&quot;TASC&#123;&#125;O3RJMV&#123;&#125;WDJKX&#123;&#125;ZM&quot;</span>.<span class="built_in">format</span>(i,j,k)</span><br><span class="line">            m = hashlib.md5()</span><br><span class="line">            m.update(str2.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            str3 = m.hexdigest().upper()</span><br><span class="line">            str4 = re.match(sorce,str3)</span><br><span class="line">            <span class="keyword">if</span> str4==<span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(str4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">题目:RSA3</span><br><span class="line">注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">c1=<span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">n=<span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line">e1=<span class="number">11187289</span></span><br><span class="line">c2=<span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line">e2=<span class="number">9647291</span></span><br><span class="line"></span><br><span class="line">s = gmpy2.gcdext(e1,e2)</span><br><span class="line">a = s[<span class="number">1</span>]</span><br><span class="line">b = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a&lt;<span class="number">0</span>:</span><br><span class="line">    a = -a</span><br><span class="line">    c1 = gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    b = -b</span><br><span class="line">    c2 = gmpy2.invert(c2,n)</span><br><span class="line"></span><br><span class="line">m = (gmpy2.powmod(c1,a,n)*gmpy2.powmod(c2,b,n))%n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;buu第一页需要写脚本的密码题题解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>金盾杯wp</title>
    <link href="http://example.com/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AFwp/"/>
    <id>http://example.com/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AFwp/</id>
    <published>2021-12-12T10:25:31.000Z</published>
    <updated>2021-12-12T10:29:29.137Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下wp——金盾杯</p><span id="more"></span><h5 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h5><p>题目一 ：<strong>Hi There</strong></p><p>题目描述：flag格式：flag{32位md5}</p><p>操作内容：</p><p>​    下载附件，打开文件得到一串字符串：Hhbe1cie93bfTFbcc2hl94e2ea1c91rgab5fei3432Tse498，</p><p>看着就是古典密码，然后就用CTF编码工具一键解码，然后在栅栏解密中栏数为8时得到：HiThereTheFlagisb9b91a3ee3c4cb441bce9539cf221f28，得到flag。</p><p><img src="/12/12/%E9%87%91%E7%9B%BE%E6%9D%AFwp/../../../../桌面/QQ图片20211212175201.png" alt="QQ图片20211212175201"></p><p>flag值：flag{b9b91a3ee3c4cb441bce9539cf221f28}</p><hr><p>题目二 ：<strong>低音吉他谱</strong></p><p>题目描述：低音吉他谱</p><p>操作内容：</p><p>​    下载附件，打开文件得到一串很长的字符串，用CTF编码工具一键解码，得到base32密码，在一键解码，又得到base64密码，然后就猜应该是base套娃，一直解base密码，最后得到flag：380a4d5bea49d6a00921d4ed26b9d4ab</p><p>flag值：flag{380a4d5bea49d6a00921d4ed26b9d4ab}</p><hr><p>题目三 ：<strong>未完成的宣传图</strong></p><p>题目描述：设计师离职，交接当前未完成的工作，其中需求为： </p><ol><li>宣传图需要重新设计为矢量图 </li><li>添加联系方式的二维码</li></ol><p>操作内容：</p><p>​    下载附件，打开是一个tmp格式的文件，直接用记事本打开，里面都是一个一个有序对，题目描述说宣传图需要重新设计为矢量图，查了一下矢量图定义：所谓矢量图，就是使用直线和曲线来描述的图形，构成这些图形的元素是一些点、线、矩形、多边形、圆和弧线等，又说添加联系方式的二维码，就想着是有序对这些点构成一个二维码，于是画了一个散点图（如下），看着像二维码，扫一下得到flag。</p><img src="/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AFwp/1.png" class><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line">num = [[<span class="number">24</span>, <span class="number">24</span>], [<span class="number">36</span>, <span class="number">24</span>], [<span class="number">48</span>, <span class="number">24</span>], [<span class="number">60</span>, <span class="number">24</span>], [<span class="number">72</span>, <span class="number">24</span>], [<span class="number">84</span>, <span class="number">24</span>], [<span class="number">96</span>, <span class="number">24</span>], [<span class="number">120</span>, <span class="number">24</span>], [<span class="number">156</span>, <span class="number">24</span>], [<span class="number">192</span>, <span class="number">24</span>], [<span class="number">228</span>, <span class="number">24</span>], [<span class="number">252</span>, <span class="number">24</span>], [<span class="number">348</span>, <span class="number">24</span>], [<span class="number">360</span>, <span class="number">24</span>], [<span class="number">384</span>, <span class="number">24</span>], [<span class="number">396</span>, <span class="number">24</span>], [<span class="number">408</span>, <span class="number">24</span>], [<span class="number">420</span>, <span class="number">24</span>], [<span class="number">432</span>, <span class="number">24</span>], [<span class="number">444</span>, <span class="number">24</span>], [<span class="number">456</span>, <span class="number">24</span>], [<span class="number">24</span>, <span class="number">36</span>], [<span class="number">96</span>, <span class="number">36</span>], [<span class="number">156</span>, <span class="number">36</span>], [<span class="number">168</span>, <span class="number">36</span>], [<span class="number">180</span>, <span class="number">36</span>], [<span class="number">192</span>, <span class="number">36</span>], [<span class="number">216</span>, <span class="number">36</span>], [<span class="number">240</span>, <span class="number">36</span>], [<span class="number">276</span>, <span class="number">36</span>], [<span class="number">312</span>, <span class="number">36</span>], [<span class="number">348</span>, <span class="number">36</span>], [<span class="number">384</span>, <span class="number">36</span>], [<span class="number">456</span>, <span class="number">36</span>], [<span class="number">24</span>, <span class="number">48</span>], [<span class="number">48</span>, <span class="number">48</span>], [<span class="number">60</span>, <span class="number">48</span>], [<span class="number">72</span>, <span class="number">48</span>], [<span class="number">96</span>, <span class="number">48</span>], [<span class="number">156</span>, <span class="number">48</span>], [<span class="number">180</span>, <span class="number">48</span>], [<span class="number">228</span>, <span class="number">48</span>], [<span class="number">240</span>, <span class="number">48</span>], [<span class="number">300</span>, <span class="number">48</span>], [<span class="number">312</span>, <span class="number">48</span>], [<span class="number">336</span>, <span class="number">48</span>], [<span class="number">348</span>, <span class="number">48</span>], [<span class="number">384</span>, <span class="number">48</span>], [<span class="number">408</span>, <span class="number">48</span>], [<span class="number">420</span>, <span class="number">48</span>], [<span class="number">432</span>, <span class="number">48</span>], [<span class="number">456</span>, <span class="number">48</span>], [<span class="number">24</span>, <span class="number">60</span>], [<span class="number">48</span>, <span class="number">60</span>], [<span class="number">60</span>, <span class="number">60</span>], [<span class="number">72</span>, <span class="number">60</span>], [<span class="number">96</span>, <span class="number">60</span>], [<span class="number">120</span>, <span class="number">60</span>], [<span class="number">132</span>, <span class="number">60</span>], [<span class="number">168</span>, <span class="number">60</span>], [<span class="number">180</span>, <span class="number">60</span>], [<span class="number">204</span>, <span class="number">60</span>], [<span class="number">216</span>, <span class="number">60</span>], [<span class="number">252</span>, <span class="number">60</span>], [<span class="number">288</span>, <span class="number">60</span>], [<span class="number">348</span>, <span class="number">60</span>], [<span class="number">360</span>, <span class="number">60</span>], [<span class="number">384</span>, <span class="number">60</span>], [<span class="number">408</span>, <span class="number">60</span>], [<span class="number">420</span>, <span class="number">60</span>], [<span class="number">432</span>, <span class="number">60</span>], [<span class="number">456</span>, <span class="number">60</span>], [<span class="number">24</span>, <span class="number">72</span>], [<span class="number">48</span>, <span class="number">72</span>], [<span class="number">60</span>, <span class="number">72</span>], [<span class="number">72</span>, <span class="number">72</span>], [<span class="number">96</span>, <span class="number">72</span>], [<span class="number">144</span>, <span class="number">72</span>], [<span class="number">156</span>, <span class="number">72</span>], [<span class="number">168</span>, <span class="number">72</span>], [<span class="number">192</span>, <span class="number">72</span>], [<span class="number">216</span>, <span class="number">72</span>], [<span class="number">264</span>, <span class="number">72</span>], [<span class="number">276</span>, <span class="number">72</span>], [<span class="number">324</span>, <span class="number">72</span>], [<span class="number">348</span>, <span class="number">72</span>], [<span class="number">360</span>, <span class="number">72</span>], [<span class="number">384</span>, <span class="number">72</span>], [<span class="number">408</span>, <span class="number">72</span>], [<span class="number">420</span>, <span class="number">72</span>], [<span class="number">432</span>, <span class="number">72</span>], [<span class="number">456</span>, <span class="number">72</span>], [<span class="number">24</span>, <span class="number">84</span>], [<span class="number">96</span>, <span class="number">84</span>], [<span class="number">132</span>, <span class="number">84</span>], [<span class="number">144</span>, <span class="number">84</span>], [<span class="number">168</span>, <span class="number">84</span>], [<span class="number">180</span>, <span class="number">84</span>], [<span class="number">204</span>, <span class="number">84</span>], [<span class="number">228</span>, <span class="number">84</span>], [<span class="number">288</span>, <span class="number">84</span>], [<span class="number">300</span>, <span class="number">84</span>], [<span class="number">336</span>, <span class="number">84</span>], [<span class="number">348</span>, <span class="number">84</span>], [<span class="number">360</span>, <span class="number">84</span>], [<span class="number">384</span>, <span class="number">84</span>], [<span class="number">456</span>, <span class="number">84</span>], [<span class="number">24</span>, <span class="number">96</span>], [<span class="number">36</span>, <span class="number">96</span>], [<span class="number">48</span>, <span class="number">96</span>], [<span class="number">60</span>, <span class="number">96</span>], [<span class="number">72</span>, <span class="number">96</span>], [<span class="number">84</span>, <span class="number">96</span>], [<span class="number">96</span>, <span class="number">96</span>], [<span class="number">120</span>, <span class="number">96</span>], [<span class="number">144</span>, <span class="number">96</span>], [<span class="number">168</span>, <span class="number">96</span>], [<span class="number">192</span>, <span class="number">96</span>], [<span class="number">216</span>, <span class="number">96</span>], [<span class="number">240</span>, <span class="number">96</span>], [<span class="number">264</span>, <span class="number">96</span>], [<span class="number">288</span>, <span class="number">96</span>], [<span class="number">312</span>, <span class="number">96</span>], [<span class="number">336</span>, <span class="number">96</span>], [<span class="number">360</span>, <span class="number">96</span>], [<span class="number">384</span>, <span class="number">96</span>], [<span class="number">396</span>, <span class="number">96</span>], [<span class="number">408</span>, <span class="number">96</span>], [<span class="number">420</span>, <span class="number">96</span>], [<span class="number">432</span>, <span class="number">96</span>], [<span class="number">444</span>, <span class="number">96</span>], [<span class="number">456</span>, <span class="number">96</span>], [<span class="number">156</span>, <span class="number">108</span>], [<span class="number">180</span>, <span class="number">108</span>], [<span class="number">192</span>, <span class="number">108</span>], [<span class="number">216</span>, <span class="number">108</span>], [<span class="number">228</span>, <span class="number">108</span>], [<span class="number">240</span>, <span class="number">108</span>], [<span class="number">252</span>, <span class="number">108</span>], [<span class="number">276</span>, <span class="number">108</span>], [<span class="number">288</span>, <span class="number">108</span>], [<span class="number">300</span>, <span class="number">108</span>], [<span class="number">348</span>, <span class="number">108</span>], [<span class="number">360</span>, <span class="number">108</span>], [<span class="number">48</span>, <span class="number">120</span>], [<span class="number">72</span>, <span class="number">120</span>], [<span class="number">84</span>, <span class="number">120</span>], [<span class="number">96</span>, <span class="number">120</span>], [<span class="number">120</span>, <span class="number">120</span>], [<span class="number">156</span>, <span class="number">120</span>], [<span class="number">204</span>, <span class="number">120</span>], [<span class="number">240</span>, <span class="number">120</span>], [<span class="number">264</span>, <span class="number">120</span>], [<span class="number">276</span>, <span class="number">120</span>], [<span class="number">288</span>, <span class="number">120</span>], [<span class="number">372</span>, <span class="number">120</span>], [<span class="number">420</span>, <span class="number">120</span>], [<span class="number">456</span>, <span class="number">120</span>], [<span class="number">48</span>, <span class="number">132</span>], [<span class="number">60</span>, <span class="number">132</span>], [<span class="number">84</span>, <span class="number">132</span>], [<span class="number">120</span>, <span class="number">132</span>], [<span class="number">168</span>, <span class="number">132</span>], [<span class="number">204</span>, <span class="number">132</span>], [<span class="number">228</span>, <span class="number">132</span>], [<span class="number">252</span>, <span class="number">132</span>], [<span class="number">276</span>, <span class="number">132</span>], [<span class="number">288</span>, <span class="number">132</span>], [<span class="number">300</span>, <span class="number">132</span>], [<span class="number">312</span>, <span class="number">132</span>], [<span class="number">324</span>, <span class="number">132</span>], [<span class="number">348</span>, <span class="number">132</span>], [<span class="number">384</span>, <span class="number">132</span>], [<span class="number">456</span>, <span class="number">132</span>], [<span class="number">36</span>, <span class="number">144</span>], [<span class="number">48</span>, <span class="number">144</span>], [<span class="number">96</span>, <span class="number">144</span>], [<span class="number">108</span>, <span class="number">144</span>], [<span class="number">228</span>, <span class="number">144</span>], [<span class="number">276</span>, <span class="number">144</span>], [<span class="number">312</span>, <span class="number">144</span>], [<span class="number">372</span>, <span class="number">144</span>], [<span class="number">384</span>, <span class="number">144</span>], [<span class="number">396</span>, <span class="number">144</span>], [<span class="number">408</span>, <span class="number">144</span>], [<span class="number">432</span>, <span class="number">144</span>], [<span class="number">456</span>, <span class="number">144</span>], [<span class="number">24</span>, <span class="number">156</span>], [<span class="number">36</span>, <span class="number">156</span>], [<span class="number">84</span>, <span class="number">156</span>], [<span class="number">120</span>, <span class="number">156</span>], [<span class="number">132</span>, <span class="number">156</span>], [<span class="number">144</span>, <span class="number">156</span>], [<span class="number">156</span>, <span class="number">156</span>], [<span class="number">168</span>, <span class="number">156</span>], [<span class="number">180</span>, <span class="number">156</span>], [<span class="number">192</span>, <span class="number">156</span>], [<span class="number">240</span>, <span class="number">156</span>], [<span class="number">252</span>, <span class="number">156</span>], [<span class="number">300</span>, <span class="number">156</span>], [<span class="number">324</span>, <span class="number">156</span>], [<span class="number">336</span>, <span class="number">156</span>], [<span class="number">348</span>, <span class="number">156</span>], [<span class="number">384</span>, <span class="number">156</span>], [<span class="number">456</span>, <span class="number">156</span>], [<span class="number">24</span>, <span class="number">168</span>], [<span class="number">36</span>, <span class="number">168</span>], [<span class="number">48</span>, <span class="number">168</span>], [<span class="number">72</span>, <span class="number">168</span>], [<span class="number">84</span>, <span class="number">168</span>], [<span class="number">96</span>, <span class="number">168</span>], [<span class="number">108</span>, <span class="number">168</span>], [<span class="number">120</span>, <span class="number">168</span>], [<span class="number">132</span>, <span class="number">168</span>], [<span class="number">156</span>, <span class="number">168</span>], [<span class="number">168</span>, <span class="number">168</span>], [<span class="number">180</span>, <span class="number">168</span>], [<span class="number">192</span>, <span class="number">168</span>], [<span class="number">204</span>, <span class="number">168</span>], [<span class="number">300</span>, <span class="number">168</span>], [<span class="number">324</span>, <span class="number">168</span>], [<span class="number">336</span>, <span class="number">168</span>], [<span class="number">372</span>, <span class="number">168</span>], [<span class="number">384</span>, <span class="number">168</span>], [<span class="number">396</span>, <span class="number">168</span>], [<span class="number">456</span>, <span class="number">168</span>], [<span class="number">24</span>, <span class="number">180</span>], [<span class="number">48</span>, <span class="number">180</span>], [<span class="number">84</span>, <span class="number">180</span>], [<span class="number">120</span>, <span class="number">180</span>], [<span class="number">132</span>, <span class="number">180</span>], [<span class="number">192</span>, <span class="number">180</span>], [<span class="number">204</span>, <span class="number">180</span>], [<span class="number">216</span>, <span class="number">180</span>], [<span class="number">228</span>, <span class="number">180</span>], [<span class="number">240</span>, <span class="number">180</span>], [<span class="number">276</span>, <span class="number">180</span>], [<span class="number">312</span>, <span class="number">180</span>], [<span class="number">324</span>, <span class="number">180</span>], [<span class="number">336</span>, <span class="number">180</span>], [<span class="number">384</span>, <span class="number">180</span>], [<span class="number">396</span>, <span class="number">180</span>], [<span class="number">444</span>, <span class="number">180</span>], [<span class="number">456</span>, <span class="number">180</span>], [<span class="number">24</span>, <span class="number">192</span>], [<span class="number">36</span>, <span class="number">192</span>], [<span class="number">48</span>, <span class="number">192</span>], [<span class="number">60</span>, <span class="number">192</span>], [<span class="number">72</span>, <span class="number">192</span>], [<span class="number">96</span>, <span class="number">192</span>], [<span class="number">108</span>, <span class="number">192</span>], [<span class="number">120</span>, <span class="number">192</span>], [<span class="number">132</span>, <span class="number">192</span>], [<span class="number">144</span>, <span class="number">192</span>], [<span class="number">168</span>, <span class="number">192</span>], [<span class="number">216</span>, <span class="number">192</span>], [<span class="number">288</span>, <span class="number">192</span>], [<span class="number">372</span>, <span class="number">192</span>], [<span class="number">384</span>, <span class="number">192</span>], [<span class="number">444</span>, <span class="number">192</span>], [<span class="number">456</span>, <span class="number">192</span>], [<span class="number">72</span>, <span class="number">204</span>], [<span class="number">84</span>, <span class="number">204</span>], [<span class="number">108</span>, <span class="number">204</span>], [<span class="number">120</span>, <span class="number">204</span>], [<span class="number">132</span>, <span class="number">204</span>], [<span class="number">168</span>, <span class="number">204</span>], [<span class="number">192</span>, <span class="number">204</span>], [<span class="number">216</span>, <span class="number">204</span>], [<span class="number">228</span>, <span class="number">204</span>], [<span class="number">240</span>, <span class="number">204</span>], [<span class="number">264</span>, <span class="number">204</span>], [<span class="number">300</span>, <span class="number">204</span>], [<span class="number">312</span>, <span class="number">204</span>], [<span class="number">324</span>, <span class="number">204</span>], [<span class="number">336</span>, <span class="number">204</span>], [<span class="number">348</span>, <span class="number">204</span>], [<span class="number">360</span>, <span class="number">204</span>], [<span class="number">372</span>, <span class="number">204</span>], [<span class="number">396</span>, <span class="number">204</span>], [<span class="number">444</span>, <span class="number">204</span>], [<span class="number">36</span>, <span class="number">216</span>], [<span class="number">48</span>, <span class="number">216</span>], [<span class="number">96</span>, <span class="number">216</span>], [<span class="number">108</span>, <span class="number">216</span>], [<span class="number">144</span>, <span class="number">216</span>], [<span class="number">156</span>, <span class="number">216</span>], [<span class="number">168</span>, <span class="number">216</span>], [<span class="number">192</span>, <span class="number">216</span>], [<span class="number">228</span>, <span class="number">216</span>], [<span class="number">252</span>, <span class="number">216</span>], [<span class="number">276</span>, <span class="number">216</span>], [<span class="number">324</span>, <span class="number">216</span>], [<span class="number">360</span>, <span class="number">216</span>], [<span class="number">372</span>, <span class="number">216</span>], [<span class="number">384</span>, <span class="number">216</span>], [<span class="number">444</span>, <span class="number">216</span>], [<span class="number">456</span>, <span class="number">216</span>], [<span class="number">24</span>, <span class="number">228</span>], [<span class="number">36</span>, <span class="number">228</span>], [<span class="number">72</span>, <span class="number">228</span>], [<span class="number">84</span>, <span class="number">228</span>], [<span class="number">108</span>, <span class="number">228</span>], [<span class="number">144</span>, <span class="number">228</span>], [<span class="number">216</span>, <span class="number">228</span>], [<span class="number">288</span>, <span class="number">228</span>], [<span class="number">300</span>, <span class="number">228</span>], [<span class="number">324</span>, <span class="number">228</span>], [<span class="number">360</span>, <span class="number">228</span>], [<span class="number">372</span>, <span class="number">228</span>], [<span class="number">384</span>, <span class="number">228</span>], [<span class="number">420</span>, <span class="number">228</span>], [<span class="number">444</span>, <span class="number">228</span>], [<span class="number">456</span>, <span class="number">228</span>], [<span class="number">24</span>, <span class="number">240</span>], [<span class="number">36</span>, <span class="number">240</span>], [<span class="number">48</span>, <span class="number">240</span>], [<span class="number">60</span>, <span class="number">240</span>], [<span class="number">72</span>, <span class="number">240</span>], [<span class="number">96</span>, <span class="number">240</span>], [<span class="number">144</span>, <span class="number">240</span>], [<span class="number">156</span>, <span class="number">240</span>], [<span class="number">180</span>, <span class="number">240</span>], [<span class="number">192</span>, <span class="number">240</span>], [<span class="number">204</span>, <span class="number">240</span>], [<span class="number">228</span>, <span class="number">240</span>], [<span class="number">252</span>, <span class="number">240</span>], [<span class="number">276</span>, <span class="number">240</span>], [<span class="number">336</span>, <span class="number">240</span>], [<span class="number">360</span>, <span class="number">240</span>], [<span class="number">372</span>, <span class="number">240</span>], [<span class="number">384</span>, <span class="number">240</span>], [<span class="number">396</span>, <span class="number">240</span>], [<span class="number">408</span>, <span class="number">240</span>], [<span class="number">420</span>, <span class="number">240</span>], [<span class="number">444</span>, <span class="number">240</span>], [<span class="number">456</span>, <span class="number">240</span>], [<span class="number">48</span>, <span class="number">252</span>], [<span class="number">72</span>, <span class="number">252</span>], [<span class="number">84</span>, <span class="number">252</span>], [<span class="number">120</span>, <span class="number">252</span>], [<span class="number">144</span>, <span class="number">252</span>], [<span class="number">168</span>, <span class="number">252</span>], [<span class="number">192</span>, <span class="number">252</span>], [<span class="number">204</span>, <span class="number">252</span>], [<span class="number">228</span>, <span class="number">252</span>], [<span class="number">264</span>, <span class="number">252</span>], [<span class="number">276</span>, <span class="number">252</span>], [<span class="number">288</span>, <span class="number">252</span>], [<span class="number">312</span>, <span class="number">252</span>], [<span class="number">324</span>, <span class="number">252</span>], [<span class="number">336</span>, <span class="number">252</span>], [<span class="number">360</span>, <span class="number">252</span>], [<span class="number">372</span>, <span class="number">252</span>], [<span class="number">384</span>, <span class="number">252</span>], [<span class="number">420</span>, <span class="number">252</span>], [<span class="number">444</span>, <span class="number">252</span>], [<span class="number">456</span>, <span class="number">252</span>], [<span class="number">24</span>, <span class="number">264</span>], [<span class="number">48</span>, <span class="number">264</span>], [<span class="number">60</span>, <span class="number">264</span>], [<span class="number">72</span>, <span class="number">264</span>], [<span class="number">96</span>, <span class="number">264</span>], [<span class="number">108</span>, <span class="number">264</span>], [<span class="number">144</span>, <span class="number">264</span>], [<span class="number">156</span>, <span class="number">264</span>], [<span class="number">180</span>, <span class="number">264</span>], [<span class="number">192</span>, <span class="number">264</span>], [<span class="number">204</span>, <span class="number">264</span>], [<span class="number">264</span>, <span class="number">264</span>], [<span class="number">276</span>, <span class="number">264</span>], [<span class="number">312</span>, <span class="number">264</span>], [<span class="number">324</span>, <span class="number">264</span>], [<span class="number">360</span>, <span class="number">264</span>], [<span class="number">384</span>, <span class="number">264</span>], [<span class="number">420</span>, <span class="number">264</span>], [<span class="number">444</span>, <span class="number">264</span>], [<span class="number">456</span>, <span class="number">264</span>], [<span class="number">24</span>, <span class="number">276</span>], [<span class="number">36</span>, <span class="number">276</span>], [<span class="number">48</span>, <span class="number">276</span>], [<span class="number">120</span>, <span class="number">276</span>], [<span class="number">156</span>, <span class="number">276</span>], [<span class="number">168</span>, <span class="number">276</span>], [<span class="number">180</span>, <span class="number">276</span>], [<span class="number">204</span>, <span class="number">276</span>], [<span class="number">252</span>, <span class="number">276</span>], [<span class="number">312</span>, <span class="number">276</span>], [<span class="number">324</span>, <span class="number">276</span>], [<span class="number">360</span>, <span class="number">276</span>], [<span class="number">384</span>, <span class="number">276</span>], [<span class="number">444</span>, <span class="number">276</span>], [<span class="number">456</span>, <span class="number">276</span>], [<span class="number">72</span>, <span class="number">288</span>], [<span class="number">96</span>, <span class="number">288</span>], [<span class="number">108</span>, <span class="number">288</span>], [<span class="number">120</span>, <span class="number">288</span>], [<span class="number">132</span>, <span class="number">288</span>], [<span class="number">144</span>, <span class="number">288</span>], [<span class="number">168</span>, <span class="number">288</span>], [<span class="number">180</span>, <span class="number">288</span>], [<span class="number">216</span>, <span class="number">288</span>], [<span class="number">252</span>, <span class="number">288</span>], [<span class="number">264</span>, <span class="number">288</span>], [<span class="number">276</span>, <span class="number">288</span>], [<span class="number">312</span>, <span class="number">288</span>], [<span class="number">336</span>, <span class="number">288</span>], [<span class="number">372</span>, <span class="number">288</span>], [<span class="number">396</span>, <span class="number">288</span>], [<span class="number">408</span>, <span class="number">288</span>], [<span class="number">420</span>, <span class="number">288</span>], [<span class="number">432</span>, <span class="number">288</span>], [<span class="number">444</span>, <span class="number">288</span>], [<span class="number">456</span>, <span class="number">288</span>], [<span class="number">24</span>, <span class="number">300</span>], [<span class="number">36</span>, <span class="number">300</span>], [<span class="number">48</span>, <span class="number">300</span>], [<span class="number">72</span>, <span class="number">300</span>], [<span class="number">84</span>, <span class="number">300</span>], [<span class="number">132</span>, <span class="number">300</span>], [<span class="number">144</span>, <span class="number">300</span>], [<span class="number">156</span>, <span class="number">300</span>], [<span class="number">180</span>, <span class="number">300</span>], [<span class="number">192</span>, <span class="number">300</span>], [<span class="number">216</span>, <span class="number">300</span>], [<span class="number">228</span>, <span class="number">300</span>], [<span class="number">240</span>, <span class="number">300</span>], [<span class="number">264</span>, <span class="number">300</span>], [<span class="number">276</span>, <span class="number">300</span>], [<span class="number">324</span>, <span class="number">300</span>], [<span class="number">336</span>, <span class="number">300</span>], [<span class="number">348</span>, <span class="number">300</span>], [<span class="number">396</span>, <span class="number">300</span>], [<span class="number">420</span>, <span class="number">300</span>], [<span class="number">444</span>, <span class="number">300</span>], [<span class="number">456</span>, <span class="number">300</span>], [<span class="number">36</span>, <span class="number">312</span>], [<span class="number">72</span>, <span class="number">312</span>], [<span class="number">96</span>, <span class="number">312</span>], [<span class="number">192</span>, <span class="number">312</span>], [<span class="number">204</span>, <span class="number">312</span>], [<span class="number">216</span>, <span class="number">312</span>], [<span class="number">228</span>, <span class="number">312</span>], [<span class="number">240</span>, <span class="number">312</span>], [<span class="number">252</span>, <span class="number">312</span>], [<span class="number">288</span>, <span class="number">312</span>], [<span class="number">336</span>, <span class="number">312</span>], [<span class="number">360</span>, <span class="number">312</span>], [<span class="number">384</span>, <span class="number">312</span>], [<span class="number">420</span>, <span class="number">312</span>], [<span class="number">456</span>, <span class="number">312</span>], [<span class="number">36</span>, <span class="number">324</span>], [<span class="number">48</span>, <span class="number">324</span>], [<span class="number">108</span>, <span class="number">324</span>], [<span class="number">132</span>, <span class="number">324</span>], [<span class="number">156</span>, <span class="number">324</span>], [<span class="number">216</span>, <span class="number">324</span>], [<span class="number">228</span>, <span class="number">324</span>], [<span class="number">300</span>, <span class="number">324</span>], [<span class="number">324</span>, <span class="number">324</span>], [<span class="number">336</span>, <span class="number">324</span>], [<span class="number">348</span>, <span class="number">324</span>], [<span class="number">360</span>, <span class="number">324</span>], [<span class="number">372</span>, <span class="number">324</span>], [<span class="number">420</span>, <span class="number">324</span>], [<span class="number">444</span>, <span class="number">324</span>], [<span class="number">456</span>, <span class="number">324</span>], [<span class="number">24</span>, <span class="number">336</span>], [<span class="number">48</span>, <span class="number">336</span>], [<span class="number">60</span>, <span class="number">336</span>], [<span class="number">72</span>, <span class="number">336</span>], [<span class="number">96</span>, <span class="number">336</span>], [<span class="number">120</span>, <span class="number">336</span>], [<span class="number">144</span>, <span class="number">336</span>], [<span class="number">192</span>, <span class="number">336</span>], [<span class="number">228</span>, <span class="number">336</span>], [<span class="number">252</span>, <span class="number">336</span>], [<span class="number">288</span>, <span class="number">336</span>], [<span class="number">324</span>, <span class="number">336</span>], [<span class="number">336</span>, <span class="number">336</span>], [<span class="number">348</span>, <span class="number">336</span>], [<span class="number">360</span>, <span class="number">336</span>], [<span class="number">396</span>, <span class="number">336</span>], [<span class="number">408</span>, <span class="number">336</span>], [<span class="number">420</span>, <span class="number">336</span>], [<span class="number">444</span>, <span class="number">336</span>], [<span class="number">456</span>, <span class="number">336</span>], [<span class="number">36</span>, <span class="number">348</span>], [<span class="number">48</span>, <span class="number">348</span>], [<span class="number">60</span>, <span class="number">348</span>], [<span class="number">72</span>, <span class="number">348</span>], [<span class="number">84</span>, <span class="number">348</span>], [<span class="number">120</span>, <span class="number">348</span>], [<span class="number">132</span>, <span class="number">348</span>], [<span class="number">144</span>, <span class="number">348</span>], [<span class="number">168</span>, <span class="number">348</span>], [<span class="number">180</span>, <span class="number">348</span>], [<span class="number">192</span>, <span class="number">348</span>], [<span class="number">216</span>, <span class="number">348</span>], [<span class="number">228</span>, <span class="number">348</span>], [<span class="number">252</span>, <span class="number">348</span>], [<span class="number">276</span>, <span class="number">348</span>], [<span class="number">300</span>, <span class="number">348</span>], [<span class="number">324</span>, <span class="number">348</span>], [<span class="number">360</span>, <span class="number">348</span>], [<span class="number">384</span>, <span class="number">348</span>], [<span class="number">396</span>, <span class="number">348</span>], [<span class="number">408</span>, <span class="number">348</span>], [<span class="number">420</span>, <span class="number">348</span>], [<span class="number">456</span>, <span class="number">348</span>], [<span class="number">24</span>, <span class="number">360</span>], [<span class="number">48</span>, <span class="number">360</span>], [<span class="number">60</span>, <span class="number">360</span>], [<span class="number">84</span>, <span class="number">360</span>], [<span class="number">96</span>, <span class="number">360</span>], [<span class="number">120</span>, <span class="number">360</span>], [<span class="number">144</span>, <span class="number">360</span>], [<span class="number">180</span>, <span class="number">360</span>], [<span class="number">192</span>, <span class="number">360</span>], [<span class="number">240</span>, <span class="number">360</span>], [<span class="number">264</span>, <span class="number">360</span>], [<span class="number">276</span>, <span class="number">360</span>], [<span class="number">288</span>, <span class="number">360</span>], [<span class="number">312</span>, <span class="number">360</span>], [<span class="number">324</span>, <span class="number">360</span>], [<span class="number">348</span>, <span class="number">360</span>], [<span class="number">360</span>, <span class="number">360</span>], [<span class="number">372</span>, <span class="number">360</span>], [<span class="number">384</span>, <span class="number">360</span>], [<span class="number">396</span>, <span class="number">360</span>], [<span class="number">408</span>, <span class="number">360</span>], [<span class="number">420</span>, <span class="number">360</span>], [<span class="number">456</span>, <span class="number">360</span>], [<span class="number">120</span>, <span class="number">372</span>], [<span class="number">180</span>, <span class="number">372</span>], [<span class="number">204</span>, <span class="number">372</span>], [<span class="number">216</span>, <span class="number">372</span>], [<span class="number">228</span>, <span class="number">372</span>], [<span class="number">240</span>, <span class="number">372</span>], [<span class="number">252</span>, <span class="number">372</span>], [<span class="number">276</span>, <span class="number">372</span>], [<span class="number">312</span>, <span class="number">372</span>], [<span class="number">324</span>, <span class="number">372</span>], [<span class="number">348</span>, <span class="number">372</span>], [<span class="number">360</span>, <span class="number">372</span>], [<span class="number">408</span>, <span class="number">372</span>], [<span class="number">432</span>, <span class="number">372</span>], [<span class="number">456</span>, <span class="number">372</span>], [<span class="number">24</span>, <span class="number">384</span>], [<span class="number">36</span>, <span class="number">384</span>], [<span class="number">48</span>, <span class="number">384</span>], [<span class="number">60</span>, <span class="number">384</span>], [<span class="number">72</span>, <span class="number">384</span>], [<span class="number">84</span>, <span class="number">384</span>], [<span class="number">96</span>, <span class="number">384</span>], [<span class="number">132</span>, <span class="number">384</span>], [<span class="number">144</span>, <span class="number">384</span>], [<span class="number">156</span>, <span class="number">384</span>], [<span class="number">204</span>, <span class="number">384</span>], [<span class="number">216</span>, <span class="number">384</span>], [<span class="number">228</span>, <span class="number">384</span>], [<span class="number">240</span>, <span class="number">384</span>], [<span class="number">264</span>, <span class="number">384</span>], [<span class="number">276</span>, <span class="number">384</span>], [<span class="number">288</span>, <span class="number">384</span>], [<span class="number">324</span>, <span class="number">384</span>], [<span class="number">348</span>, <span class="number">384</span>], [<span class="number">360</span>, <span class="number">384</span>], [<span class="number">384</span>, <span class="number">384</span>], [<span class="number">408</span>, <span class="number">384</span>], [<span class="number">432</span>, <span class="number">384</span>], [<span class="number">456</span>, <span class="number">384</span>], [<span class="number">24</span>, <span class="number">396</span>], [<span class="number">96</span>, <span class="number">396</span>], [<span class="number">120</span>, <span class="number">396</span>], [<span class="number">144</span>, <span class="number">396</span>], [<span class="number">204</span>, <span class="number">396</span>], [<span class="number">216</span>, <span class="number">396</span>], [<span class="number">228</span>, <span class="number">396</span>], [<span class="number">252</span>, <span class="number">396</span>], [<span class="number">276</span>, <span class="number">396</span>], [<span class="number">288</span>, <span class="number">396</span>], [<span class="number">324</span>, <span class="number">396</span>], [<span class="number">360</span>, <span class="number">396</span>], [<span class="number">408</span>, <span class="number">396</span>], [<span class="number">456</span>, <span class="number">396</span>], [<span class="number">24</span>, <span class="number">408</span>], [<span class="number">48</span>, <span class="number">408</span>], [<span class="number">60</span>, <span class="number">408</span>], [<span class="number">72</span>, <span class="number">408</span>], [<span class="number">96</span>, <span class="number">408</span>], [<span class="number">120</span>, <span class="number">408</span>], [<span class="number">168</span>, <span class="number">408</span>], [<span class="number">180</span>, <span class="number">408</span>], [<span class="number">216</span>, <span class="number">408</span>], [<span class="number">228</span>, <span class="number">408</span>], [<span class="number">240</span>, <span class="number">408</span>], [<span class="number">252</span>, <span class="number">408</span>], [<span class="number">276</span>, <span class="number">408</span>], [<span class="number">312</span>, <span class="number">408</span>], [<span class="number">324</span>, <span class="number">408</span>], [<span class="number">360</span>, <span class="number">408</span>], [<span class="number">372</span>, <span class="number">408</span>], [<span class="number">384</span>, <span class="number">408</span>], [<span class="number">396</span>, <span class="number">408</span>], [<span class="number">408</span>, <span class="number">408</span>], [<span class="number">456</span>, <span class="number">408</span>], [<span class="number">24</span>, <span class="number">420</span>], [<span class="number">48</span>, <span class="number">420</span>], [<span class="number">60</span>, <span class="number">420</span>], [<span class="number">72</span>, <span class="number">420</span>], [<span class="number">96</span>, <span class="number">420</span>], [<span class="number">132</span>, <span class="number">420</span>], [<span class="number">144</span>, <span class="number">420</span>], [<span class="number">156</span>, <span class="number">420</span>], [<span class="number">168</span>, <span class="number">420</span>], [<span class="number">180</span>, <span class="number">420</span>], [<span class="number">204</span>, <span class="number">420</span>], [<span class="number">216</span>, <span class="number">420</span>], [<span class="number">228</span>, <span class="number">420</span>], [<span class="number">264</span>, <span class="number">420</span>], [<span class="number">276</span>, <span class="number">420</span>], [<span class="number">288</span>, <span class="number">420</span>], [<span class="number">300</span>, <span class="number">420</span>], [<span class="number">312</span>, <span class="number">420</span>], [<span class="number">324</span>, <span class="number">420</span>], [<span class="number">348</span>, <span class="number">420</span>], [<span class="number">372</span>, <span class="number">420</span>], [<span class="number">396</span>, <span class="number">420</span>], [<span class="number">408</span>, <span class="number">420</span>], [<span class="number">420</span>, <span class="number">420</span>], [<span class="number">444</span>, <span class="number">420</span>], [<span class="number">456</span>, <span class="number">420</span>], [<span class="number">24</span>, <span class="number">432</span>], [<span class="number">48</span>, <span class="number">432</span>], [<span class="number">60</span>, <span class="number">432</span>], [<span class="number">72</span>, <span class="number">432</span>], [<span class="number">96</span>, <span class="number">432</span>], [<span class="number">120</span>, <span class="number">432</span>], [<span class="number">168</span>, <span class="number">432</span>], [<span class="number">180</span>, <span class="number">432</span>], [<span class="number">192</span>, <span class="number">432</span>], [<span class="number">228</span>, <span class="number">432</span>], [<span class="number">252</span>, <span class="number">432</span>], [<span class="number">288</span>, <span class="number">432</span>], [<span class="number">300</span>, <span class="number">432</span>], [<span class="number">312</span>, <span class="number">432</span>], [<span class="number">324</span>, <span class="number">432</span>], [<span class="number">336</span>, <span class="number">432</span>], [<span class="number">348</span>, <span class="number">432</span>], [<span class="number">360</span>, <span class="number">432</span>], [<span class="number">372</span>, <span class="number">432</span>], [<span class="number">396</span>, <span class="number">432</span>], [<span class="number">408</span>, <span class="number">432</span>], [<span class="number">432</span>, <span class="number">432</span>], [<span class="number">456</span>, <span class="number">432</span>], [<span class="number">24</span>, <span class="number">444</span>], [<span class="number">96</span>, <span class="number">444</span>], [<span class="number">132</span>, <span class="number">444</span>], [<span class="number">144</span>, <span class="number">444</span>], [<span class="number">192</span>, <span class="number">444</span>], [<span class="number">204</span>, <span class="number">444</span>], [<span class="number">216</span>, <span class="number">444</span>], [<span class="number">228</span>, <span class="number">444</span>], [<span class="number">240</span>, <span class="number">444</span>], [<span class="number">252</span>, <span class="number">444</span>], [<span class="number">264</span>, <span class="number">444</span>], [<span class="number">276</span>, <span class="number">444</span>], [<span class="number">312</span>, <span class="number">444</span>], [<span class="number">324</span>, <span class="number">444</span>], [<span class="number">348</span>, <span class="number">444</span>], [<span class="number">360</span>, <span class="number">444</span>], [<span class="number">372</span>, <span class="number">444</span>], [<span class="number">396</span>, <span class="number">444</span>], [<span class="number">420</span>, <span class="number">444</span>], [<span class="number">444</span>, <span class="number">444</span>], [<span class="number">24</span>, <span class="number">456</span>], [<span class="number">36</span>, <span class="number">456</span>], [<span class="number">48</span>, <span class="number">456</span>], [<span class="number">60</span>, <span class="number">456</span>], [<span class="number">72</span>, <span class="number">456</span>], [<span class="number">84</span>, <span class="number">456</span>], [<span class="number">96</span>, <span class="number">456</span>], [<span class="number">144</span>, <span class="number">456</span>], [<span class="number">168</span>, <span class="number">456</span>], [<span class="number">192</span>, <span class="number">456</span>], [<span class="number">228</span>, <span class="number">456</span>], [<span class="number">240</span>, <span class="number">456</span>], [<span class="number">264</span>, <span class="number">456</span>], [<span class="number">276</span>, <span class="number">456</span>], [<span class="number">288</span>, <span class="number">456</span>], [<span class="number">300</span>, <span class="number">456</span>], [<span class="number">312</span>, <span class="number">456</span>], [<span class="number">324</span>, <span class="number">456</span>], [<span class="number">348</span>, <span class="number">456</span>], [<span class="number">360</span>, <span class="number">456</span>], [<span class="number">372</span>, <span class="number">456</span>], [<span class="number">396</span>, <span class="number">456</span>], [<span class="number">408</span>, <span class="number">456</span>], [<span class="number">420</span>, <span class="number">456</span>], [<span class="number">444</span>, <span class="number">456</span>], [<span class="number">456</span>, <span class="number">456</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">    x.append(i[<span class="number">0</span>])</span><br><span class="line">    y.append(i[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>flag值：flag{1e52c4c05dcff5fcc54b64e21bcbdc9e}</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下wp——金盾杯&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>转轮机加密</title>
    <link href="http://example.com/2021/12/09/%E8%BD%AC%E8%BD%AE%E6%9C%BA%E5%8A%A0%E5%AF%86/"/>
    <id>http://example.com/2021/12/09/%E8%BD%AC%E8%BD%AE%E6%9C%BA%E5%8A%A0%E5%AF%86/</id>
    <published>2021-12-09T09:11:23.000Z</published>
    <updated>2021-12-09T09:29:47.028Z</updated>
    
    <content type="html"><![CDATA[<p>​    转轮机加密</p><span id="more"></span><p>​     转轮密码机是由一个输入键盘和一组转轮组成的，每个转轮上标有26个字母，字母的顺序随意，转轮之间由齿轮进行连接，当一个转轮转动时，可以将一个字母转化为另一个字母。</p><h4 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h4><p>​    有一组有26个英文字母组成的字符串，每个字符串出现且仅出现一次，对应的有密钥和密文，密钥是的大小 1&lt;=密钥&lt;=字符串组个数，密文由一组字符串组成，密钥的个数与密文的长度与字符串组数相同。</p><h4 id="解密方法："><a href="#解密方法：" class="headerlink" title="解密方法："></a>解密方法：</h4><pre><code>      1. 通过密钥对字母组成的字符串组重新排列。      2. 通过密文对每一个字母组成的字符串进行重新排列。      3. 然后按列取新的字符串组中的字符串中的每一个字母组成新的字符串组，共26组。      4. 找到符合题意得即为flag。（或直接一个一个试）</code></pre><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p>字符串组：<br>1: &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</p><p>2: &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt;</p><p>3: &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</p><p>4: &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</p><p>5: &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</p><p>6: &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</p><p>7: &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</p><p>8: &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</p><p>9: &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt;</p><p>10: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP&lt;</p><p>11：&lt; MNBVCXZQWERTPOIUYALSKDJFHG&lt;</p><p>12：&lt; LVNCMXZPQOWEIURYTASBKJDFHG&lt;</p><p>13： &lt; JZQAWSXCDERFVBGTYHNUMKILOP&lt;</p><p>密钥为：2，3，7，5，13，12，9，1，8，10，4，11，6</p><p>密文为：NFQKSEVOQOFNP</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">table=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">6</span>]</span><br><span class="line">Ciphertext=<span class="string">&#x27;NFQKSEVOQOFNP&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;转轮机.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data=f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转轮机根据table重新排列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wheel_decode</span>(<span class="params">data,table</span>):</span></span><br><span class="line">    resultList=[]</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;[A-Z]&#123;26&#125;&#x27;</span>)</span><br><span class="line">    result = pattern.findall(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        resultList.append(result[i-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> resultList</span><br><span class="line"></span><br><span class="line">resultList = wheel_decode(data,table)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据密文重新排列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rearrange</span>(<span class="params"><span class="type">List</span>,Ciphertext</span>):</span></span><br><span class="line">    resultList=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">13</span>):</span><br><span class="line">        resultList.append(<span class="type">List</span>[i][<span class="type">List</span>[i].find(Ciphertext[i]):]+<span class="type">List</span>[i][:<span class="type">List</span>[i].find(Ciphertext[i])])</span><br><span class="line">    <span class="keyword">return</span> resultList</span><br><span class="line">resultList= rearrange(resultList,Ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取每一列，列出结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rearrange2</span>(<span class="params"><span class="type">List</span></span>):</span></span><br><span class="line">    resultList=[]</span><br><span class="line">    s=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">List</span>:</span><br><span class="line">            s += j[i]</span><br><span class="line"></span><br><span class="line">        resultList.append(s)</span><br><span class="line">        s=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> resultList</span><br><span class="line"></span><br><span class="line">resultList = rearrange2(resultList)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> resultList:</span><br><span class="line">    <span class="built_in">print</span>(i.lower())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    转轮机加密&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto`" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Crypto做题总结——攻防世界</title>
    <link href="http://example.com/2021/12/05/Crypto%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    <id>http://example.com/2021/12/05/Crypto%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</id>
    <published>2021-12-05T07:16:20.000Z</published>
    <updated>2021-12-12T10:37:39.753Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界crypto新手练习区做题总结</p><span id="more"></span><h4 id="crypto做题总结"><a href="#crypto做题总结" class="headerlink" title="crypto做题总结"></a>crypto做题总结</h4><h5 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h5><ol><li><p>Caesar 凯撒密码  在线解密即可</p></li><li><p>Morse 莫尔斯电码 密码由.-组成或者是由其他字符替换，格式有两个不一样的字符，组合成一段一段的长字符串。</p><p>组成：</p><ol><li>点（.）（可由其他字符替换）</li><li>划（-）（可由其他字符替换）</li><li>每个字符间短的停顿（通常用空格表示停顿）</li><li>每个词之间中等的停顿（通常用 <code>/</code> 划分）</li><li>以及句子之间长的停顿</li></ol></li><li><p>幂数加密 ：通过某一进制的幂数对字符进行加密（<strong>二进制加密</strong>） </p><ol><li>二进制幂数加密法：由于英文字母只有26个字母。只要2的0、1、2、3、4、5次幂就可以表示31个单元。通过用二进制幂数表示字母序号数来加密。</li><li><p>密码形式：由1，2，3，4，5，五个数字组成的一段一段或者用某些特殊字符分割的字符串,或者直接求每一段之和得到字符序号。</p></li><li><p>由于英文字母只有26个字母，由公式可知，只要2的0、1、2、3、4、5次幂就可以表示31个单元。通过用二进制幂数表示字母序号数来加密。例如：</p><p>明文： d o n o t p u l l a l l y o u r e g g s i n o n e b a s k e t</p><p>字母序号：4 15 14 15 20 16 21 12 12 1 12 12 25 15 21 18 5 7 7 19 9 14 15 14 5 2 1 19 11 5 20</p><p>由于4=2^2 所以D加密过之后是2；15=2^0+2^1+2^2+2^3所以O加密后是0123。</p></li><li><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;8842101220480224404014224202480122&quot;</span> //求每一段之和</span><br><span class="line">a = a.split(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">str</span> = a[i]</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="built_in">sum</span> += <span class="built_in">int</span>(i)</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">sum</span> + <span class="number">64</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol><li><p>栅栏密码（Railfence）（传统）：栅栏密码是一种简单的移动字符位置的加密方法，规则简单，容易破解。栅栏密码的加密方式：把文本按照一定的字数分成多个组，取每组第一个字连起来得到密文1，再取每组第二个字连起来得到密文2……最后把密文1、密文2……连成整段密文。（密钥一般为其字符串长度的因数）</p><p>栅栏密码（W型）：明文由上至下顺序写上，当到达最低部时，再回头向上，一直重复直至整篇明文写完为止。（密钥可能是小于字符串长度的任何一个数字）</p></li><li><p>培根密码：加密时，明文中的每个字母都会转换成一组五个英文字母（由A/a和B/b组成）。</p><p>特征：给一串字符串，字符串由两种字符组成，将两种字符分别替换成A和B进行解密。</p></li><li><p>html编码：形如\&#76;\&#122;\&#69;\&#120;\&#79;\&#83;\&#56;\&#120;\&#77;\&#68;\&#69;\&#118;\&#77;这样的编码。</p></li><li><p>sacll码加密：通过0-127对字符进行编码。</p><p>解码脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##ascll码解密</span></span><br><span class="line">flag = <span class="built_in">input</span>();</span><br><span class="line">letters = flag.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> letters:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag=119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100</span></span><br></pre></td></tr></table></figure></li><li><p>base64编码：由’A’-‘Z’，’a’-‘z’，’0’’9’，’+’和’/‘组成的字符串密码，结尾可能会有=号。</p><p>base32编码：由字母A-Z和数字2-7，组成的字符串密码。</p><p>base16编码：数字0-9和字母A-F，组成的字符串密码</p></li><li><p>RSA(具体原理以后单独总结，知识只根据本题)已知p,q,e，求d</p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##rsa已知p,q,e,求d</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">473398607161</span></span><br><span class="line">q = <span class="number">4511491</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span> (d)</span><br></pre></td></tr></table></figure></li><li><p>pyc文件：由py文件编译而成的二进制文件。打开方式：将pyc文件复制到项目目录下，通过终端使用uncompyle6 xxx.pyc &gt; xxx.py 即可反编译为py文件查看。</p></li><li><p>esaychallenge  wp：</p><ol><li><p>反编译二进制文件得到py文件。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: ans.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2018-08-09 11:29:44</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = <span class="built_in">ord</span>(i) ^ <span class="number">36</span></span><br><span class="line">        x = x + <span class="number">25</span></span><br><span class="line">        s += <span class="built_in">chr</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = <span class="built_in">ord</span>(i) + <span class="number">36</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += <span class="built_in">chr</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span>(<span class="params">ans</span>):</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32encode(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Please Input your flag:&#x27;</span>)</span><br><span class="line"><span class="comment"># flag = raw_input()</span></span><br><span class="line">final = <span class="string">&#x27;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#x27;</span></span><br><span class="line"><span class="keyword">if</span> encode3(encode2(encode1(flag))) == final:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;correct&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;wrong&#x27;</span>)</span><br><span class="line"><span class="comment"># okay decompiling easychallenge.pyc</span></span><br></pre></td></tr></table></figure></li><li><p>发现是flag被3次加密，加密后得到的密文已给出为final。依次解密3次得到flag，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#easychallenge</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">final = <span class="string">&#x27;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode3</span>(<span class="params">ans</span>):</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32decode(ans)</span><br><span class="line">final=decode3(final)</span><br><span class="line"><span class="comment"># final=final.split(&quot;\&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode2</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        i = i ^ <span class="number">36</span></span><br><span class="line">        x = i - <span class="number">36</span></span><br><span class="line">        s += <span class="built_in">chr</span>(x)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">final=decode2(final)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode1</span>(<span class="params">ans</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        i = <span class="built_in">ord</span>(i) - <span class="number">25</span></span><br><span class="line">        x = i ^ <span class="number">36</span></span><br><span class="line">        s += <span class="built_in">chr</span>(x)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="built_in">print</span>(decode1(final))</span><br></pre></td></tr></table></figure></li><li><p>得到flag：cyberpeace{interestinghhhhh}</p></li></ol></li><li><p>MD5加密：</p><p>特征：由16位或者32位的字符组成，且字符是大写字母和数字或者小写字母和数字。字母大小写要统一。</p></li><li><p>Url编码：</p><p>特征：使用 百分号% + 十六进制数字 组成的字符串。</p></li></ol><p>​              编码过程：一个字符/汉字 —&gt; 转化为对应的ascll码值/扩展ascll码值 —&gt; 转化为16进制数 —&gt;在前        面加上% —&gt;Url编码        的一个字符</p><ol><li><p>unicode编码</p><p>Unicode码扩展自ASCII字元集,使用全16位元字元集.Unicode目前普遍采用的是UCS-2,它用两个字节来编码一个字符,字符编码一般用十六进制来表示.</p><p>例如:\u4e16\u754c\u4f60\u597d<br>hello world</p></li></ol><ol><li><p>中文电码</p><p>​      中文电码表采用了四位阿拉伯数字作代号，从0001到9999按四位数顺序排列，用四位数字表示最多一万个汉字、字母和符号。</p><p>特征：由一串数字转变成汉字</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;攻防世界crypto新手练习区做题总结&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto做题总结" scheme="http://example.com/tags/Crypto%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>继承-学习笔记</title>
    <link href="http://example.com/2021/08/26/%E7%BB%A7%E6%89%BF-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/26/%E7%BB%A7%E6%89%BF-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-26T08:02:38.000Z</published>
    <updated>2021-08-26T08:05:13.218Z</updated>
    
    <content type="html"><![CDATA[<p>继承——学习笔记。</p><span id="more"></span><ol><li>继承：更专用的类（派生类）继承更一般的类（基类）的数据和行为。</li><li>return a==b; 如果a与b的值相等返回true，否则返回false。</li><li>派生类从基类继承所有成员函数和数据成员，但如果继承的行为不合适，可以改变其实现。</li><li>派生类对象上可以调用基类的成员函数，但是<strong>不能访问</strong>基类的数据成员。</li><li>对值的变化使用单个类，对行为的变化使用继承。</li><li>使用<strong>初始化器列表</strong>调用基类构造函数，来对数据成员进行初始化。</li><li>在派生类中重写成员函数时，如果在写此成员函数中需要调用基类的该函数，需使用<strong>基类::函数</strong>的方法。</li><li>派生类的对象可作为基类对象存储在基类数组中，但是对象数组会将派生类下降为基类对象，并将其数据进行切割，保留基类数据；如需保留派生类对象的所有数据，可使用<strong>指针数组</strong>进行储存，因为指针是对象的起始地址，每个派生类对象都是基类对象的特例，因此派生类对象的起始地址就是基类对象的起始地址，另外对于派生类重写的成员函数，想要实现<strong>根据指针所指向的对象的实际类型来确定访问哪一个成员函数</strong>，需要在基类同名的那个成员函数的声明中加入保留字<strong>virtual</strong>，在派生类中那个成员函数前加入保留字virtual是一个比较好的习惯。注：只有派生类指针可以赋值给基类指针，而基类指针不能赋值给派生类指针。</li><li>由类的结构层次中的不同的类访问对象，应使用指针，因为指向各种对象的指针都具有相同的大小——即内存地址的大小——而对象本身可能具有不同的大小。</li><li>虚函数：对于函数声明前加入保留字virtual。</li><li>当调用虚函数时，编译器都会在运行时确定特定调用中隐式参数的类型，然后调用该对象的适当函数。</li><li>虚函数使程序<strong>易于扩展</strong>，就是基于同一个基类的所有派生类可以储存在同一个基类的指针数组中，使得在对此数组进行循环访问时可以根据特定对象来访问特定的函数。</li><li>多态性：一个数组中收集两类问题或几类问题的混合，都基于同一个基类。</li><li>多态集合中的对象具有一些共性，但不一定属于同一个类型，继承用于表达这种共性，而虚函数可以实现行为的变化。</li><li>当函数具有多态参数时（即可以属于基类的参数，也可以属于派生类的参数），参数变量尽量使用指针或引用，否则会发生切割问题。</li><li>如果想要在派生类中重写虚函数，可以在函数声明的某尾加入override保留字，这样如果由于不小心写错了函数，使得函数由重写变成了重载（尤其时忘掉了const保留字），编译器会报错，另外如果不是虚函数的话。编译器也会报错。</li><li>当使用一组类时，我们要将他们组织到继承层次结构中，这使我们可以以统一的方式处理不同类的对象。</li><li>UML类图：是面向对象系统建模中最常用的图，其基本元素是类和接口。</li><li>逐步形成继承层次结构：<ol><li>列出作为层次结构组成部分的类。</li><li>将各个类组织到继承层次结构当中（使用UML类图）。</li><li>确定公共职责。</li><li>确定在派生类中需要重写那些函数，并将需要重写的函数指定为虚函数。</li><li>定义每个派生类的公共接口。</li><li>确定数据成员。</li><li>实现构造函数和成员函数。</li><li>在空闲储存区上分配对象并处理它们。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;继承——学习笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="继承" scheme="http://example.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>类-学习笔记</title>
    <link href="http://example.com/2021/08/26/%E7%B1%BB-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/26/%E7%B1%BB-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-26T01:57:39.000Z</published>
    <updated>2021-08-26T02:01:21.214Z</updated>
    
    <content type="html"><![CDATA[<p>有关于类的一些需要注意的点，写下供以后进行复习。</p><span id="more"></span><ol><li>类中数据成员和成员函数定义所需要的所有头文件都要在头文件中声明，并且如果引用了标准库中的头文件，就要包含伪指令 using namespace std；。</li><li>只读函数在声明和定义的时候都需要加const关键字。</li><li>类中this是隐式参数的指针，不是隐式参数。</li><li>类中的成员函数包括 构造函数，析构函数，只读函数，只写函数和助手函数。</li><li>封装：隐藏实现细节的同时提供公共接口的过程。</li><li>骆驼命名法：名字以大写字母开头，名字中的每一个单词也已大写字母开头。</li><li>类的结尾要有分号。</li><li>重载：同一个函数名用于多个函数。</li><li>将平行向量转化为对象的向量。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;有关于类的一些需要注意的点，写下供以后进行复习。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="类" scheme="http://example.com/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android_studio学习框架</title>
    <link href="http://example.com/2021/08/23/Android-studio%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2021/08/23/Android-studio%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</id>
    <published>2021-08-23T07:47:23.000Z</published>
    <updated>2021-08-23T08:03:30.798Z</updated>
    
    <content type="html"><![CDATA[<p>​           终于学了如何开发一个app，并能实现开发一个小app的能力，为了整理一下这些天学的内容以及方便以后复习，就做了一个学习内容的框架。</p><span id="more"></span><h4 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h4><img src="/2021/08/23/Android-studio%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/1.png" class>]]></content>
    
    
    <summary type="html">&lt;p&gt;​           终于学了如何开发一个app，并能实现开发一个小app的能力，为了整理一下这些天学的内容以及方便以后复习，就做了一个学习内容的框架。&lt;/p&gt;</summary>
    
    
    
    <category term="Android studio" scheme="http://example.com/categories/Android-studio/"/>
    
    
    <category term="Android studio框架" scheme="http://example.com/tags/Android-studio%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之计数排序</title>
    <link href="http://example.com/2021/06/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-16T03:33:05.000Z</published>
    <updated>2021-06-16T03:53:34.346Z</updated>
    
    <content type="html"><![CDATA[<p>这里介绍第八种排序算法——计数排序</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。不基于比较来对元素进行排序。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>找出待排序的数组中最大num2和最小num1的元素。</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i-num1项。</li><li>反向填充目标数组：对数组C中的每一个元素(从后向前遍历)从该元素值到1进行遍历，将该元素在数组中的位置+num1填充在原始数组中。其中有一个记录位置的变量，起始大小等于原始数组大小减一，每填充一个值就使其减一，直到原始数组填充完毕。</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>最好、最坏、平均时间复杂度为：O(n+k) k是原始数组最大值减去最小值加一。</li><li>空间复杂度：O(k)</li><li>稳定性：稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">//记录最小值</span></span><br><span class="line">    <span class="keyword">int</span> num1=num[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//记录最大值</span></span><br><span class="line">    <span class="keyword">int</span> num2= num[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="keyword">sizeof</span> num/<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i]&lt;num1)</span><br><span class="line">        &#123;</span><br><span class="line">            num1=num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num[i]&gt;num2)</span><br><span class="line">        &#123;</span><br><span class="line">            num2=num[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对每一个出现的数进行计数</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">num3</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span> num/<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num3[num[i]-num1]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录排到的位置</span></span><br><span class="line">    <span class="keyword">int</span> num4=<span class="keyword">sizeof</span> num/<span class="number">4</span><span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//将数值从后向前填入数组中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num2-num1;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=num3[i]<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            num[num4]=i+num1;</span><br><span class="line">            num4--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span> num/<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里介绍第八种排序算法——计数排序&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之堆排序</title>
    <link href="http://example.com/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-15T15:44:23.000Z</published>
    <updated>2021-06-15T16:18:03.546Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了6中排序算法，这里介绍第七种——堆排序。</p><span id="more"></span><h3 id="堆和堆的性质"><a href="#堆和堆的性质" class="headerlink" title="堆和堆的性质"></a>堆和堆的性质</h3><ul><li><p>堆：堆是一种数据结构，一种叫做完全二叉树的数据结构。</p></li><li><p>堆的性质：</p><p>这里我们用到两种堆，其实也算是一种。</p><p>大顶堆：每个节点的值都大于或者等于它的左右子节点的值。</p><p>小顶堆：每个节点的值都小于或者等于它的左右子节点的值。</p><p>如下图所示，就是两种堆</p><img src="/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/1.jpg" class><p>如果我们把这种逻辑结构映射到数组中，就是下边这样</p><p>|  9   |  5   |  8   |  2   |  3   |  4   |  7   |  1   |<br>| :—: | :—: | :—: | :—: | :—: | :—: | :—: | :—: |<br>|  1   |  3   |  5   |  4   |  2   |  8   |  9   |  7   |</p></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>将数组中的最大值一个一个的交换到第一个位置，即num[0];然后在将其逐个放入数组的结尾，没放完一个，在程序中就使数组的大小减一，即堆的大小减一，直到数组中只剩下一个元素。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>将带排序的序列构造成一个大顶堆，根据大顶堆的性质，当前堆的根节点（堆顶）就是序列中最大的元素。</p></li><li><p>将堆顶元素和最后一个元素交换，然后将剩下的节点重新构造成一个大顶堆。</p></li><li><p>重复步骤2，如此反复，从第一次构建大顶堆开始，每一次构建，我们都能获得一个序列的最大值，然后把它放到大顶堆的尾部。最后，就得到一个有序的序列了。</p></li><li><p>将最大值放入堆顶的方法：</p><p>​        根据大顶堆的性质，每个节点的值都大于或者等于它的左右子节点的值。所以我们需要找到所有包含子节点的节点，也就是非叶子节点，然后调整他们的父子关系，非叶子节点遍历的顺序应该是从下往上，这比从上往下的顺序遍历次数少很多，因为，大顶堆的性质要求父节点的值要大于或者等于子节点的值，如果从上往下遍历，当某个节点即是父节点又是子节点并且它的子节点仍然有子节点的时候，因为子节点还没有遍历到，所以子节点不符合大顶堆性质，当子节点调整后，必然会影响其父节点需要二次调整。但是从下往上的方式不需要考虑父节点，因为当前节点调整完之后，当前节点必然比它的所有子节点都大，所以，只会影响到子节点二次调整。相比之下，从下往上的遍历方式比从上往下的方式少了父节点的二次调整。</p></li><li><p>几个关键值</p><ul><li>树的层数，即堆的层数。</li><li>倒数第二层非叶子节点数。</li><li>剩下未排序列的数组大小。</li></ul></li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>最好、最坏及平均时间复杂度：nlogn  以2为底</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/2.gif" class><img src="/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/3.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明堆排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dui_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> num1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]= &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">//数组大小</span></span><br><span class="line">    <span class="keyword">int</span> size1 = <span class="keyword">sizeof</span> num/<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//每进入一次函数就将一个最大的值放入数列末尾</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size1; i&gt;=<span class="number">2</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dui_sort</span>(num,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dui_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> num1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录树的层数，从第0层开始</span></span><br><span class="line">    <span class="keyword">int</span> num2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num3=num1;</span><br><span class="line">    <span class="keyword">while</span>(num3&gt;=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num3=num3/<span class="number">2</span>;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录倒数第二层非叶子节点的个数</span></span><br><span class="line">    <span class="keyword">int</span> num4=(num1-<span class="built_in">pow</span>(<span class="number">2</span>,num2))/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//记录要排到的位置数</span></span><br><span class="line">    <span class="keyword">int</span> num5=num1<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num2<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==num2<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num4; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> num6=<span class="built_in">pow</span>(<span class="number">2</span>,i)+j<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>]&amp;&amp;num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>&lt;num1)<span class="comment">//可能只有一个子叶所以需要判断是否越界</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="built_in">pow</span>(<span class="number">2</span>,i); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> num6=<span class="built_in">pow</span>(<span class="number">2</span>,i)+j<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(num[num5],num[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面介绍了6中排序算法，这里介绍第七种——堆排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之归并排序</title>
    <link href="http://example.com/2021/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-13T12:40:59.000Z</published>
    <updated>2021-06-13T13:52:00.268Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法的10大排序前面已经介绍了5个，下来介绍第6中排序算法——归并排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>归并排序是创建在归并操作上的一种有效的排序算法。算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。归并排序思路简单，速度仅次于快速排序，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的数列。</p><p>归并排序是用分治思想，分治模式在每一层递归上有三个步骤：</p><ul><li>分解：将n个元素分成个含n/2个元素的子序列。</li><li>解决：用合并排序法对两个子序列递归的排序。</li><li>合并：合并两个已排序的子序列已得到排序结果。</li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>进入归并排序函数merge-sort(int num[],int low,int high,int mid),其中low是数组起始值，high是数组最大值，mid是数组大小除以2。</p></li><li><p>设置递归开始条件，即下代码的if(low&lt;high)。</p></li><li><p>实行分而治之的思想，将数组一分为二，分别执行merge-sort函数，直到剩下一个数，不可再分。</p></li><li><p>对之前一份为二的数组进行化二为一进行排序合并。</p><p>排序合并方法：</p><ul><li>定义一个向量。</li><li>将两个数组从小到大依次添加在向量后面。</li><li>将向量的值赋给原始数组的指定位置。</li></ul></li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>时间复杂度：不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )，以2为底。</li><li>空间复杂度：O(n)。</li><li>稳定性：稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span> mid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]= &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//进入归并排序函数,其中4为数组大小除以2</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(num,<span class="number">0</span>,<span class="number">9</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//打印排序好的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//不满足if下的条件递归开始</span></span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">merge_sort</span>(num,low,mid,(low+mid)/<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">merge_sort</span>(num,mid+<span class="number">1</span>,high,(mid+<span class="number">1</span>+high)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> num1 = low;</span><br><span class="line">        <span class="keyword">int</span> num2 = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//将数组中从low到high的数进行排序并存放在num4的向量之中</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; num4;</span><br><span class="line">        <span class="keyword">while</span>(num1&lt;=mid&amp;&amp;num2&lt;=high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[num1]&lt;=num[num2])</span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[num1]);</span><br><span class="line">                num1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[num2]);</span><br><span class="line">                num2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1&gt;mid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=num2; i&lt;=high; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=num1; i&lt;=mid; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将从low到high的数排序完存入数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=low; i&lt;=high; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i]=num4[i-low];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;排序算法的10大排序前面已经介绍了5个，下来介绍第6中排序算法——归并排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之希尔排序</title>
    <link href="http://example.com/2021/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-12T04:40:33.000Z</published>
    <updated>2021-06-12T05:27:48.540Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们介绍了插入排序：从后向前与每个相邻元素进行比较和交换，下面来介绍一下插入排序的改进版——希尔排序：实现不相邻的两个元素进行比较和交换，但实质上也是插入排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>插入排序效率低下是因为其移动元素每次只能移动一位，当排序元素的规模较大时，需要将元素一位一位地从一端移动到另一端。而如果我们能够让元素一次性地移动到较远的位置上，这样无疑就可以避免多次一位一位地移动操作。希尔排序正是基于此原理来优化、提高插入排序的效率。通过指定步长step，将原数组分为step个互相独立子数组，然后通过<strong>插入排序</strong>对这些子数组分别进行排序(即分组排序)，这时我们称其为step有序数组。当step很大时，我们就可以将元素一次性移动到很远的位置上，为下一次较小的step有序创造便利；不断缩小步长step，重复上述过程建立step有序数组，达到局部有序的目的。当step最终为1做最后一次step有序时，就是我们平常所熟悉的插入排序了，由于该数组已经多次被较大的step进行分组排序了，此时只需要较少次数的元素移动就可以实现整个数组全局有序</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>定义一个增量gap大小就等于数组的大小。</li><li>进入一个while循环，条件是gap&gt;1,作用是当排序结束时跳出循环。</li><li>定义一个增量递减的倍数n，可以是小于数组大小的任意值，一般是2，3，4，并执行：gap=gap/n+1；注意这里如果n&gt;2的话，要在后加一，如：gap=gap/n+1，这是为了防止gap为0而不能进入最后一次插入排序;但是如果n=2的话，一定不能加一，否则可能会陷入无限循环。</li><li>通过增量将数组划分为若干个小数组。</li><li>对每一个小数组进行插入排序。</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>时间复杂度：希尔排序的时间复杂度与其增量gap有关，平均时间复杂度为：O(n*(logn)^2),以2为底。</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//定义增量</span></span><br><span class="line">    <span class="keyword">int</span> gap=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//第一个循环:控制增量的，直到增量小于等于1时说明排序已经完成，跳出即可</span></span><br><span class="line">    <span class="keyword">while</span>(gap&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gap=gap/<span class="number">3</span>+<span class="number">1</span>;<span class="comment">//10是数组的长度，2是每次增量减小的倍数，+1是为了防止最后增量为0而无法进行插入排序，但当增量减小的倍数为2时不能加1</span></span><br><span class="line">        <span class="comment">//第二个循环：通过增量将数组进行分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gap&amp;&amp;i+gap&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第三和第四个循环：对每一组进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+gap;j&lt;<span class="number">10</span>;j+=gap)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = num[j];</span><br><span class="line">                <span class="keyword">int</span> k;</span><br><span class="line">                <span class="keyword">for</span>(k=j-gap;k&gt;=i;k=k-gap)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(num[k]&gt;temp)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num[k+gap]=num[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                num[k+gap]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面我们介绍了插入排序：从后向前与每个相邻元素进行比较和交换，下面来介绍一下插入排序的改进版——希尔排序：实现不相邻的两个元素进行比较和交换，但实质上也是插入排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之插入排序</title>
    <link href="http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-11T14:46:27.000Z</published>
    <updated>2021-06-11T15:06:02.385Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了冒泡排序，下面来介绍冒泡排序的姊妹排序——插入排序，虽然他们的原理不同，但是特性上面是完全相同的。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，直到找到相应的位置插入。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p></li><li><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p></li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>时间复杂度<ul><li>最好情况：数组初始状态是正序的，此时的时间复杂度为O(n)。</li><li>最坏情况: 文件的初始状态是逆序的，此时的时间复杂度为O(n^2)。</li><li>综上：插入排序总的时间复杂度为 O(n^2)。</li></ul></li><li><p>空间复杂度：无论什么情况都是O(1)。</p></li><li><p>稳定性: 稳定</p></li></ol><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序的数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">//逐个元素插入元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = num[i];<span class="comment">//存储要插入元素的值</span></span><br><span class="line">        <span class="keyword">int</span> k=i<span class="number">-1</span>;<span class="comment">//记录插入元素的索引</span></span><br><span class="line">        <span class="keyword">while</span>(k&gt;=<span class="number">0</span>&amp;&amp;num[k]&gt;temp)</span><br><span class="line">        &#123;</span><br><span class="line">            num[k+<span class="number">1</span>]=num[k];</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入元素</span></span><br><span class="line">        num[k+<span class="number">1</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面介绍了冒泡排序，下面来介绍冒泡排序的姊妹排序——插入排序，虽然他们的原理不同，但是特性上面是完全相同的。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之选择排序</title>
    <link href="http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-11T13:48:53.000Z</published>
    <updated>2021-06-12T05:24:55.828Z</updated>
    
    <content type="html"><![CDATA[<p>选择排序是排序算法中最简单粗暴的一种，之前写过冒泡排序，而选择排序与冒泡排序有相似之处，但时间复杂度要比冒泡排序还要高一些，下来介绍选择排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每次找到数组中的最大值(从大到小排)或最小值(从小到大排)放在前面。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>时间复杂度：</p><ul><li>最好情况：O(n^2)</li><li>最坏情况：O(n^2)</li><li>平均情况：O(n^2)</li></ul></li><li><p>空间复杂度：O(1)</p></li><li>稳定性：稳定</li></ul><h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><img src="/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序的数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=i;<span class="comment">//标记最小元素</span></span><br><span class="line">        <span class="comment">//找到最小元素索引</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[temp]&gt;num[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将最小值放入数组最左边</span></span><br><span class="line">        <span class="built_in">swap</span>(num[i],num[temp]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;选择排序是排序算法中最简单粗暴的一种，之前写过冒泡排序，而选择排序与冒泡排序有相似之处，但时间复杂度要比冒泡排序还要高一些，下来介绍选择排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之快速排序</title>
    <link href="http://example.com/2021/06/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-10T05:38:49.000Z</published>
    <updated>2021-06-10T06:18:14.187Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了冒泡排序，其是交换排序的一种，而快速排序是另一种交换排序，下就来介绍快速排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>设置两个变量 low、high，排序开始时：low=0，high=size-1(size为数组的大小)。</li><li>整个数组找基准正确位置，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面，具体步骤如下：<ul><li>默认数组的第一个数为基准数据，赋值给temp，即temp=num[low]。</li><li>因为默认数组的第一个数为基准，所以从后面开始向前搜索（high–-），找到第一个小于key的num[high]，就将 num[high] 赋给 num[low]，即 num[low] = num[high]，然后执行low++,break;。（循环条件是 low!=high）</li><li>此时从前面开始向后搜索（low++），找到第一个大于temp的num[low]，就将 num[low] 赋给 num[high]，即 num[high] = num[low]。,然后执行high++,break;（循环条件是 low!=high）</li><li>循环 2-3 步骤，直到 low=high，该位置就是基准位置。</li><li>把基准数据赋给当前位置。</li></ul></li><li>第一趟找到的基准位置，作为下一趟的分界点。</li><li>递归调用（quick_sort）对分界点前和分界点后的子数组排序，重复2.2、2.3、2.4的步骤。</li><li>最终就会得到排序好的数组。</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><p>时间复杂度</p><ul><li><p>最好情况：每一次将待排数组划分为两个相等的部分（多一少一也算相等），需要logn次划分，此时时间复杂度为 O(nlogn)(其中log以2为底)。</p></li><li><p>最坏情况：每次划分只能减少一个元素，快排就相当于是冒泡排序了，需要n-1次划分，此时时间复杂度为O(n^2)。</p></li><li>平均时间复杂度为：O(nlogn)(其中log以2为底)。</li></ul></li><li><p>空间复杂度</p><p>O(nlogn)(其中log以2为底)。</p></li><li><p>稳定性：不稳定。</p></li></ol><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明快排函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个要排序的数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//调用快排的函数</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(num,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="comment">//打印排序之后的结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义快排函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="comment">//将基准元素存储在temp中</span></span><br><span class="line">    temp = num[low];</span><br><span class="line">    <span class="comment">//将low和high的值赋值给i,j,因为马上的递归函数需要用到low和high</span></span><br><span class="line">    <span class="keyword">int</span> i=low;</span><br><span class="line">    <span class="keyword">int</span> j= high;</span><br><span class="line">    <span class="comment">//进入循环直到i&lt;j时跳出循环,递归结束</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//进入循环直到i=j时跳出循环，代表一个基准值放置在正确的位置</span></span><br><span class="line">        <span class="keyword">while</span>(i!=j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//进入循环直到有一个数与基准数相比相对位置不对应跳出循环</span></span><br><span class="line">            <span class="keyword">while</span>(i!=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[j]&lt;temp)</span><br><span class="line">                &#123;</span><br><span class="line">                    num[i]=num[j];</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进入循环，前一个循环从后往前找，这个循环从前向后找</span></span><br><span class="line">            <span class="keyword">while</span>(i!=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[i]&gt;temp)</span><br><span class="line">                &#123;</span><br><span class="line">                    num[j]=num[i];</span><br><span class="line">                    j--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将基准元素放入指定位置</span></span><br><span class="line">        num[i]=temp;</span><br><span class="line">        <span class="comment">//进入递归，直到所有元素都排列好</span></span><br><span class="line">        <span class="built_in">quick_sort</span>(num,low,i<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">quick_sort</span>(num,j+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面介绍了冒泡排序，其是交换排序的一种，而快速排序是另一种交换排序，下就来介绍快速排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
