<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT 日志</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-24T15:53:35.088Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React--1</title>
    <link href="http://example.com/2022/03/24/React-1/"/>
    <id>http://example.com/2022/03/24/React-1/</id>
    <published>2022-03-24T15:39:27.000Z</published>
    <updated>2022-03-24T15:53:35.088Z</updated>
    
    <content type="html"><![CDATA[<p>React学习</p><span id="more"></span><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><ol><li>React：是一个将数据渲染为HTML视图的开源的JavaScript库。</li><li>为什么要学习React<ol><li>原生JavaScript操作DOM繁琐、效率低。</li><li>使用JavaScript直接操作DOM，浏览器会进行大量的重绘重排。</li><li>原生JavaScript没有组件化编码方案，代码复用率低。</li></ol></li><li>React的特点<ol><li>采用组件化模式，声明式编码，提高开发效率及组件复用率。</li><li>在React Native中可以使用React语法进行移动端开发。</li><li>使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互。</li></ol></li></ol><h2 id="React相关js库"><a href="#React相关js库" class="headerlink" title="React相关js库"></a>React相关js库</h2><ol><li>react.js：React核心库。</li><li>react-dom.js：提供操作DOM的React扩展库。</li><li>babel.min.js：解析jsx语法代码转化为js代码的库。</li></ol><h2 id="React第一行代码"><a href="#React第一行代码" class="headerlink" title="React第一行代码"></a>React第一行代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;hello_react&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--准备好一个容器--&gt;</span><br><span class="line">    &lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!--引入react核心库--&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!--引入react-dom库，用于支持react操作DOM--&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!--引入babel库，用于将jsx代码转换为js代码--&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--此处type需写babel--&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">        //1.创建虚拟DOM</span><br><span class="line">        const VDOM = &lt;h&gt;hello_react&lt;/h&gt; //此处一定不要写引号，因为不是字符串</span><br><span class="line">        //2.渲染虚拟DOM到页面</span><br><span class="line">        ReactDOM.render(VDOM, document.getElementById(&quot;test&quot;)) </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="两种创建虚拟DOM的方法"><a href="#两种创建虚拟DOM的方法" class="headerlink" title="两种创建虚拟DOM的方法"></a>两种创建虚拟DOM的方法</h2><ol><li><p>使用js创建虚拟DOM：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const VDOM = React.createElement(&#x27;h1&#x27;, &#123; id: &quot;title&quot; &#125;, React.createElement(&#x27;span&#x27;, &#123; id: &quot;span&quot; &#125;, &quot;hello_react&quot;))</span><br></pre></td></tr></table></figure></li><li><p>使用jsx创建虚拟DOM：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const VDOM =( &lt;h id=&#x27;title&#x27;&gt;</span><br><span class="line">                 &lt;span id=&#x27;span&#x27;&gt;hello_react&lt;/span&gt;</span><br><span class="line">             &lt;/h&gt;)</span><br></pre></td></tr></table></figure></li><li><p>一般使用第二种方法创建虚拟DOM。</p></li></ol><h2 id="关于虚拟DOM与JSX"><a href="#关于虚拟DOM与JSX" class="headerlink" title="关于虚拟DOM与JSX"></a>关于虚拟DOM与JSX</h2><p>虚拟DOM</p><ol><li>本质是Object类型的对象。</li><li>虚拟DOM比较”轻“，真实DOM比较”重“，因为虚拟DOM是React内部在用，不需要真实DOM上的那么多属性。</li><li>虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</li></ol><p>JSX的语法规则</p><ol><li>定义虚拟DOM时，不要写引号。</li><li>标签中混入JS表达式要用{}。</li><li>样式的类名指定不要用class，要用className。</li><li>内联样式，要用style={ {key:value,key:value} }的形式去写。</li><li>只有一个根标签。</li><li>标签必须闭合。</li><li>标签首字母<ol><li>若小写字母开头，则将该标签转为html中的同名标签，若html中无该标签对应的同名元素，则报错。</li><li>若为大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</li></ol></li></ol><h2 id="区分js语句（代码）与js表达式"><a href="#区分js语句（代码）与js表达式" class="headerlink" title="区分js语句（代码）与js表达式"></a>区分js语句（代码）与js表达式</h2><ol><li><p>表达式：一个表达式会产生一个值，可以放在任何一个需要值得地方。例如</p><ol><li>a</li><li>a+b</li><li>demo(1)</li><li>arr.map(item=&gt;{})</li></ol></li><li><p>语句（代码），例如：</p><ol><li>if(){}</li><li>for(){}</li><li>switch(){case:}</li></ol></li></ol><h2 id="模块、组件、模块化、组件化得理解"><a href="#模块、组件、模块化、组件化得理解" class="headerlink" title="模块、组件、模块化、组件化得理解"></a>模块、组件、模块化、组件化得理解</h2><ol><li>模块<ol><li>理解：向外提供特定功能的js程序。</li><li>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</li><li>作用：复用js，简化js的编写，提高js运行效率。</li></ol></li><li>组件<ol><li>理解：用来实现局部功能效果的代码和资源的集合（html/css/image等等）。</li><li>为什么使用组件：一个界面的功能很复杂。</li><li>作用：复用代码，简化项目编码，提高运行效率。</li></ol></li><li>模块化：当应用的js都以模块来编写，这个应用就是一个模块化应用。</li><li>组件化：当应用是以多组件的方式实现，这个应用就是一个组件化的应用。</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="函数式组件-简单组件"><a href="#函数式组件-简单组件" class="headerlink" title="函数式组件(简单组件)"></a>函数式组件(简单组件)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">        //1.创建函数式组件</span><br><span class="line">        function Demo() &#123;</span><br><span class="line">            console.log(this)//此处的this是undefined，因为babel编译后开启了严格模式</span><br><span class="line">            return &lt;h2&gt;我是函数定义的组件&lt;/h2&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        //2.渲染组件到页面</span><br><span class="line">        ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&quot;test&quot;));</span><br><span class="line">       </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>执行了 ReactDOM.render(\<Demo>, document.getElementById(“test”)),发生了什么</Demo></p><ol><li>React解析组件标签，找到Demo组件。</li><li>发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实的DOM，随后呈现在页面中。</li></ol><h4 id="类式组件-复杂组件"><a href="#类式组件-复杂组件" class="headerlink" title="类式组件(复杂组件)"></a>类式组件(复杂组件)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">        //1.创建类式组件</span><br><span class="line">        class MyComponent extends React.Component &#123;</span><br><span class="line">            render() &#123;</span><br><span class="line">                //render放在MyCompontent的原型对象上，供实例使用。</span><br><span class="line">                //render中的this是MyCompontent的实例对象，也叫组件实例对象。</span><br><span class="line">                console.log(this);</span><br><span class="line">                return &lt;h2&gt;我是一个类的组件&lt;/h2&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //2.渲染组件到页面</span><br><span class="line">        ReactDOM.render(&lt;MyComponent /&gt;, document.getElementById(&quot;test&quot;));</span><br><span class="line">       </span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>执行了 ReactDOM.render(\<MyComponent>, document.getElementById(“test”)),发生了什么</MyComponent></p><ol><li>React解析组件标签，找到MyComponent组件。</li><li>发现组件是使用类定义的，随后new一个该类的实例并执行实例的原型上的render()方法，将返回的虚拟DOM转为真实的DOM，随后呈现在页面中。</li></ol><h2 id="组件三大核心属性"><a href="#组件三大核心属性" class="headerlink" title="组件三大核心属性"></a>组件三大核心属性</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ol><li>理解：<ol><li>state是组件对象最重要的属性值，值是对象（可以包含多个key-value的组合）。</li><li>组件被称为”状态机“，通过更新组件的state来更新对应的页面显示（重新渲染组件）。</li></ol></li><li><p>注意点：</p><ol><li>组件中render方法中的this为组件的实例对象。</li><li>组件自定义的方法中this为undefined，解决方法：<ol><li>强制绑定this：通过函数对象的bind()。</li><li>箭头函数。</li></ol></li><li>状态数据，不能直接修改或更新，要使用getState({});方法更新。</li></ol></li><li><p>实例：使用组件渲染一个页面，使页面有一行文本，并设置点击事件来改变文本。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">       //创建类式组件</span><br><span class="line">       class Weather extends React.Component &#123;</span><br><span class="line">           //构造器调用次数：1次</span><br><span class="line">           constructor(props) &#123;</span><br><span class="line">               super(props);</span><br><span class="line">               //初始化状态</span><br><span class="line">               this.state = &#123; isHot: true &#125;;</span><br><span class="line">               //解决changeWeather中this的指向问题</span><br><span class="line">               this.changeWeather = this.changeWeather.bind(this);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           //render方法调用次数：1+n次，n为点击的次数</span><br><span class="line">           render() &#123;</span><br><span class="line">               const isHot = this.state;</span><br><span class="line">               return &lt;h2 onClick=&#123;this.changeWeather&#125;&gt;今天的天气很&#123;isHot.isHot ? &#x27;炎热&#x27; : &quot;凉爽&quot;&#125;&lt;/h2&gt;;</span><br><span class="line">           &#125;</span><br><span class="line">           // changeWeather方法调用次数：点几次就调用几次</span><br><span class="line">           changeWeather() &#123;</span><br><span class="line">               //注意：状态（state）不可以直接更改，下面是错误的示范</span><br><span class="line">               // this.state.isHot = !this.state.isHot;</span><br><span class="line">               // console.log(this.state.isHot)</span><br><span class="line">               //状态（state）必须使用setState()来更改,且更新是一种合并，并不是替换。</span><br><span class="line">               this.setState(&#123; isHot: !this.state.isHot &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       //将组件渲染到页面</span><br><span class="line">       ReactDOM.render(&lt;Weather /&gt;, document.getElementById(&quot;test&quot;));</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;React学习&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>流密码--lfsr</title>
    <link href="http://example.com/2022/03/19/%E6%B5%81%E5%AF%86%E7%A0%81-lfsr/"/>
    <id>http://example.com/2022/03/19/%E6%B5%81%E5%AF%86%E7%A0%81-lfsr/</id>
    <published>2022-03-19T08:17:07.000Z</published>
    <updated>2022-03-19T10:09:02.310Z</updated>
    
    <content type="html"><![CDATA[<p>线性反馈移位寄存器（LFSR）在ctf中的两种题型</p><span id="more"></span><h2 id="反馈移位寄存器"><a href="#反馈移位寄存器" class="headerlink" title="反馈移位寄存器"></a>反馈移位寄存器</h2><p>​    在移位寄存器向右移位一位以后，左边就会空出一位，这时如果采用一个<strong>反馈函数</strong>，以寄存器中已有的某些序列作为反馈函数的输入，在函数中经过一定的运算后，将反馈函数输出的结果填充到移位寄存器的最左端，那么这样的移位寄存器就会有源源不断的输出。这样的，<strong>拥有反馈函数的移位寄存器称为反馈移位寄存器</strong>（Feedback Shift Register，FSR）</p><img src="/2022/03/19/%E6%B5%81%E5%AF%86%E7%A0%81-lfsr/1.jpg" class><h2 id="线性反馈移位寄存器"><a href="#线性反馈移位寄存器" class="headerlink" title="线性反馈移位寄存器"></a>线性反馈移位寄存器</h2><p>​    如果反馈移位寄存器的<strong>反馈函数是线性函数</strong>（即只进行简单线性运算的函数），那么这种寄存器就被称为<strong>线性反馈移位寄存器（Linear Feedback Shift Register，LFSR）</strong>。</p><p>​    线性反馈移位寄存器的反馈函数一般如下</p><script type="math/tex; mode=display">a_{i+n}=\sum_{j=1}^{n}{c_j*a_{i+n-j}}</script><p>其中，<script type="math/tex">c_j</script>、<script type="math/tex">a_i</script>均在某个有限域 Fq 中。</p><h2 id="对于一个n位lfsr，已知n位输出流和掩码能够还原初始状态"><a href="#对于一个n位lfsr，已知n位输出流和掩码能够还原初始状态" class="headerlink" title="对于一个n位lfsr，已知n位输出流和掩码能够还原初始状态"></a>对于一个n位lfsr，已知n位输出流和掩码能够还原初始状态</h2><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>因为已知n为输出流和掩码，所以可以倒退得到n位的lfsr。</p><h3 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h3><p>n位的输出流设为：<script type="math/tex">a_1,a_2,...,a_n</script></p><p>掩码设为：<script type="math/tex">b_1,b_2,...,b_n</script></p><p>第一步：将<script type="math/tex">a_1,a_2,...,a_{n-1}</script>与<script type="math/tex">b_2,b_3,...,b_n</script>进行逐个相与运算，将得到的结果中的1的个数相加模2，将得到的值与<script type="math/tex">a_n</script>比较，如果相等，则lfsr的最后一位为0，如果不相等，则lfsr的最后一位为1，记为<script type="math/tex">f_1</script>。</p><p>第二步：将上述得到的最后一位当作输出流的第一位，即将上述中的<script type="math/tex">a_1,a_2,...,a_{n-1}</script>换为<script type="math/tex">f_1,a_1,a_2,...,a_{n-2}</script>将<script type="math/tex">a_n</script>换为<script type="math/tex">a_{n-1}</script>,进行第一步的运算，得到lfsr的倒数第二位，记为<script type="math/tex">f_2</script>。</p><p>第三步：重复第二步，直到得到lfsr的第一位，记为<script type="math/tex">f_n</script>，即求得n位的lfsr。</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>输出流是由其前n位与掩码进行逐位相与运算得到的结果相加模2得到。</p><h3 id="python代码实现："><a href="#python代码实现：" class="headerlink" title="python代码实现："></a>python代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;00100101101010101110101010011001&quot;</span> <span class="comment">#n位输出流</span></span><br><span class="line">b = <span class="string">&quot;10100110001000111000100110010001&quot;</span> <span class="comment">#掩码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    pp = <span class="built_in">int</span>(a[:-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    qq = <span class="built_in">int</span>(b,<span class="number">2</span>)</span><br><span class="line">    index =  <span class="number">0</span>;</span><br><span class="line">    mm = pp&amp;qq</span><br><span class="line">    mm = <span class="built_in">str</span>(<span class="built_in">bin</span>(mm))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> mm:</span><br><span class="line">        <span class="keyword">if</span>(_==<span class="string">&quot;1&quot;</span>):</span><br><span class="line">            index+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(index%<span class="number">2</span>==<span class="built_in">int</span>(a[-<span class="number">1</span>])):</span><br><span class="line">        a = <span class="string">&quot;0&quot;</span>+a[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = <span class="string">&quot;1&quot;</span>+a[:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(a))</span><br></pre></td></tr></table></figure><h2 id="对于一个n位lfsr，-已知2n位输出能够还原初始状态"><a href="#对于一个n位lfsr，-已知2n位输出能够还原初始状态" class="headerlink" title="对于一个n位lfsr， 已知2n位输出能够还原初始状态"></a>对于一个n位lfsr， 已知2n位输出能够还原初始状态</h2><h3 id="解法：-1"><a href="#解法：-1" class="headerlink" title="解法："></a>解法：</h3><p>根据已知的2n位输出，可做出与掩码相关的n元模2的线性方程组，可以求得掩码，在使用上面方法求得n位的lfsr。</p><h3 id="具体步骤：-1"><a href="#具体步骤：-1" class="headerlink" title="具体步骤："></a>具体步骤：</h3><p>设掩码为：<script type="math/tex">c_1,c_2,...,c_n</script></p><p>已知的2n位输出为：<script type="math/tex">a_1,a_2,...,a_{2n}</script></p><p>设如下矩阵：</p><script type="math/tex; mode=display">S_1 = [a_1,a_2,...,a_{n}]\\S_2 =[a_2,a_3,...,a_{n+1}]\\...\\S_n =[a_{n},a_{n+1},...,a_{2n-1}]\\S_{n+1} = [a_{n+1},a_{n+2},...,a_{2n}]\\C = [c_1,c_2,...,c_n]</script><p>所以有关于模2的矩阵方程</p><script type="math/tex; mode=display">S_{n+1} =(C*[S_1.T,S_2.T,...,S_n.T])mod2</script><p>所以</p><script type="math/tex; mode=display">C = S_{n+1}*{[S_1.T,S_2.T,...,S_n.T]}^{-1}</script><p>求得<script type="math/tex">C</script>后即可求n为的lfsr。</p><h3 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h3><p>输出流是由其前n位与掩码进行逐位相与运算得到的结果相加模2得到。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>利用python求<script type="math/tex">[S_1.T,S_2.T,...,S_n.T]</script>和<script type="math/tex">S_{n+1}</script></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#求[S_1.T,S_2.T,...,S_n.T]</span></span><br><span class="line">key = <span class="string">&quot;1011001001010101110111101101100010001001110101110110001011000101&quot;</span><span class="comment">#输出流</span></span><br><span class="line">str1=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)//<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)//<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span>(key[i+j]==<span class="string">&quot;1&quot;</span>):</span><br><span class="line">            str1+=<span class="string">&quot;1 &quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str1+=<span class="string">&quot;0 &quot;</span></span><br><span class="line">    str1+=<span class="string">&quot;;&quot;</span></span><br><span class="line">str1 = str1[:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line">S = np.mat(str1)</span><br><span class="line">S = S.T</span><br><span class="line"></span><br><span class="line"><span class="comment">#求S_n+1</span></span><br><span class="line">str2=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)//<span class="number">2</span>):</span><br><span class="line">    str2+=key[<span class="number">32</span>+i]+<span class="string">&quot; &quot;</span></span><br><span class="line">s = np.mat(str2)</span><br></pre></td></tr></table></figure><p>利用sage求<script type="math/tex">C</script></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S = matrix(GF(2),[[1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0],[0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1],[1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0],[1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0],[0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0],[0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1],[1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0],[0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0],[0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1],[1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1],[0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1],[1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0],[0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1],[1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0],[0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1],[1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1],[1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1],[1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0],[0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1],[1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1],[1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0],[1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0],[1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0],[0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1],[1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0],[1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1],[0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1],[1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0],[1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0],[0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0],[0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1],[0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0]])</span><br><span class="line">s = matrix(GF(2),[1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1])</span><br><span class="line">C = S.solve_left(s)</span><br><span class="line">C</span><br></pre></td></tr></table></figure><p>在利用python求n为lfsr</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;10110010010101011101111011011000&quot;</span> <span class="comment">#n位输出流</span></span><br><span class="line">b = <span class="string">&quot;1 0 1 0 1 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 0 0 1 1 0 0 0 0&quot;</span> <span class="comment">#掩码</span></span><br><span class="line">b = b.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    pp = <span class="built_in">int</span>(a[:-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line">    qq = <span class="built_in">int</span>(b,<span class="number">2</span>)</span><br><span class="line">    index =  <span class="number">0</span>;</span><br><span class="line">    mm = pp&amp;qq</span><br><span class="line">    mm = <span class="built_in">str</span>(<span class="built_in">bin</span>(mm))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> mm:</span><br><span class="line">        <span class="keyword">if</span>(_==<span class="string">&quot;1&quot;</span>):</span><br><span class="line">            index+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(index%<span class="number">2</span>==<span class="built_in">int</span>(a[-<span class="number">1</span>])):</span><br><span class="line">        a = <span class="string">&quot;0&quot;</span>+a[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = <span class="string">&quot;1&quot;</span>+a[:-<span class="number">1</span>]</span><br><span class="line">a = <span class="built_in">int</span>(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(a))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线性反馈移位寄存器（LFSR）在ctf中的两种题型&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="lfsr" scheme="http://example.com/tags/lfsr/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_11</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-11/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-11/</id>
    <published>2022-03-15T11:22:52.000Z</published>
    <updated>2022-03-15T11:23:47.396Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ol><li>setInterval():<ol><li>用于定时调用。</li><li>可以将一个函数每隔一段时间执行一次。</li><li>参数：<ol><li>第一个参数：回调函数，该函数会每隔一段时间调用一次。</li><li>第二个参数：每次调用的间隔时间，单位是毫秒。</li></ol></li><li>返回值：返回一个Number类型的数据，这个数据可以作为定时器的唯一标识。</li></ol></li><li>clearInterval()：<ol><li>可以用来关闭一个定时器。</li><li>该方法需要一个定时器标识作为参数，这样将关闭对应的定时器。</li><li>该方法可以接收任意参数，如果参数是一个有效的定时器标识，则停止对应的定时器，如果参数不是一个有效的标识，则什么也不做。</li></ol></li><li>setTimeout()：<ol><li>用于延时调用。</li><li>延时调用的函数不会马上执行，而是隔一段时间后在执行，而且只会执行一次。</li><li>延时调用的参数和定时调用相同。</li><li>延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次。</li><li>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己去选择。</li></ol></li><li>clearTimeout()：该函数用于关闭一个延时调用。</li></ol><h3 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h3><ol><li><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一个页面，这样执行的性能是比较差的，而且这种形式当我们修改多个样式时，也不方便。</p></li><li><p>通过一行代码，同时修改多个样式：修该box的class属性。</p></li><li><p>我们可以通过修改元素的class属性来间接的修改样式，这样一来，我们只需要修改一次，即可同时修改多个样式。使用此方法浏览器只需要重新渲染页面一次，性能比较好，而且这种方式，可以使表现和行为进一步分离。</p></li><li><p>判断一个元素中是否含有指定的class属性值，如果有返回true，否则返回false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">obj, cn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\b&quot;</span> + cn + <span class="string">&quot;\\b&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> reg.test(obj.className);</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure></li><li><p>定义一个函数：</p><ol><li>用来向一个元素中添加指定的class属性。</li><li>参数：<ol><li>第一个参数：obj,要添加class属性的元素。</li><li>cn ，要添加的class值。</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj, cn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasClass(obj, cn)) &#123;</span><br><span class="line">                    obj.className += <span class="string">&quot; &quot;</span> + cn+<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个函数：</p><ol><li>用来向删除一个元素中指定的class属性。</li><li>参数：<ol><li>第一个参数：obj,要添加class属性的元素。</li><li>cn ，要添加的class值。</li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj, cn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (hasClass(obj, cn)) &#123;</span><br><span class="line">                    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\b&quot;</span> + cn + <span class="string">&quot;\\b&quot;</span>);</span><br><span class="line">                    obj.className = obj.className.replace(reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure><ol><li>定义一个函数：<ol><li>用来向切换一个元素中指定的class属性，如果元素中有该类，则删除，如果没有，则添加。</li><li>参数：<ol><li>第一个参数：obj,要添加class属性的元素。</li><li>cn ，要添加的class值。</li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">obj, cn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (hasClass(obj, cn)) &#123;</span><br><span class="line">                    removeClass(obj, cn);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    addClass(obj, cn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ol><li>JS中的对象只有JS自己认识，其他的语言都不认识。</li><li>JSON就是一个特殊格式的字符串，这个字符串可以被任意语言所识别，并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互。</li><li>JSON<ol><li>全称：Javascript Object Notation ，JS对象表示法。</li><li>JSON和JS对象的格式一样，只不过JSON字符串中的属性名必须加双引号，其他语法和JS语法一致。</li><li>JSON分类：<ol><li>对象：{}</li><li>数组：[]</li></ol></li><li>JSON中允许的值：<ol><li>字符串</li><li>数组</li><li>布尔值</li><li>null</li><li>对象</li><li>数组</li></ol></li></ol></li><li>将JSON字符串转换为JS中的对象，在JS中，为我们提供了一个工具类，较JSON，这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON。</li><li>json—-&gt;js对象：JSON.parse()<ol><li>可以将JSON字符串转换为JS对象。</li><li>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回。</li></ol></li><li>JS对象—-&gt;JSON：JSON.stringify()：<ol><li>可以将一个JS对象转换为JSON字符串。</li><li>需要一个js对象作为参数，会返回一个JSON字符串。</li></ol></li><li>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中会报错。</li><li>eval()<ol><li>这个函数可以用来执行字符串形式的JS代码，并将执行的结果返回。</li><li>如果使用eval()执行的字符串中含有{}，它会将{}当成是代码块，如果不希望将其解析成代码块，需要在字符串前后加一个（）。</li><li>eval()这个函数的功能很强大，可以直接执行一个字符串</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_10</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-10/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-10/</id>
    <published>2022-03-15T11:19:49.000Z</published>
    <updated>2022-03-15T11:22:38.901Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ol><li>浏览器对象模型。</li><li>BOM可以使我们通过JS来操作浏览器。</li><li>在BOM中为我们提供了一组对象，用来完成对浏览器的操作。</li><li>BOM对象：<ol><li>Window：代表的是整个浏览器的窗口，同时Window也是网页中的全局对象。</li><li>Navigator：代表当前浏览器的信息，通过该对象可以来识别不同的浏览器。</li><li>Location：代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面。</li><li>History：代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录，由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问有效，</li><li>Screen：代表用户的屏幕信息，通过该对象可以获取到用户显示器的相关信息。</li><li>这些BOM对象在浏览器中都是作为Window对象的属性保存的，可以通过window对象来调用，也可以直接使用。</li></ol></li></ol><h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><ol><li>代表当前浏览器信息，通过该对象可以来识别不同的浏览器。</li><li>由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了。</li><li>一般会使用userAgent来判断浏览器信息，但是现在不好判别不出IE11版本。</li><li>userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent。</li><li>使用userAgent不能判断IE11，还可以通过IE浏览器中特有的对象，来判断是否是IE浏览器。比如ActiveXObject，不能使用该方法是否未定义来判断，应该使用”ActiveXObject” in window来判断。返回true，为IE浏览器，否则不是IE浏览器。</li></ol><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><ol><li>该对象可以用来操作浏览器向前或者向后翻页。</li><li>一些属性和方法：<ol><li>length：可以获取到当前访问的链接数量。</li><li>back()：可以用来回退到上一个页面，作用和浏览器的回退按钮一样。</li><li>forward()：可以跳转到下一个页面，作用和浏览器的前进按钮一样。</li><li>go()：可以用来跳转到指定页面，需要一个整数作为参数。<ol><li>参数为 1 ：表示向前跳转一个页面，相当于forword()。</li><li>参数为2：表示向前跳转两个页面。</li><li>参数为-1：表示向后跳转一个页面，相当于back()。</li><li>参数为-2：表示向后跳转两个页面。</li><li>参数为n：表示跳转n个页面，n为正，向前跳转；n为负，向后跳转。</li></ol></li></ol></li></ol><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><ol><li>该对象中封装了浏览器地址栏的信息。</li><li>如果直接打印Location，则可以获取到地址栏的信息（当前页面的完整路径）。</li><li>如果直接将location属性修改为一个完整的路径，或相对路径，则页面会自动跳转到该路径，并且会生成相应的历史记录。</li><li>该对象的方法：<ol><li>assign()：用来跳转到其他页面，作用和直接修改location一样，地址作为参数传入，会生成相应的历史记录。</li><li>reload()：<ol><li>用于重新加载当前页面，作用和刷新按钮一样。</li><li>如果在方法中传递一个true作为参数，则会强制清空缓存刷新页面。</li></ol></li><li>replace()：可以使用一个新的页面替换当前页面，调用完毕也会跳转页面，地址作为参数传入，但是不会生成历史记录，不能使用回退按钮。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_9</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-9/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-9/</id>
    <published>2022-03-15T11:19:40.000Z</published>
    <updated>2022-03-15T11:21:35.369Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><ol><li>onmousemove：该事件将会在鼠标在元素中移动时被触发。</li><li>事件对象：当事件的响应函数被触发时，浏览器每次都会将一个事件作为实参传递进响应函数，在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标、键盘哪个键被按下、鼠标滚轮滚动的方向。</li><li>事件.clientX：可以获取鼠标指针相对于可见区域的水平坐标。</li><li>事件.clientY：可以获取鼠标指针相对于可见区域的垂直坐标。</li><li>但是在IE8中，响应函数被触发时，浏览器不会传递事件对象，在IE8及以下的浏览器中，是将事件对象作为window对象属性保存的，但火狐浏览器不是这样，所以需要自己写函数来解决兼容问题。</li><li>事件.pageX：可以获取鼠标指针相对于页面的水平坐标，但是不支持IE8。</li><li>事件.pageY：可以获取鼠标指针相对于页面的垂直坐标，但是不支持IE8。</li><li>chrome认为浏览器的滚动条是body的，可以通过body.scrollTop来获取，但火狐等浏览器认为浏览器的滚动条是html的。</li></ol><h3 id="事件的冒泡（Bubble）"><a href="#事件的冒泡（Bubble）" class="headerlink" title="事件的冒泡（Bubble）"></a>事件的冒泡（Bubble）</h3><ol><li>所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发。</li><li>在开发中大部分情况冒泡都是有用的，如果不希望发生事件冒泡可以通过事件对象来取消冒泡，语法：事件.cancelBubble = true。</li></ol><h3 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h3><ol><li>指将事件统一绑定给元素的共同祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件。</li><li><p>事件委派是利用了冒泡，通过委派可以减少事件的绑定次数，提高程序的性能。</p></li><li><p>事件.target：事件中的target元素表示触发事件的对象，即触发事件的是哪个元素。</p></li></ol><h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><ol><li>使用对象.事件 = 函数 的形式绑定响应函数，它只能同时为一个元素的一个事件绑定一个响应函数，不能绑定多个，如果绑定多个，则后面的会被覆盖掉前面的。</li><li><p>addEventListener():</p><ol><li>通过这个方法可以为元素的同一个事件绑定多个响应函数。</li><li><p>参数：</p><ol><li>第一个参数，事件的字符串，不要on。</li><li>第二个参数，回调函数，当事件被触发时该函数会被调用。</li><li>第三个参数，是否在捕获阶段触发事件，需要一个布尔值，一般都传flase。</li></ol></li><li><p>使用该方法为同一事件绑定多个响应函数时，当事件被触发时，响应函数会按照函数的绑定顺序执行。</p></li><li>该方法IE8不支持。</li></ol></li><li><p>attachEvent():</p><ol><li>在IE8中可以使用该方法来为元素的同一个事件绑定多个响应函数。</li><li><p>参数：</p><ol><li>事件的字符串，要加on。</li><li>回调函数。</li></ol></li><li><p>使用该方法来为元素的同一个事件绑定多个响应函数时，后绑定的先执行，执行顺序和addEventListener()相反。</p></li></ol></li><li><p>为了满足兼容性，需要我们自己定义函数来实现对统一事件绑定多个响应函数。</p></li></ol><h3 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h3><ol><li><p>关于事件的传播网景公司和微软公司有不同的理解。</p><ol><li>微软公司认为事件应该是从内向外传播的，也就是当事件被触发时，应该先触发当前元素上的事件，然后在向当前元素的祖先元素上传播，也就是说事件应该在冒泡阶段执行。</li><li>网景公司认为事件应该是由外向内触传播的，也就是当事件触发时，应该先触发当前元素的最外层的祖先元素的事件，然后在向内传播给后代元素。</li><li>W3C综合了俩个公司的方案，将事件传播分成了三个阶段<ol><li>捕获阶段：在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件。</li><li>目标阶段：事件捕获到目标元素，捕获结束开始在目标元素上触发事件。</li><li>冒泡阶段：事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件。</li></ol></li></ol></li><li><p>如果希望在捕获阶段触发事件，可以将addEventListener()的第三个参数设置为true，一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false。</p></li><li>IE8及以下的浏览器中没有捕获阶段。</li></ol><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ol><li><p>onkeydown</p><ol><li>键盘被按下时触发。</li><li>对于onkeydown来说如果一直按着某个按键不松手，则事件会一直触发。</li><li>当onkeydown连续触发时，第一次和第二次之间会间隔时间稍微长一点，其他的会非常的快，这种设计是为了防止误操作的发生。</li></ol></li><li><p>onkeyup：键盘被松开时触发。</p></li><li>键盘事件一般都会绑定给一些可以获得焦点的对象或者是document。</li><li>可以通过 事件.keyCode 属性来获取按键的编码，通过它可以判断那个按键被按下。</li><li>altKey、ctrlKey、shiftKey：这三个用来判断alt、ctrl和shift是否被按下，如果按下则返回true，否则返回false。</li><li>在文本框中输入内容，属于onkeydown的默认行为，如果在onkeydown中取消了默认行为（return false），则输入的内容不会出现在文本框。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_8</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-8/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-8/</id>
    <published>2022-03-15T11:19:32.000Z</published>
    <updated>2022-03-15T11:20:40.968Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="JS操作内联样式"><a href="#JS操作内联样式" class="headerlink" title="JS操作内联样式"></a>JS操作内联样式</h2><ol><li>通过JS修改元素的样式：语法：元素.style.样式名 = 样式值。</li><li>读取元素样式：语法：元素.style.属性名。</li><li>注意：<ol><li>如果CSS的样式名中含有-，这种名称在JS中是不合法的，比如：background-color，需要将这种样式名修改为驼峰命名法，去掉-，然后将-后面的字母大写。</li><li>通过style属性设置的样式都是内联样式，而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示，但是如果在样式中写了！important，此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改的样式失效，所以尽量不要为样式添加！important。</li><li>通过style属性设置和读取的样式都是内联样式，无法读取样式表中的样式。</li></ol></li></ol><h3 id="JS操作当前显示的样式"><a href="#JS操作当前显示的样式" class="headerlink" title="JS操作当前显示的样式"></a>JS操作当前显示的样式</h3><ol><li>语法一：元素.currentStyle.样式名。<ol><li>它可以用来读取当前元素正在显示的样式，如果当前元素没有设置该样式，则获取它的默认值。</li><li>该语法只有IE浏览器支持，其他浏览器都不支持。</li></ol></li><li>语法二：getComputerStyle()。<ol><li>可以用来读取当前正在显示的样式，这个方法是Window方法，可以直接使用。</li><li>需要两个参数：<ol><li>第一个参数：要获取样式的元素。</li><li>第二个参数：可以传递一个伪元素，一般都传null。</li></ol></li><li>该方法会返回一个对象，对象中封装了当前元素对应的样式，可以通过对象.样式名来读取样式。</li><li>如果获取的样式没有设置，则会获取到真实值，而不是默认值，比如：没有设置width时，不会返回到auto，而是一个具体的长度。</li><li>该方法不支持IE8。</li></ol></li><li>如果想要兼容所有浏览器，可自定义一个获取元素样式函数。</li><li>以上两个语法都是只读语法，只能够获取当前样式，但不能修改，修改还需要通过style对象。</li></ol><h2 id="其他样式相关属性"><a href="#其他样式相关属性" class="headerlink" title="其他样式相关属性"></a>其他样式相关属性</h2><ol><li>clientWidth,clientHeight<ol><li>这两个属性可以获取元素的可见宽度和高度，包括内容区和内边距。</li><li>这些属性都是不带单位的，返回的是一个数字，可以直接进行运算。</li><li>这些属性都是只读的，不能修改。</li></ol></li><li>offsetWidth，offsetHeight：这两个属性可以获取元素的可见宽度和高度，包括内容区和内边距和边框。</li><li>offsetParent<ol><li>可以用来获取当前元素的定位父元素。</li><li>会获取到离当前元素最近的开启了定位的祖先元素，如果所有祖先元素都没有开启定位，则返回body。</li></ol></li><li>offsetLeft：返回元素相对于其父元素的水平偏移量。</li><li>offsetTop：返回元素相对于其父元素的垂直偏移量。</li><li>scrollWidth，scrollHeight：可以获取元素的滚动区域的高度和宽度。</li><li>scrollLeft：获取水平滚动条滚动的距离。</li><li>scrollTop：获取垂直滚动条滚动的距离。</li><li>当满足等式：scrollHeight-scrollTop==clientHeight时，说明垂直滚动条到底了。</li><li>当满足等式：scrollWidth-scrollLeft==clientWidth时，说明水平滚动条到底了。</li><li>事件onscoll()：该事件会在元素的滚动条滚动的时候触发。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_7</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-7/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-7/</id>
    <published>2022-03-15T11:13:17.000Z</published>
    <updated>2022-03-15T11:19:09.483Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ol><li>DOM全称：Document Object Model 文档对象模型。</li><li>JS中通过DOM来对HTML文档进行操作，理解了DOM就可以随心所欲的操作web页面。</li><li>节点：Node，构成html文档最基本的单元。<ol><li>文档节点：整个HTML文件。</li><li>元素节点：HTML文档中的标签。</li><li>属性节点：元素的属性。</li><li>文本节点：HTML标签中的文本内容。</li></ol></li><li>浏览器已经为我们提供了文档节点对象（document），这个对象是window的属性，可以在页面中直接使用，文档节点代表的是整个网页。</li><li>通过document对象获取网页中的button对象：var btn = document.getElementById(“btn”)；</li><li>元素.innerHTML ：获取元素的HTNML代码。</li><li>元素.innerText：获取元素内部的文本内容，和innerHTML类似，不同的是会去除html。</li><li>获取文本对象的文本值：文本对象.nodeValue。</li></ol><h2 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h2><ol><li>浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取一行就运行一行，如果将script标签写到页面的上边，在代码执行时，页面还没有加载，DOM对象也没有加载，会导致无法获得DOM对象。</li><li>onload事件会在整个页面加载完成后才触发，所以可以为window对象绑定一个onload事件。<ol><li>该事件对应的响应函数会在页面加载完成后执行。</li><li>这样就可以确保我们的代码执行时所有的DOM对象已经加载完毕了。</li></ol></li></ol><h3 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h3><ol><li><p>document.getElementById():通过Id属性获取一个元素节点对象。</p></li><li><p>document.getElementsByTagName():</p><ol><li>可以根据标签名来获取一组元素节点对象。</li><li>这个方法会返回一个类数组对象，所有查询到的元素都会封装到对象中。</li><li>即使查询到的元素只有一个，也会返回一个类数组对象。</li></ol></li><li><p>document.getElementsByName():</p><ol><li>通过name属性获取一组元素节点对象。</li><li>这个方法会返回一个类数组对象，所有查询到的元素都会封装到对象中。</li><li>即使查询到的元素只有一个，也会返回一个类数组对象。</li></ol></li><li><p>元素.getElementsByTagName()：</p><ol><li>可以根据标签名来获取一组该元素下的元素节点对象。</li><li>这个方法会返回一个类数组对象，所有查询到的元素都会封装到对象中。</li><li>即使查询到的元素只有一个，也会返回一个类数组对象。</li></ol></li><li><p>元素.childNodes ：</p><ol><li>返回当前节点的所有子节点（包括文本节点）。</li><li>根据DOM标签，标签间空白也会被当成文本节点。</li><li>注：在IE8及以下的浏览器中，不会将空白文本当作文本子节点。</li></ol></li><li><p>元素.children：返回当前节点的所有子元素（不包括文本节点）。</p></li><li><p>元素.firstChild：返回当前节点的第一个子节点。</p></li><li><p>元素.firstElementChild：返回当前节点的第一个子元素，不兼容IE8。</p></li><li><p>元素.lastChild：返回当前节点的最后一个子节点。</p></li><li><p>元素.lastElementChild：返回当前节点的最后一个子元素，不兼容IE8。</p></li><li><p>元素.parentNode：返回当前节点的父节点。</p></li><li><p>元素.previousSibling：表示当前节点的前一个兄弟节点（包括文本节点）。</p></li><li><p>元素.previousElementSibling：表示当前元素的前一个兄弟元素，不兼容IE8。</p></li><li><p>元素.nextSibling：表示当前节点的后一个兄弟节点（包括文本节点）。</p></li><li><p>元素.nextElementSibling：表示当前元素的后一个兄弟元素，不兼容IE8。</p></li><li><p>document.body：在document中有一个属性body，保存的是body的引用。</p></li><li><p>document.documentElement：保存的是html属性。</p></li><li><p>document.all：代表html中所有的元素。</p></li><li><p>document.getElementsByClassName():通过class属性获取一组元素节点对象，但是不兼容IE8。</p></li><li><p>document.querySelector()：</p><ol><li>需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象。</li><li>虽然IE8中没有getElementByClassName(),但是可以用该方法来替代。</li><li>使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个满足条件的元素。</li></ol></li><li><p>document.querySelectorAll()：</p><ol><li>该方法和querySelector()类似，不同的是该方法会将满足条件的所有元素返回，返回一个类数组。</li><li>即使满足条件的元素只有一个，也会返回一个数组。</li></ol></li></ol><h2 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h2><ol><li>document.createElement()：<ol><li>可以用于创建一个元素节点对象。</li><li>需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回。</li></ol></li><li>document.createTextNode()：<ol><li>可以用来创建一个文本节点对象。</li><li>需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回。</li></ol></li><li>appendChild()：<ol><li>向一个父节点中添加一个子节点。</li><li>语法：元素.appendChild(子节点)。</li></ol></li><li>insertBefore()：<ol><li>可以在指定的子节点前插入新的子节点。</li><li>语法：父节点.insertBefore(新节点，旧节点)。</li></ol></li><li>replaceChild()：<ol><li>可以使用指定的子节点替换已有的子节点。</li><li>语法：父节点.replaceChild(新节点，旧节点)。</li></ol></li><li>removeChild()：<ol><li>可以删除子节点。</li><li>语法：父节点.removeChild(子节点)。</li><li>语法二：子节点.parentNode.removeChild(子节点)。</li></ol></li><li>使用innerHTML属性也可以实现DOM的增改查的相关操作。<ol><li>优点：使用简单，代码量少。</li><li>缺点：动静太大，会将原先代码全部删了后在重新创建。</li></ol></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>当我们点击超链接后，超链接会跳转页面，这个是超链接的默认行为，当我们不希望出现默认行为，可以通过在响应函数的最后return false来取消默认行为。</li><li>Window.confirm()：<ol><li>用于弹出一个具有确定和取消按钮的提示框。</li><li>需要一个字符串作为参数，该字符串将会作为提示文字显示出来。</li><li>如果用户点击确认则会返回true，如果点击取消则会返回false。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_6</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-6/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-6/</id>
    <published>2022-03-15T11:13:08.000Z</published>
    <updated>2022-03-15T11:18:36.367Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ol><li>正则表达式用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则，或者将字符串中符合规则的内容提取出来。</li><li>创建正则表达式的对象:<ol><li>语法：var 变量 = new RegExp(“正则表达式”,”匹配模式”);。</li><li>var reg = new RegExp(“a”);该正则表达式用来检查一个字符串中是否含有a。</li><li>在构造函数中可以传递一个匹配模式作为第二个参数，”i”:表示忽略大小写，”g”表示全局匹配模式。</li></ol></li><li>正则表达式的方法：test()：使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，如果符合，则返回true，如果不符合，则返回false。</li><li>使用字面量来创建正则表达式：语法：var 变量 = //;     var 变量 = new RegExp(“a”,”i”);相当于 var 变量 = /a/i;</li><li>正则表达式的一些规则：<ol><li>使用|表示或者的意思。</li><li>[]里面的内容也是或的关系。</li><li>[a-z]\:任意小写字母。</li><li>[A-Z]\:任意大写字母。</li><li>[A-z]\:任意字母。</li><li><sup><a href="#fn_ " id="reffn_ "> </a></sup>\:表示除了，例：[\^ac]:找除了ac以外是否含有其他字符，含有返回true，不含有返回false。</li><li>[0-9]\:表示任意数字。</li></ol></li></ol><h2 id="字符串和正则相关的方法"><a href="#字符串和正则相关的方法" class="headerlink" title="字符串和正则相关的方法"></a>字符串和正则相关的方法</h2><ol><li>split()：<ol><li>可以将一个字符串拆分为一个数组。</li><li>方法中可以传递一个正则表达式作为参数，这样方法会根据正则表达式去拆分字符串。</li><li>会拆分所有符合条件的内容，即使不设置全局匹配。</li></ol></li><li>search()：<ol><li>可以搜索字符串中是否有指定的内容，如果搜索到指定的内容，则会返回第一次出现的索引，如果没有搜索到指定的内容，返回-1。</li><li>可以接受一个正则表达式作为参数，然后根据正则表达式去检索字符串。</li><li>只会查找第一个符合条件的内容，即使设置全局匹配也没有用。</li></ol></li><li>match()：<ol><li>可以更具正则表达式，从一个字符串中将符合条件的内容提取出来，并返回。</li><li>默认情况下match只会找到第一个符合要求的内容，找到后就停止检索。<ol><li>可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容。</li><li>可以为正则表达式设置多个匹配模式，gi。</li></ol></li><li>match()：会将匹配的内容封装到一个数组中返回，即使只查询到一个结果。</li></ol></li><li>replace()：<ol><li>可以将字符串中的指定内容替换为新的内容。</li><li>参数：<ol><li>第一个参数：被替换的内容。</li><li>第二个参数：新的内容。</li></ol></li><li>默认只会替换第一个，如果想要全局替换，可以接受一个正则表达式作为第一个参数，并将匹配模式设置为全局匹配模式g。</li></ol></li></ol><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><ol><li>量词：<ol><li>通过量词可以设置一个内容出现的次数。</li><li>量词只对它前面的内容起作用。</li><li>{n} 表示正好出现n次。</li><li>{m,n}表示出现m到n次都可。</li><li>{m，}表示m次以上。</li><li>+：表示至少出现一次，相当于{1, }。</li><li>*：表示0个会多个，相当于{0, }。</li><li>？：表示0个或一个，相当于{0,1}</li></ol></li><li>^：表示开头。</li><li>$：表示结尾。</li><li>如果在正则表达式中同时使用^和$，则要求字符串必须完全符合正则表达式。</li><li>元字符<ol><li>.：表示任意一位字符。</li><li>\w：表示任意字母、数字、_ ,相当于[A-z0-9_]。</li><li>\W：表示除了字母、数字、_，相当于[\^A-z0-9_]。</li><li>\d：任意数字，相当于[0-9]。</li><li>\D：除了数字，相当于[\^0-9]。</li><li>\s：空格。</li><li>\S：除了空格。</li><li>\b：表示单词边界。</li><li>\B：表示除了单词边界。</li></ol></li><li>表示11位电话号码的正则表达式：/^1[3-9][0-9]{9}$/。</li><li>去掉字符串中的空格<ol><li>去掉所有空格：str.replace(/\s/g,””)。</li><li>去掉开头的空格：str.replace(/^\s*/,””)。</li><li>去掉结尾的空格：str.replace(/\s*$/,””)。</li><li>去掉开头和结尾的空格：str.replace(/^\s<em>|\s\</em>$/g,””)。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_5</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-5/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-5/</id>
    <published>2022-03-15T11:13:00.000Z</published>
    <updated>2022-03-15T11:18:04.928Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><ol><li>在JS中使用Date对象表示一个时间。</li><li>创建一个Date对象，如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间。</li><li>创建一个指定的时间对象：需要在构造函数中传递一个表示时间的字符串作为参数，日期的格式：月/日/年 时/分/秒。</li><li>Date对象的常用方法。<ol><li>getDate():获取当前日期对象的几日。</li><li>getDay()：获取当前日期的对象是周几（返回0-6，周日返回0）。</li><li>getMonth()：获取当前日期的对象的月份。（返回0-11，0表示一月）。</li><li>getFullYear()：获取当前日期的对象的年份。</li><li>getHours()、getMinutes()、getSeconds()、getMilliseconds():返回小时，分钟、秒、毫秒。</li><li>getTime()<ol><li>获取当前日期对象的时间戳。</li><li>时间戳：指的是从格林威治标准时间的1970年1月1日，0时0秒0分开始到当前日期所花费的毫秒数。<ol><li>计算机底层在保存时间时使用的都是时间戳。</li><li>获取当前的时间戳：time = Date.now();。</li><li>可以使用使用时间戳来测试代码执行的时间。</li></ol></li></ol></li></ol></li></ol><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><ol><li>Math和其他的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里面封装了数学运算的属性和方法。</li><li>Math对象的常用属性和方法<ol><li>PI：返回圆周率。</li><li>E：返回自然对数的底数e。</li><li>abs()：返回数的绝对值。</li><li>ceil()：可以对一个数进行向上取整，小数位只要有值就自动进1。</li><li>floor()：对一个数进行向下取整，小数位直接舍去。</li><li>round()：对一个数进行四舍五入取整。</li><li>random()<ol><li>用来生成0-1之间的随机数。</li><li>如果想要生成x-y之间的随机整数：Math.round(Math.random()*(y-x)+x)；</li></ol></li><li>max()：可以获取多个数中的最大值。</li><li>min()：可以获取多个数中的最小值。</li><li>pow(x,y)：返回x的y次方。</li><li>sqrt(x):返回x的开方。</li></ol></li></ol><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ol><li>在JS中提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象。<ol><li>String():可以将基本数据类型的字符串转换为String对象。</li><li>Number()：可以将基本数据类型的数字转换为Number对象。</li><li>Boolean()：可以将基本数据类型的布尔值转换为Boolean对象。</li></ol></li><li>但是我们在实际开发中不会使用基本数据类型的对象，如果使用基本数据类型的对象在做一些比较的时候可能会带来一些不可预见的结果。</li><li>方法和属性值能添加给对象，不能添加给基本数据类型。</li><li>当我们对一些基本数据类型的值去调用属性和方法时，浏览器会临时使用包装类将其转换为对象，然后在调用对象的属性和方法，调用完之后，在将其转换为基本数据类型。</li></ol><h2 id="String包装类的方法"><a href="#String包装类的方法" class="headerlink" title="String包装类的方法"></a>String包装类的方法</h2><ol><li>字符串在计算机底层是以字符数组的形式保存。</li><li>length：返回字符串的长度。</li><li>charAt()：返回字符串中指定位置的字符。</li><li>charCodeAt()：返回字符中指定位置的字符的Unicode编码。</li><li>String.fromCharCode()：返回一个Unicode编码指定的字符，属于对象的方法。</li><li>concat()：可以用来连接两个或多个字符串，和加号作用效果一样。</li><li>indexof():<ol><li>可以检索一个字符串中是否含有指定内容。</li><li>如果字符串中含有该内容，则会返回其第一次出现的索引，如果没有找到指定内容，则会返回-1。</li><li>可以指定第二个参数，指定开始查找的位置。</li></ol></li><li>lastIndexof():该方法的用法和indexof()一样，不同的是indexof()是从前往后找，lastIndexof()是从后往前找。</li><li>slice()：<ol><li>可以从字符串中截取指定的内容。</li><li>第一个参数：开始位置的索引（包括开始位置）。</li><li>第二个参数：结束位置的索引（不包括结束位置），该参数可以省略，表示截取从开始到结束的字符串。</li><li>也可以传递一个负数作为参数，负数的话将会从后边计算。</li></ol></li><li>substring():<ol><li>可以截取一个字符串，和slice()类似。</li><li>第一个参数：开始位置的索引（包括开始位置）。</li><li>第二个参数：结束位置的索引（不包括结束位置）。</li><li>和slice()不同的是这个方法不能接受负值作为参数，如果传递一个负值，则默认使用0。</li><li>而且还会自动调整参数的位置，如果第二个参数小于第一个，则自动交换。</li></ol></li><li>split():<ol><li>可以将一个字符串拆分为一个数组。</li><li>参数：需要一个字符串作为参数，将会根据该字符串去拆分字符串为数组。</li><li>如果传递一个空串作为参数，则会将每一个字符都拆分为数组中的一个元素。</li></ol></li><li>toUpperCase()：将一个字符串转换为大写并返回。</li><li>toLowerCase()：将一个字符串转换为小写并返回。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_4</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-4/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-4/</id>
    <published>2022-03-15T11:12:52.000Z</published>
    <updated>2022-03-15T11:17:21.062Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>数组是一个内建对象。</p></li><li><p>创建数组，语法：var arr = new Array();</p></li><li>像数组中添加元素，语法：数组[索引]=值。</li><li>读取数组中的元素，语法：数组[索引]，如果读取不存在的索引，它不会报错而是返回undefined。</li><li>获取数组的长度，可以使用length获取数组的长度（元素的个数），语法：数组.length;。<ol><li>对于连续数组，使用length可以获取到数组的长度（元素的个数）。</li><li>对于非连续数组，使用length会获取到数组的最大的索引+1，（尽量不要创建非连续数组）。</li><li>修改length<ol><li>如果修改的length大于原长度，则多出的部分会空出来。</li><li>如果修改的length小于原长度，则多出的元素会被删除。</li></ol></li><li>向数组的最后一个位置添加元素，语法：数组[数组.length]=值。</li></ol></li><li>使用字面量来创建数组，语法：var arr = []；</li><li>使用字面量创建数组时，可以在创建时就指定数组中的元素。</li><li>使用构造函数创建数组时，也可以添加元素，将要添加的元素作为参数传入构造函数中，元素之间用逗号隔开。</li><li>7、8区别：var arr = [10]； 创建一个数组，含有一个值10。var arr2 = new Array(10)；创建一个长度为10的数组。</li><li>数组中的元素可以是任意数据类型，可以是对象，也可以是函数。</li><li>数组的常用方法<ol><li>push():该方法可以向数组的末尾添加一个或多个元素，并返回数组的新长度，可以将要添加的元素作为方法的参数传入，这样这些元素将会自动添加到数组的末尾。</li><li>pop():该方法可以删除数组中的最后一个元素，并返回删除的那个元素。</li><li>unshift():向数组的开头添加一个或多个元素，并返回数组的新长度，可以将要添加的元素作为方法的参数传入，这样这些元素将会自动添加到数组的开头。</li><li>shift():该方法可以删除数组中的第一个元素，并返回删除的那个元素。</li><li>slice()<ol><li>可以用来从数组中提取指定元素。</li><li>语法:arr.slice(0,2);截取arr数组中的从0到2（不包含2）的元素，并返回。</li><li>该方法不会改变原数组，而是将截取到的元素封装到一个新数组中，并返回。</li><li>参数<ol><li>第一个参数，截取开始的位置的索引。</li><li>第二个参数，截取结束位置的索引。</li><li>第二个参数可以省略不写，此时会截取从开始索引往后的所有元素。</li><li>索引可以是一个负值，-1代表最后一个元素。</li></ol></li></ol></li><li>splice()<ol><li>可以用于删除数组中的指定元素，并向数组中添加新元素。</li><li>语法：arr.splice(0,2,”hello”);删除arr数组中的从0开始的2个元素，并返回,并在0的位置上加入一个新元素”hello”。</li><li>参数<ol><li>第一个参数：起始元素的索引。</li><li>第二个参数：删除元素的个数。</li><li>第三个及以后的参数：可以传递一些新元素，这些元素将会自动插入到开始位置的索引。</li></ol></li><li>使用splice()会影响到原数组，会将指定元素从原数组中删除，变更将被删除的元素作为返回值返回。</li></ol></li><li>concat()<ol><li>可以连接两个或多个数组，并将新的数组返回。</li><li>语法arr.concat(arr2,arr3,…);</li><li>该方法不会影响到原数组。</li></ol></li><li>join()<ol><li>该方法会将一个数组转换成一个字符串，并返回。</li><li>语法：arr.join()；</li><li>该方法不会影响到原数组。</li><li>在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用逗号作为连接符。</li></ol></li><li>reverse()<ol><li>该方法用来返转数组（前面的去后面，后面的去前面）。</li><li>该方法会直接影响到原数组。</li></ol></li><li>sort()<ol><li>可以用来对数组中的元素进行排序。</li><li>该方法会直接影响到原数组。</li><li>默认会按照Unicode编码进行排序，即使对于纯数字的数组，使用sort()排序时，也会按照Unicode编码进行排序，所以对数字进行排序时，可能会得到错误的结果。</li><li>可以自己来指定排序的规则：在sort()函数中添加一个回调函数，来指定排序规则，回调函数中需要定义两个形参，浏览器将分别使用数组中的元素作为实参去调用回调函数，在数组中的位置，第一个形参在第二个形参之前。</li><li>浏览器会根据回调函数的返回值来决定元素的顺序<ol><li>如果返回一个大于0的值，则元素会交换位置。</li><li>如果返回一个小于0的值，则元素位置不变。</li><li>如果返回一个,则认为两个元素相等，也不交换位置。</li></ol></li></ol></li></ol></li></ol><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><ol><li>一般遍历数组都是使用for循环去遍历数组，JS中为我们提供了一个方法foeEach()，用来遍历数组，但该方法只支持IE8以上的浏览器。</li><li>forEach()方法需要一个函数作为参数，语法：arr.forEach(function(value,index,arr){})。</li><li>执行过程：自动执行函数，有几个元素就执行几次，每次执行时，浏览器会将遍历到的元素以实参的形式传递进来，我们可以定义形参，来读取这些内容。</li><li>像这种函数，有我们创建但不由我们调用的，我们称为回调函数。</li><li>浏览器在回调函数中传递三个参数：<ol><li>第一个参数，就是当前正在遍历的元素。</li><li>第二个参数，就是当前正在遍历的元素索引。</li><li>第三个参数，就是正在遍历的数组。</li></ol></li></ol><h2 id="函数的方法"><a href="#函数的方法" class="headerlink" title="函数的方法"></a>函数的方法</h2><ol><li>call()和apply()<ol><li>这两个方法都是函数对象的方法，需要通过调用函数对象来调用。</li><li>当对函数调用call()和apply()时都会调用函数执行。</li><li>在调用call()和apply()时，可以将一个对象指定为第一个参数，此时这个对象将会成为函数执行时的this。</li><li>call()方法可以将实参在对象之后依次传递。</li><li>apply()方法需要将实参封装到一个数组中统一传递。</li></ol></li><li>this的情况<ol><li>以函数方式调用时，this指的是window。</li><li>以方法的方式调用时，this指的是调用方法的对象。</li><li>以构造函数的方式调用时，this指的是新创建的对象。</li><li>以call()，apply()方法调用时，this指的是传进的第一个参数。 </li></ol></li></ol><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><ol><li>在调用函数时，浏览器每次都会传递进两个隐含的参数。<ol><li>第一个函数：函数的上下文对象this。</li><li>封装实参的对象arguments。</li></ol></li><li>arguments是一个类数组对象，它可以通过索引来操作数据，也可以获取长度。</li><li>在调用函数时，我们所传递的实参都会在arguments中。</li><li>arguments.length()可以用来获取实参的长度。</li><li>我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦。<ol><li>arguments[0]:表示第一个实参。</li><li>arguments[1]:表示第二个实参。</li></ol></li><li>arguments里面有一个属性callee，这个属性对应一个对象，就是当前正在指向的函数对象。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_3</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-3/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-3/</id>
    <published>2022-03-15T11:12:43.000Z</published>
    <updated>2022-03-15T11:16:39.317Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><ol><li>console.time(“计时器的名字”)；用来开启一个计时器。需要一个字符串作为参数，这个字符串将会作为计时器的标识。</li><li>console.timeEnd(“计时器的名字”)；终止计时器。</li><li>可以用来测试一段程序执行时间，结果会在控制台输出。</li></ol><h3 id="对象简介"><a href="#对象简介" class="headerlink" title="对象简介"></a>对象简介</h3><ol><li>对象：除5种基本数据类型以外的数据都是对象。</li><li>基本数据类型的值都是单一的，值与值之间没有任何联系，如果使用基本数据类型的数据，创建的变量都是独立的，不能成为一个整体。</li><li>对象属于一种复合数据类型，在对象中可以保存多个不同数据类型的属性。</li><li>对象的分类<ol><li>内建对象：由ES标准中定义的对象，在任何的ES的实现中都可以使用。例如：Math、String、Number、Function、Boolean。</li><li>宿主对象：由JS运行环境提供的对象，目前来讲主要指由浏览器提供的对象。例如：BOM、DOM。</li><li>自定义对象：由开发人员自己定义的对象。</li></ol></li></ol><h2 id="对象的基本操作"><a href="#对象的基本操作" class="headerlink" title="对象的基本操作"></a>对象的基本操作</h2><ol><li>创建对象<ol><li>使用new关键字调用的函数，是构造函数。</li><li>构造函数是专门用来创建对象的函数，例：var obj = new Object()。</li><li>使用typeof检查一个对象时，会返回object。</li></ol></li><li>向对象中添加属性<ol><li>在对象中保存的值称为属性。</li><li>语法1：对象.属性名 = 属性值。</li><li>例：向obj中添加一个name属性：obj.name = “zhangsan”。</li><li>语法2：对象[“属性名”] = 属性值。</li><li>对象中的属性名可以不遵守JS中的命名规则，如果使用特殊的命名方式，需使用语法二。</li><li>对象中的属性值的数据类型可以是任意的数据类型，可以是基本数据类型，也可以是一个对象。</li></ol></li><li>从对象中取出属性<ol><li>语法：对象.属性名</li><li>例：取出obj中的name属性：var result = obj.name。</li><li>如果读取对象中没有属性，不会报错而是会返回undefined。</li></ol></li><li>修改对象中的属性<ol><li>语法：对象.属性名 = 新的属性值</li><li>例：修改obj中name的值为”lisi”：obj.name = lisi。</li></ol></li><li><p>删除对象中的属性</p><ol><li>语法：delete 对象.属性名。</li><li>例：删除obj中的name属性：delete obj.name。</li></ol></li><li><p>in 运算符</p><ol><li>通过该运算可以检查一个对象中是否含有指定的属性，有返回true，没有返回false。</li><li>语法：属性名 in 对象；</li></ol></li></ol><h2 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h2><ol><li>JS中变量都是保存到栈内存中的。<ol><li>基本数据类型的值直接保存到栈内存中，值与值之间是相互独立的，修改一个变量不会影响其他的变量。</li><li>引用数据类型（变量）是保存到堆内存中的，每创建一个对象时，就会在堆内存中开辟一个新的空间，而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响。</li></ol></li><li>当比较两个基本数据类型的值时，就是比较值；而比较两个引用数据类型时，比较的是两个对象的地址。</li></ol><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><ol><li>对象字面量：{}</li><li>使用对象字面量来创建一个对象，var obj  = {}；</li><li>使用对象字面量创建对象时，可以直接指定对象中的属性。例：var obj = {name:”swk”,age=18};对象字面量的属性名可以加引号，也可以不加，一般不加，但如果使用特殊名字命名，需要加引号。</li></ol><h2 id="创建函数对象"><a href="#创建函数对象" class="headerlink" title="创建函数对象"></a>创建函数对象</h2><ol><li>函数也是一个对象。</li><li>函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）。</li><li>可以将要封装的代码以字符串的形式传递给构造函数。</li><li>创建一个函数对象：<ol><li>var fun =  new Function()；</li><li>var fun = new Function(“console.log(“Hello”)”);</li><li>开发中很少使用构造函数创建一个函数对象。</li></ol></li><li>函数封装的代码不会立即执行，函数中的代码会在函数调用的时候执行，调用语法函数对象()。</li><li>使用函数声明来创建一个函数，语法：function 函数名([参数1，参数2]，…){代码}，调用方法相同。</li><li>使用函数表达式创建一个函数，语法：var 函数名 = function([参数1，参数2]，…){代码};。</li></ol><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ol><li>可以在创建函数中的（）中来指定一个或多个形参（形式参数）。</li><li>多个形式参数之间使用逗号隔开，声明形参就相当于在函数内部声明了对应的变量，但并不赋值。</li><li>在调用函数时，可以在（）中指定实参（实际参数），实参将会赋值给函数中对应的形参。</li><li>调用函数时，解析器不会解析函数中实参的类型，所以实参可以是任意数据类型，所以要注意，是否有可能会接收到非法的参数，如果可能有则需要对参数进行数据类型的检查。</li><li>调用函数时，解析器也不会检查实参的数量，多余的实参不会被赋值，如果实参的数量小于形参的数量，则没有对应实参的形参将是undefined。</li></ol><h2 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h2><ol><li>变量声明提前：使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），但是如果声明变量时不适用var关键字，则变量不会被生命提前。</li><li>函数声明提前：使用函数声明形式创建的函数function 函数名(){}，他会在所有代码执行之前被创建，所以我们可以在函数声明前来调用函数，使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用。</li></ol><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ol><li>解析器在调用函数时每一次都会向函数内部传递一个隐含的参数，这个隐含的参数就是this，this指向一个对象，这个对象称之为上下文对象。</li><li>根据函数的调用方式不同，this会指向不同的对象。<ol><li>以函数的形式调用时，this永远都是windows。</li><li>以方法的形式调用时，this就是调用方法的那个对象。</li><li>以构造函数的形式调用时，this指的是新创建的那个对象。</li></ol></li></ol><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol><li>构造函数就是一个普通的函数，创建方式和普通的函数没有区别。不同的是构造函数的首字母一般会大写。</li><li>构造函数与普通函数的调用方式不同，普通函数是直接调用，而构造函数需要使用new关键字来调用。</li><li>构造函数的执行流程<ol><li>立刻创建一个对象。</li><li>将新建的对象设置为函数中的this。</li><li>逐行执行函数中的代码。</li><li>将新建的对象作为返回值返回。</li></ol></li><li>使用同一个构造函数创建的对象，称之为一类对象，也将一个构造函数称之为一个类。将通过一个构造函数创建的对象称之为该类的实例。</li></ol><h2 id="原型对象prototype"><a href="#原型对象prototype" class="headerlink" title="原型对象prototype"></a>原型对象prototype</h2><ol><li>我们所创建的每一个函数，解析器都会像函数中添加一个属性prototype，这个属性对应这一个对象，这个对象就是我们所说的原型对象。</li><li>如果函数作为普通函数调用，prototype没有任何作用。</li><li>当函数以构造函数调用时，他所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过__proto__来访问该属性。</li><li>原型就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将都对象中所有的共有的内容，统一设置到原型对象中。</li><li>当我们访问对象的一个属性或方法时，他会先在对象自身中寻找，如果有则直接使用，如果没有则会取原型对象中寻找，如果找到则直接使用。</li><li>创建构造函数时，可以将这些共有的属性和方法，统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每一个对象都有这些属性和方法了。</li></ol><h2 id="属性检查"><a href="#属性检查" class="headerlink" title="属性检查"></a>属性检查</h2><ol><li>使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，会返回true。</li><li>可以使用对象的hasOwnProperty()方法来检查对象自身中是否含有该属性，使用该方法只有当对象自身中含有属性时，才会返回true。</li></ol><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><ol><li>当一个变量没有任何的对象或者属性对它引用时，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理。</li><li>在JS中拥有自动的垃圾回收机制，会自动的将这些垃圾对象从内容中销毁。</li><li>我们不需要有也不能进行垃圾回收操作，我们需要做的只是将不需要使用的对象设置为null。</li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_2</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-2/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-2/</id>
    <published>2022-03-15T11:12:33.000Z</published>
    <updated>2022-03-15T11:14:40.024Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ol><li>运算符：运算符也叫操作符，通过运算符可以对一个或多个值进行运算。</li><li>当对非Number类型的值进行运算时，会将这些值转换为Number然后在运算（字符串加法除外）。</li><li><p>任何值和NaN做运算都得NaN。</p><ol><li>+<ol><li>对两个数进行加法运算，并将其结果返回。</li><li>如果对两个字符串进行加法运算，则会进行拼串，会将两个字符串拼接为字符串，并返回。</li><li>任何值和字符串做加法运算，都会先将其转化为字符串，然后在和字符串做拼串得操作。</li></ol></li><li>-：对两个值进行减法运算，并将其结果返回。</li><li>*：对两个值进行乘法运算。</li><li>/：对两个数进行除法运算。</li><li>%：对两个数进行取模运算。</li></ol></li><li><p>任何值做- <em> /运算时都会自动转换为Number，可以利用这一特点做隐式的类型转换，可以通过-0，</em>1，/1，将其转换为Number。原理和Number()函数一样。</p></li><li>任何值和字符串相加都会转换为字符串，并做拼串操作，可以利用这一特性，来将一个任意的数据类型转换为String，只需要为任意数据类型+一个 “” 即可将其转换为String，这是一种隐式类型转换，有浏览器完成，原理和执行String()函数一样。</li></ol><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><ol><li>一元运算符：只需要一个操作数。<ol><li>+：正号，不会对数值产生影响，对于非Number值，则将其转换为Number，是一种隐式的类型转换，原理和Number()函数一样。</li><li>-：负号，对数值进行符号的取反。对于非Number值，先转换为Number，在进行取反。</li></ol></li></ol><h2 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h2><ol><li>自增 ++：使变量在自身的基础上增加1。</li><li>自增分为两种a++和++a。<ol><li>相同点：都会使原变量的值自增1。</li><li>不同点：a++的值等于原变量的值（自增前的值），++a的值等于原变量的新值（自增后的值）。</li></ol></li><li>自减—：使变量在自身的基础上减1。</li><li>自减分为两种a—和—a。<ol><li>相同点：都会使原变量的值自减1。</li><li>不同点：a—的值等于原变量的值（自减前的值），—a的值等于原变量的新值（自减后的值）。</li></ol></li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ol><li>JS中提供三种逻辑运算符。<ol><li>！非：对一个值进行非运算，对一个布尔值进行进行取反，对非布尔值进行运算，会将其先转化为布尔类型，在进行取反，可以利用该特点，将一个其他的数据类型转换为布尔值，进行两次非，原理和Boolean()函数一样。</li><li>&amp;&amp; 与：对符号两边的值进行与运算并返回其结果。JS中的&amp;&amp;是短路的与，当第一个值为false时，直接返回false，不会检查第二个。</li><li>|| 或：对符号两边的值进行或运算并返回其结果。JS中的||是短路的或，当第一个值为true时，直接返回true，不会检查第二个。</li><li>对于非布尔值进行与或运算时，会像将其转化为布尔值，然后进行与或运算，并返回原值，<ol><li>与运算：如果两个值都是true，则返回后面的原值。如果两个值含有false，则返回第一个false的原值，即如果第一个值为true，则返回第二个值，如果第一个值为false，则返回第一个值。</li><li>或运算：如果两个值都为false，则返回后面的false的原值，如果两个值含有true，则返回第一个true的原值，即如果第一个值为false，则返回第二个值，如果第一个值为true，则返回第一个值。</li></ol></li></ol></li></ol><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ol><li>=：可以将符号右侧的值赋值给左侧的变量。</li><li>+=：将原值与符号右边的值相加，在赋值给原变量，例：a+=5相当于a=a+5。</li><li>-=：将原值与符号右边的值相减，在赋值给原变量，例：a-=5相当于a=a-5。</li><li>*=、/=、%=：同上。</li></ol><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ol><li>关系运算符：必较两个值的大小关系，如果成立则返回true，如果不成立则返回false。</li><li>>:大于号：判断左侧的值是否大于右侧的值。</li><li>>=、&lt;、&lt;=：同上</li><li>对于非数值进行比较时先将其转换为数值，然后在比较，如果符号两边的值都是字符串时，不会将其转换成数值进行比较，而会比较两个字符串的Unicode编码，即比较它们的字典序。</li></ol><h2 id="Unicode编码输出"><a href="#Unicode编码输出" class="headerlink" title="Unicode编码输出"></a>Unicode编码输出</h2><ol><li>在字符串中使用转义字符输出Unicode编码（16进制），例：\u0011。</li><li>在网页中使用&amp;#0011输出Unicode编码（10进制）</li></ol><h2 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h2><ol><li>相等运算符==：比较两个值是否相等，相等返回true，不相等返回false。</li><li>当使用==比较两个值时，如果类型不同，先将值转换成相同的数据类型，在进行比较。</li><li>NaN不和任何值相等，包括自己，可以通过isNaN()函数判断一个数是否时NaN，是NaN返回true。</li><li>不相等 !=：和相等相反。</li><li>全等===：判断两个值是否全等，和相等运算符类似，但不会做自动的类型转换。</li><li>不全等!==：和全等相反。</li></ol><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><ol><li>条件运算符也叫三元运算符。<ol><li>语法：条件表达式？语句一：语句二；</li><li>执行的流程：首先对条件表达式进行求值，如果值为true，则执行语句一，并返回执行结果，如果为false，则执行语句二，并返回执行结果。</li><li>如果求值结果是一个非布尔值，先将其转换为布尔值，在进行判断。</li></ol></li><li>prompt()函数:可以弹出一个提示框，该提示框中会带有一个文本框，用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，该字符串将会作为提示框的提示文字，用户输入的内容将作为返回值返回，可以定义一个变量来接收输入的内容。</li></ol><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><ol><li>break关键字可以用来退出循环和switch语句。</li><li>不能再if语句里面使用break和continue语句。</li><li>执行break关键字，会立即终止离它最近的那个循环语句。</li><li>continue关键字可以用来跳过当次循环，默认对离他最近的循环起作用。</li><li>可以为循环语句创建一个label，来标识当前的循环，例 label：循环语句。使用break语句时，可以在break后面跟一个label，这样break将会结束指定的循环，而不是最近的。continue同上。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS基础_1</title>
    <link href="http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-1/"/>
    <id>http://example.com/2022/03/15/JS%E5%9F%BA%E7%A1%80-1/</id>
    <published>2022-03-15T11:09:47.000Z</published>
    <updated>2022-03-15T11:11:50.463Z</updated>
    
    <content type="html"><![CDATA[<p>JS基础</p><span id="more"></span><h2 id="输出的三行代码"><a href="#输出的三行代码" class="headerlink" title="输出的三行代码"></a>输出的三行代码</h2><ol><li>alert(“helloworld”) 提示框中输出。</li><li>document.write(“helloworld”) html页面中输出。</li><li>console.log(“helloword”) 控制台中输出。</li></ol><h2 id="JS代码的编写位置"><a href="#JS代码的编写位置" class="headerlink" title="JS代码的编写位置"></a>JS代码的编写位置</h2><ol><li><p>js代码可以编写到标签onclick中，当点击按钮时，js代码会被执行。例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;alert(&#x27;123&#x27;);&quot;</span>&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p>js代码可以编写在超链接href属性中，当点击超链接时，会执行js代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(123);&quot;</span>&gt;超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>虽然可以写在上述标签的属性当中，但是它们属于结构和行为耦合，不方便维护，不建议使用。</p></li><li><p>可以写在<script\>&lt;\script>标签中。</script\></p></li><li><p>可以写在js文件中，然后通过<script\>&lt;\script>标签来引用（建议使用）。</script\></p></li><li><p>script标签一旦用于引用外部文件了，就不能在编写代码了，即使编写代码浏览器也会忽略，如果需要则可以在创建一个新的script标签用于编写内部代码。</p></li></ol><h2 id="JS基本语法"><a href="#JS基本语法" class="headerlink" title="JS基本语法"></a>JS基本语法</h2><ol><li>JS中严格区分大小写。</li><li>JS中每一条语句都以分号结尾，如果不以分号结尾，浏览器会自动添加，会消耗一些系统资源，而且有时候浏览器可能会加错分号，所以在开发中一定要写分号，</li><li>JS中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。</li></ol><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><ol><li>字面量：是一些不可改变的值，比如1，2，3，4，5，字面量可以直接使用，但一般不会直接使用字面量。</li><li>变量：变量可以保存字面量，而且变量的值可以任意改变，变量更加方便我们使用，所以在开发中都是通过一个变量去保存一个字面量，而很少直接使用字面量。</li><li>声明变量：使用var关键字来声明一个变量，如：var a；</li></ol><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol><li><p>标识符：在JS中所有的可以由我们自主命名的都可以称为是标识符。</p><p>​    例如：变量名、函数名、属性名都属于标识符。</p></li><li><p>命名一个标识符时需要遵守如下的规则：</p><ol><li>标识符中可以含有字母、数字、_、$。</li><li>标识符不能以数字开头。</li><li>标识符不能是ES中的关键字和保留字。</li><li>标识符一般使用驼峰命名法。</li></ol></li><li><p>JS底层保存标识符时实际上是采用Unicode编码，所以理论上讲，所有的utf-8中含有的内容都可以最为标识符（汉字也可以作为标识符，但一般不用）。</p></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>数据类型：数据类型指的就是字面量的类型。</li><li>在JS中一共有六种数据类型。<ul><li>String 字符串</li><li>Number 数值</li><li>Boolean 布尔值</li><li>Null 空值</li><li>Undefined 未定义</li><li>Object 对象</li></ul></li><li>可以使用typeof来检查一个变量的类型，例：typeof a；返回变量的数据类型。</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li><p>其中String、Number、Boolean、Null、Undefined是基本数据类型，Object是引用数据据类型。</p></li><li><p>在JS中字符串需要使用引号引起来，使用双引号或者单引号都可以，但不能混用。</p></li><li><p>引号不能嵌套，双引号里不能有双引号，单引号里不能用单引号，需要的话可以使用转义字符，双引号里可以有单引号，单引号里可以有双引号。</p></li></ol><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><ol><li>在JS中所有的数值都是Number类型，包括整数和浮点数。</li><li><p>JS中可以表示的数字最大值：Number.MAX_VALUE，最小值：Number.MIN_VALUE，表示的是0以上的最小值。</p></li><li><p>如果使用Number表示的数字超过了最大值，则会返回一个Infinity，表示正无穷，小于最小值，则会返回一个-Infinity，表示负无穷。</p></li><li>NaN表示非数值。</li><li>使用typeof检查NaN，Infinity，结果返回Number。</li><li>如果使用JS进行浮点数运算，可能会得到一个不精确的结果，所以不能在JS中进行精确度要求比较高的运算。</li></ol><h2 id="Boolean、Null、Undefined"><a href="#Boolean、Null、Undefined" class="headerlink" title="Boolean、Null、Undefined"></a>Boolean、Null、Undefined</h2><ol><li><p>只有两个 true 表示真，false 表示假。用来做逻辑判断。</p></li><li><p>Null类型的值只有一个，就是null，专门用来表示一个为空的对象。</p></li><li>使用typeof 检查null时，返回object。</li><li>Undefined类型的值也只有一个，就是undefined，用来表示声明一个变量但没有给变量赋值。</li><li>使用typeof 检查undefined时，返回undefined。</li></ol><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ol><li>强制类型转换：指将一个数据类型强制转换为其他的数据类型。</li><li>将其他数据类型转换为String。<ol><li>调用被转换类型的toString()方法，null和undefined没有toString()方法。</li><li>调用String()函数，将需要转换的变量作为参数传入函数。</li></ol></li><li>将其他的数据类型转换为Number。<ol><li>使用Number()函数，将需要转换的变量作为参数传入函数。<ol><li>如果字符串变量是空串，则转换成0，如果是非数值，则转换成NaN。</li><li>如果Boolean变量是true，则转换成1，如果是false，则转换成0。</li><li>如果Null变量，则转换成0，如果是undefined变量，则转换成NaN。</li></ol></li><li>使用parseInt()函数，把一个字符串转换成一个整数。<ol><li>可以将一个字符串中的有效的整数内容取出来。</li></ol></li><li>使用parseFloat()函数，把一个字符串转换成一个浮点数。<ol><li>可以将一个字符串中的有效的小数内容取出来。</li><li>如果对非String变量使用parseInt()或parseFloat()，会先将变量转换为字符串，在进行转换。</li></ol></li></ol></li><li>将其他的数据类型转换为Boolean型。<ol><li>使用Boolean()函数。<ol><li>数字—-&gt;布尔：除了0和NaN外，其余值都转换为true。</li><li>字符串—-&gt;布尔：除了空串外，其余都转换为true。</li><li>null和undefined都会转换为false。</li><li>对象会转换为true。</li></ol></li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JS基础&lt;/p&gt;</summary>
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
    <category term="JS基础" scheme="http://example.com/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>RSA各种攻击方法</title>
    <link href="http://example.com/2022/02/19/RSA%E5%90%84%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/02/19/RSA%E5%90%84%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/</id>
    <published>2022-02-19T03:58:18.000Z</published>
    <updated>2022-03-15T11:30:43.039Z</updated>
    
    <content type="html"><![CDATA[<p>RSA各种攻击方法及脚本</p><span id="more"></span><h2 id="1-共模攻击"><a href="#1-共模攻击" class="headerlink" title="1.共模攻击"></a>1.共模攻击</h2><p>形式：n，m相同，c，e不相同。</p><p>脚本：</p><ol><li>gcd(e1,e2)=1</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment">#使用欧几里得算法计算最大公约数，和s，t</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">e1,e2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> e1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (e2,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x = egcd(e2%e1,e1)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(e2//e1)*y,y)</span><br><span class="line">n=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line"></span><br><span class="line">s=egcd(e1,e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找负数求逆元</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1=-s1</span><br><span class="line">    c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2=-s2</span><br><span class="line">    c2=gmpy2.invert(c2,n)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1)*<span class="built_in">pow</span>(c2,s2))%n</span><br></pre></td></tr></table></figure><ol><li><p>gcd(e1,e2)!=1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">b = libnum.gcd(e1, e2)</span><br><span class="line">e1 = e1 // b</span><br><span class="line">e2 = e2 // b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">e1,e2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> e1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (e2,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x = egcd(e2%e1,e1)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(e2//e1)*y,y)</span><br><span class="line">s=egcd(e1,e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找负数求逆元</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1=-s1</span><br><span class="line">    c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2=-s2</span><br><span class="line">    c2=gmpy2.invert(c2,n)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1)*<span class="built_in">pow</span>(c2,s2))%n</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    m1 = m + k*n</span><br><span class="line">    flag, s = gmpy2.iroot(m1, b)</span><br><span class="line">    <span class="keyword">if</span> s:</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(flag)))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-RSA-低解密指数攻击"><a href="#2-RSA-低解密指数攻击" class="headerlink" title="2.RSA 低解密指数攻击"></a>2.RSA 低解密指数攻击</h2><p>形式：e很大，使用wiener攻击求d</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continued_fraction</span>(<span class="params">sub_res</span>):</span></span><br><span class="line">    numerator, denominator = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从sublist的后面往前循环</span></span><br><span class="line">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class="line">    <span class="keyword">return</span> denominator, numerator  <span class="comment"># 得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解每个渐进分数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_fraction</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    res = transform(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pq</span>(<span class="params">a, b, c</span>):</span>  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> sub_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n= <span class="number">76230002233243117494160925838103007078059987783012242668154928419914737829063294895922280964326704163760912076151634681903538211391318232043295054505369037037489356790665952040424073700340441976087746298068796807069622346676856605244662923296325332812844754859450419515772460413762564695491785275009170060931</span></span><br><span class="line">e= <span class="number">19252067118061066631831653736874168743759225404757996498452383337816071866700225650384181012362739758314516273574942119597579042209488383895276825193118297972030907899188520426741919737573230050112614350868516818112742663713344658825493377512886311960823584992531185444207705213109184076273376878524090762327</span></span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d=&quot;</span>, d)</span><br></pre></td></tr></table></figure><h2 id="3-RSA低指数幂加密攻击"><a href="#3-RSA低指数幂加密攻击" class="headerlink" title="3.RSA低指数幂加密攻击"></a>3.RSA低指数幂加密攻击</h2><p>形式：e很小</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e =</span><br><span class="line">n =</span><br><span class="line">c =</span><br><span class="line">i =<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(c+n*i,e)[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">m = gmpy2.iroot(c+n*i,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="4-对n进行攻击（分解n）"><a href="#4-对n进行攻击（分解n）" class="headerlink" title="4.对n进行攻击（分解n）"></a>4.对n进行攻击（分解n）</h2><p>形式：一般是n比较小或者p和q比较相近时使用yafu分解。</p><p>使用方式：1.yafu-x64 factor(n) 2.yafu-x64 “factor(@)” -batchfile n.txt。</p><h2 id="5-e，m相同，不同的n得到不同的c"><a href="#5-e，m相同，不同的n得到不同的c" class="headerlink" title="5.e，m相同，不同的n得到不同的c"></a>5.e，m相同，不同的n得到不同的c</h2><p>方法：使用中国剩余定理得到m^e,在对m开e次方</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n1= </span><br><span class="line">n2= </span><br><span class="line">n3= </span><br><span class="line">c1= </span><br><span class="line">c2= </span><br><span class="line">c3= </span><br><span class="line">n = n1*n2*n3</span><br><span class="line">M1 = n2*n3</span><br><span class="line">M2 = n1*n3</span><br><span class="line">M3 = n1*n2</span><br><span class="line">M1_ni = gmpy2.invert(M1,n1)</span><br><span class="line">M2_ni = gmpy2.invert(M2,n2)</span><br><span class="line">M3_ni = gmpy2.invert(M3,n3)</span><br><span class="line">m =(c1*M1*M1_ni+c2*M2*M2_ni+c3*M3*M3_ni)%n</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(m,i)[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(gmpy2.iroot(m,i)[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure><h2 id="6-已知n，e，c，dp求m"><a href="#6-已知n，e，c，dp求m" class="headerlink" title="6.已知n，e，c，dp求m"></a>6.已知n，e，c，dp求m</h2><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n=</span><br><span class="line">e=</span><br><span class="line">c=</span><br><span class="line">dp=</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="keyword">if</span> (e * dp % x == <span class="number">1</span>):</span><br><span class="line">        p = (e * dp - <span class="number">1</span>) // x + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (n % p != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        q = n // p</span><br><span class="line">        phin = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">        d = gmpy2.invert(e, phin)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]) % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;m:&quot;</span>, m)</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-已知p，q，dp，dq求m"><a href="#7-已知p，q，dp，dq求m" class="headerlink" title="7.已知p，q，dp，dq求m"></a>7.已知p，q，dp，dq求m</h2><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">c=</span><br><span class="line">dp=</span><br><span class="line">dq=</span><br><span class="line">invq=gmpy2.invert(q,p)</span><br><span class="line">mp=<span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq=<span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">m=((mp-mq)*invq%p)*q+mq</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="8-n是某个或者某些个大数的整数次幂"><a href="#8-n是某个或者某些个大数的整数次幂" class="headerlink" title="8.n是某个或者某些个大数的整数次幂"></a>8.n是某个或者某些个大数的整数次幂</h2><p>方法：通过欧拉函数定理解得n的欧拉函数值，即phi</p><h2 id="9-给出两组n，c，p，q"><a href="#9-给出两组n，c，p，q" class="headerlink" title="9.给出两组n，c，p，q"></a>9.给出两组n，c，p，q</h2><p>方法：通过中国剩余定理求得结果为c，n1*n2为n，来求解</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p1= <span class="number">241529374856419543994843741620715478233</span></span><br><span class="line">q1= <span class="number">329891612475502969315412700917758756573</span></span><br><span class="line">p2= <span class="number">179415062328238613586720079938194290751</span></span><br><span class="line">q2= <span class="number">281209161331996176661322999324485217597</span></span><br><span class="line">n1= <span class="number">79678514931584446837886795964984740987618425126262080131520484181733127175509</span></span><br><span class="line">n2= <span class="number">50453159207651801862952938090505477143503284591035016948403490994601319545347</span></span><br><span class="line">c1= <span class="number">10906371165492800616190805676717306177005704888515733402096006986355132032250</span></span><br><span class="line">c2= <span class="number">47055855052437161522184969745110429012879528443871661682592147046669796586664</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = n1*n2</span><br><span class="line">n1_ni = gmpy2.invert(n2,n1)</span><br><span class="line">n2_ni = gmpy2.invert(n1,n2)</span><br><span class="line">c = (n2*n1_ni*c1+n1*n2_ni*c2)%n</span><br><span class="line">phi = (p1-<span class="number">1</span>)*(p2-<span class="number">1</span>)*(q1-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="10-e和phi不互素"><a href="#10-e和phi不互素" class="headerlink" title="10.e和phi不互素"></a>10.e和phi不互素</h2><p>方法：找到e与phi的最大公因数gcd，将e/gcd当作新的e，求得m再开gcd次方</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p= </span><br><span class="line">q= </span><br><span class="line">e= </span><br><span class="line">c= </span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">gcd = gmpy2.gcd(phi,e)</span><br><span class="line">e = e//gcd</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line">m = gmpy2.iroot(m,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-e-2"><a href="#11-e-2" class="headerlink" title="11. e=2"></a>11. e=2</h2><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p= </span><br><span class="line">q= </span><br><span class="line">n= </span><br><span class="line">c= </span><br><span class="line">e= <span class="number">2</span></span><br><span class="line">inv_p = gmpy2.invert(p, q)</span><br><span class="line">inv_q = gmpy2.invert(q, p)</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">a = (inv_p * p * mq + inv_q * q * mp) % n</span><br><span class="line">b = n - <span class="built_in">int</span>(a)</span><br><span class="line">c = (inv_p * p * mq - inv_q * q * mp) % n</span><br><span class="line">d = n - <span class="built_in">int</span>(c)</span><br><span class="line"><span class="comment">#因为rabin 加密有四种结果，全部列出。</span></span><br><span class="line">aa=[a,b,c,d]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> aa:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(i)))</span><br></pre></td></tr></table></figure><h2 id="12-给出nivp，nivq，phi"><a href="#12-给出nivp，nivq，phi" class="headerlink" title="12.给出nivp，nivq，phi"></a>12.给出nivp，nivq，phi</h2><p>方法：通过数论推算解得p和q，得到flag</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">phi= </span><br><span class="line">c= </span><br><span class="line">pinv= </span><br><span class="line">qinv= </span><br><span class="line">p, q = sympy.symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">expr1 = pinv * p + qinv * q - <span class="number">1</span> - p*q</span><br><span class="line">expr2 = (p-<span class="number">1</span>)*(q-<span class="number">1</span>) - phi</span><br><span class="line">r = sympy.solve([expr1,expr2],[p, q],domain=sympy.S.Integers)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(r[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">q = <span class="built_in">int</span>(r[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e, phi)</span><br><span class="line">flag = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(flag)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-数论推导"><a href="#13-数论推导" class="headerlink" title="13.数论推导"></a>13.数论推导</h2><p>形式：给出一个或多个数学公式，通过数论推导变换最后解得p，phi或者n</p><p>解得p：一般都是通过变换使得一个数于n有共同因数p，设那个数为o，则应满足o同余kpmodn的形式</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RSA各种攻击方法及脚本&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>CTF小学生——RSA班wp3</title>
    <link href="http://example.com/2022/02/18/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp3/"/>
    <id>http://example.com/2022/02/18/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp3/</id>
    <published>2022-02-18T03:53:54.000Z</published>
    <updated>2022-02-19T03:53:29.706Z</updated>
    
    <content type="html"><![CDATA[<p>wp</p><span id="more"></span><p>题目：rsa19</p><p>解答：根据题目信息发现n与c有公约数p，得到p，q，求出m，得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n= <span class="number">24981188020167643746074879674147956549430370314044132464039253351652835734440674909204189557556602865962429895374385855345228410925147709118740392159925942795088299679655602727568511595072696409696271371250102853677902616206682058248674337676916036346628088795691598346311821772518310067782592432491390315016938601034921878080792576848740835839533436309467949739957366439791446358471180018562594829965668319970676634275599934272794456322929434264075482862354958544593517741073415713467939034524174022554745424038830745700456334054077809280744596235294447559597633491714726093368901810800094506409706555205366712813489</span></span><br><span class="line">c= <span class="number">18621596046506896357501494490427254488179638636182636310535680038609096612801678121484736598560358324455851721295385341142207429201113106822997090878471278518783809844775558184834964034587247425952074737623038780244691628409045326000650516141599732305641793044557982746856322994617259408879266356396616639748741726355064689072113192676869563527139209384310754130692810070548558914951576972545449143198975499766952417464247791425484288188124235662918342094367901287461654602032582020287215884903753469091244847129233355340585693462406329376871222071849218639774125831290704426337294409031337314523781596602940531607723</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">p = gmpy2.gcd(n,c)</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m//p)))</span><br></pre></td></tr></table></figure><hr><p>题目：rsa25</p><p>解答：是共模攻击的形式，但是e1与e2不互素，最后对m进行爆破，得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e1= <span class="number">221</span></span><br><span class="line">e2= <span class="number">299</span></span><br><span class="line">n= <span class="number">22752951745297736168537377055274778116665470909065477125935886705065315928343909239030226134317655286811706825307791028935468695248938314873728310939010332033303049984284854672480419186656651898284247010047681096246455201967436493619623922813042286133760359535974396266228677845061471522291462170675019300170320671686114928795841399272659671749295028598451924716935439876301262667477640877837569951118311739219264913187243646073550492683492113343384821975066291244933858116486782731928931431642274809491405001955412026149194699922670378380172100475024897567223023327826339547555266975263552287361838466410256332586243602018701252181095544525087725089471855146785890801898964498900490722824136161536824524023843219008916078446694933471093288073098317841217353433648382906362253310187885031349173752969974195099147758139669961092400692293113078059473080806234076443570119722130939533645583942861471571301658146374104930923161280707107854937882275460478198823125819905477560849933589115721416285687345303919348351291800712956242809906173781232818857076129195419972616950359257381023984782648862051425193061029177411755248884275122634206055064928918131704555281055171016232989653908936425333474592396425262724183978715755517681781896905505681019433680152515179578293854352466356161898967395639133527374169311595381</span></span><br><span class="line">c1= <span class="number">10892593793227365116925700965458364184649125396663943796073539260980997644891965799450399424218723107551158558465723957982810191916064316067402569229239706110587662283006062233207602849048977390414725491999094784268795765845090278541345060691227848049341792356361866090107794846740587550516493827550761044916120742634716100959568752284205773635157016570644732882618112667602892495591343383196825341503584074765200031063900399784671363062540083853968276812461259424786023596109476654103941796084022234777516856935201686089014703949873963763173504178597282120893681944701529635472087336308148045296570250358965387578639389647372863697874387920284376355175371658214022432637233049643918240215883756536156344271717888814377311625833162569949367074856096858774042469897229733611875690829200986478219874772214075323186921718101279851215225427651429974497218901117181173977981895145545289488897144837754206327890077498892642359817562974797240756164341335703875164746037528216084897204167262772966756903307518956994642174111291907559634725813349461899233834828219448501415166737945826263270661137588163692728905410221169466525723870303978092494941639719863782656186969513167917612386960116158336850718448480833247082725651743364206989720150402475518960807596933665261898347257015381952076956414926169065628402035877024</span></span><br><span class="line">c2= <span class="number">16234449136110301948915044033782803178888320780730248041362289400402520359200135207779437601300318341574596537693496447844160745059083759235870748096444629141498803084865475060123420097840970184733706276824699107779327930269426809903826537911640592522293558467627053309463726380481516500764543325038595504462274814965367972343969703518441786374346751491786697266008897789281988633961789937331687231107598075641627085598476591935681238873469342798684028977952673061492319474370639867032312696974209893993745844085661037025325712464003345130349368517370647831842069123305455497561422546383131187398775555886803281812066994566108824332556193714585778964779070971454065665303736272711223551782164863853905352227680603140162402255969282233812006972796280850233545219871869909534783019159100014111451843232957211373061429434617954249240688081192808501611525220067662230418353538193891708132134012043837396576358357488762683942703800181858824520755919230602612335238556205420378498803006965524284284802224595940916712846360900844939206346374912066944666599066191687022350969781809803220970991254223987034473812934155305370148168751311003191110608399854183137132450387729417275410039697670774601121758536584269746197227045293026303760774202258533200041885054449850059983037919760683276465377311443445828203784214390883</span></span><br><span class="line"></span><br><span class="line">b = libnum.gcd(e1, e2)</span><br><span class="line">e1 = e1 // b</span><br><span class="line">e2 = e2 // b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">e1,e2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> e1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (e2,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x = egcd(e2%e1,e1)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(e2//e1)*y,y)</span><br><span class="line">s=egcd(e1,e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找负数求逆元</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1=-s1</span><br><span class="line">    c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2=-s2</span><br><span class="line">    c2=gmpy2.invert(c2,n)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1)*<span class="built_in">pow</span>(c2,s2))%n</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    m1 = m + k*n</span><br><span class="line">    flag, s = gmpy2.iroot(m1, b)</span><br><span class="line">    <span class="keyword">if</span> s:</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(flag)))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><hr><p>题目：rsa26</p><p>解答：是共模攻击形式，但给的是e1和e2的关系式，通过遍历所有e1和e2的情况，得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="comment"># e1*e2= 83317</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">e1, e2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> e1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (e2, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(e2 % e1, e1)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (e2 // e1) * y, y)</span><br><span class="line"></span><br><span class="line">n= <span class="number">19361442710572745971265661179912428614335978862294499554478708154961900725571203060796104846289397242207304532314240136962004100859120350866177200389723065658762704195258332314791286248842309297348039111045266185355903400590470820183877252896166548216731371364979378507526744861441605219478410567943584909399458417880788827318597539692741384869777249157338164956516233081381729474311604082892186490173033244693551617094635430697205804969501877592642316320873084247185093376277647579480643486369145925195734181193015900482737320548696928588870712293186252013457131251209473809656777543374500592007808404407059561585875569527546497652518580045435210514546460508584320606314122520882426004609258608147903667923350952560862343978526661419457923377730038903725129920335146125419046956321000719022303404018007514471776998828154744785228693422230685108494515083105086516002742258455143048441346760686508352771381755359768486489070279892078844716848637514485979868052449468414483027672075237348001190373461535494802211938683204976566773050049547807712425194913096401165728862378611187510228222428679755307056276133497536735863204478321549958435946853973687386589497836951783399492540878952618631792625025126620608024559471293131768988077589502325651357976822933654550846615039529755326862460868499406888969184042128071</span></span><br><span class="line">c1= <span class="number">8461455935702774839606732696628583481106108739457157757237961493721249315707058365854463354773540401038228236301572933195823206925383589280380438344346918293151928169930134045632956081184945062566817678757614816611860006425866597730747864519352309046720733870943424680296477704991108084039103348714387678260925701357278152801810444616098214964231942511332731906589339642434586792884729500618636404879133808745489823990051381479316035290316511507860259556699539853817794899071305575419968794233519130191693519669424965740754005557268523536259961342893331243822271702601491251166024629032785331163334845458532041066873062181204642511730061193181806412423310871852101503714865811232852678040552266896756835104015126426669170036333066668010437674021104622132437422087899276215087590613842963706972249810831528040008304175911799215946803926073839260039708714727246670180210772138254229999545871929350538204078637835690649108982156556159082202035891312400182426109033284706424624286874595070797624804888642649414098331802113837492380725023537502746076689560748513729573164798419260068335949704460969862627638288475890309143274515210188524564546972793051029662396980537597835874860939675476734819945549433268818379519178647303476509820821756282974287073312744339124424284365074314353072957540119217061097316369179812</span></span><br><span class="line">c2= <span class="number">6204846642785521340470513546335239064256758077473460303136152226321426573866713276868303467627807818878464124001025948893472833684203082226317608116339642653526005250588488719287359040352790572959995584093188339849695217956472022875459556871491299322868787108334073007332501731796096022506406756118808831646084743403979543281704069120640233328839980099290857269846287187888156728145277024309531510105331797866833685076835273931526615042292719970926967658919153638762985362453791732734631621502983351581711188066449777097203043897589205329057225446193852593056040301734809364853181753118739604843784216536562612033307359103893806510482236157475021740603255590914121641809865052126419196638531405221094438510231726208366630512008162663744010330103156199459170979721924714894281792427651932643530734043790246173905509400532261288534889712214483873969552991657537356198890952147322594953541508366871552561029095676172024539741525694906063413062943730465813047155464168544196529490081901356676689826701155342513241655234549380041635792150618405682571311160853526719882812618473055821608217492122688669131559593093840370537049894579011917334477512297137182557102626033423909278319394496823138854073015927815382203590762482110896381565689852266596980436613904791614372199019839459027972129220041158226866818118745059</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">83317</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">83317</span>%i==<span class="number">0</span>:</span><br><span class="line">        e1=i</span><br><span class="line">        e2 = <span class="number">83317</span>//i</span><br><span class="line">        b = libnum.gcd(e1, e2)</span><br><span class="line">        e1 = e1 // b</span><br><span class="line">        e2 = e2 // b</span><br><span class="line">        s=egcd(e1,e2)</span><br><span class="line">        s1 = s[<span class="number">1</span>]</span><br><span class="line">        s2 = s[<span class="number">2</span>]</span><br><span class="line">        <span class="comment">#找负数求逆元</span></span><br><span class="line">        <span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">            s1=-s1</span><br><span class="line">            c1=gmpy2.invert(c1,n)</span><br><span class="line">        <span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">            s2=-s2</span><br><span class="line">            c2=gmpy2.invert(c2,n)</span><br><span class="line">        m=(<span class="built_in">pow</span>(c1,s1)*<span class="built_in">pow</span>(c2,s2))%n</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">            m1 = m + k*n</span><br><span class="line">            flag, s = gmpy2.iroot(m1, b)</span><br><span class="line">            <span class="keyword">if</span> s:</span><br><span class="line">                <span class="built_in">print</span>(k)</span><br><span class="line">                <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(flag)))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>题目：rsa17</p><p>解答：给了q，可以求出p，但是p可以开三次方，属于n是某些整数整次幂题型，求出phi，得到flag</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">q= <span class="number">9821019070409676333044072841065266478412490068866140735407083020681876874216236257486646854474910118979331501550740926276257953946766816940478029341936251</span></span><br><span class="line">n= <span class="number">20065300735475128590762092835634208578590188430910113938266923916956496499667511050434727958038855180430563677067665310984636341807198909493266030524407914174388530285921911038005426931867734450564693608543508971517875518246462535981518861032385301237643992100986849108856013524416300831289325154121110808247211536812259102311581603306878281780717796746256378731029854411630700458188720317727057026867196631023061032601638872839570025991211870975933208177308028632438360982879806030503684724554915521232091140311979213507503765831400499361130450254384304522697771978881836641395836048939329374662229617271102430460909</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">c= <span class="number">10334353226901656582025695459419278099579299367981226010947137434420041484901529514923751765488009668423558942300563010202002037412708785365886627854514598472485113085663423766836258491855487234194680311886099056606577829335872927280970941190051132740285138145789581491571992748223980546807928715445558156932190046773138655188050614149792373562068124659615358354617809264387945436262858291997823711827227689741790876680419269257229837590349990437789831556244226011468099456803730676941298395849646182421743150816380697450542133246409603419842118484214641273072148680153105439037855464224041968796128112802295366103465</span></span><br><span class="line">p = n//q</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">pp = <span class="number">12689067460968639894065349877170981382620686137782855931246710156025521091715625374157329608017968147868420672538526581198886713432258948704920071988814119</span></span><br><span class="line">phi = (q-<span class="number">1</span>)*(p-pp**<span class="number">2</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>题目：rsa24</p><p>解答：通过数论推算得到p和q的值，求得flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">phi= <span class="number">28966979166570180792165296396724775304517816996213001378904940909248222621744363164060646280877414774628518793976134344184737619758944142550194446402845725493545936793098648425155476429668930938014304229091104323598042011271122352821641737995916068502719690156789746925879428347004296365564709555034301336182039595944335942074220057981089093966223640524369466707713532786591393560573430039419666653556854223221733490286943768486930990336116190822717169430449906522651685791244415661556972220411059281945030016877574295789727262542406148661746926555755138131897719940373448806465681975703741492376141647300222120764176</span></span><br><span class="line">c= <span class="number">720145398292074537841545933602326576473741549031065757078743296389866423532323142546976378639116392401015537356833285793967458358811500970090359466006710851461179235194672218801099391897590970224027270931178916315599036922311596360019951482688270439303813604298778434700769575460359837832123520961908670114567264187749974973161834455504080742617408916975343280038195372974661435728626712478453001807287092016059839073591842844494467689945527339487420875460002726594818888135989064204753212132759555043298333825336624898166489925145638031193323390714418639197846253807136848080963690346391564786977660865660369588736</span></span><br><span class="line">pinv= <span class="number">39909138618897087067954916901129200709546611058646810494691327775381751231251757009652158182562111025345777419136131627317857034803133000960699371752937982327038307202755295559833643098803333455922604021123985432376916162830630777450512563806228068454507293167399195031896286580600520567700823513451195630782</span></span><br><span class="line">qinv= <span class="number">125979298930392658151999068892470842145268806602990251801755362457878865090087519939810066896328884925162140671677288627936775912311050406204502785192435746027871238995740612020311103525540888827958654046791157003378716522058722618817211827933204346475175247869409531112063929254072913542894583256079584493518</span></span><br><span class="line">p, q = sympy.symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">expr1 = pinv * p + qinv * q - <span class="number">1</span> - p*q</span><br><span class="line">expr2 = (p-<span class="number">1</span>)*(q-<span class="number">1</span>) - phi</span><br><span class="line">r = sympy.solve([expr1,expr2],[p, q],domain=sympy.S.Integers)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(r[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">q = <span class="built_in">int</span>(r[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e, phi)</span><br><span class="line">flag = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(flag)))</span><br></pre></td></tr></table></figure><hr><p>题目：rsa27</p><p>解答：通过对式子的变换可以得到$2021^n$与hint同余于p，所以有$gcd((2021^n)modn-hint,n)=p$</p><p>,得到p后解得flag。</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n=<span class="number">27020725261160598541077357737650775795182555998856810737571508044949928734067444441660366270392732456051807439301564552672200975582350577967001486740668193835704559129378410828266554536148151615878808327988333060924165410762016082268322936465413880236634083213834739549234631742766416876749808978934944262651307600621868854944164060642189749365967978497831698002669974744487926082412272998646851047638183126945784060957075393737537570645086672473571281053798891685646561828588448040073373363454584468753860529849749093081434144360661566815886630699933232263079413562069476421802192735693386029862725050469209845710383</span></span><br><span class="line">c=<span class="number">10188807385387617708190575473905502994151677148079820873886980571555051900701810208218351138721306416600688313703084580808183634201231599134123549448962443376514560489130860694363901933597676373555599555647232128717993571185822894818704143675318690577221330618533739592165564396729937983659337232822442555504262694675199751730664450120569727835850996566436129543730932040989365233424791093843941154003052950306359994891955336607690065213304872738280674213630736611351982705373394299097653653497017756036211550125607093109216729483090391729134062236908282557149575812220142872855836932590459512028618076264332235518829</span></span><br><span class="line">hint=<span class="number">15179972145975733285419381814235528011288991423484121653543845156913121513320504879647666067298415751234264897435338898933073713420024176276221164394369781676781604128149168834126855517212300158864797800121336042194751965268493010327202598446572764475343894613152062609436699715193914479572113800212525965140106015838636914979735618606768207651697548364440806425770871133439416876157686985836939255598747973339866125864303982956813846287509191028829738926404992619459242904729015823730553526572575372668559669124599614613391797015393641171177282129497503752370800088634017972208535899870704612274473042064675033593148</span></span><br><span class="line">p = libnum.gcd(<span class="built_in">pow</span>(<span class="number">2021</span>,n,n)-hint,n)</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：rsa28</p><p>解答：推导得到$gcd(hc-h^emodn,n)=p$,求得flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">h=<span class="number">20211102</span></span><br><span class="line">hc= <span class="number">71505320953946158049530109094654497075489963071106175336722892393493112481336409391299522595724154571954223093317880494307263262649833222750675105885636892419350501821324979706283867758665536771783209816719106279467902518895579024290387800216711663670572861182058425925280993190282267615052256942516011995207</span></span><br><span class="line">n= <span class="number">76856511192427852645963041043072791148703422665129663050712492700760489247788743818199589072069758934570218804936479267319288093436111548055922916898782764333246946326823653877357695179165138863843657328764265204547147092074499832221138997131011222722917338444675582832114206750168113207646100633238664244737</span></span><br><span class="line">c= <span class="number">39246179387125192271554620313966311736032348078183121707012959204367908070472764506984235827179206718838172586811066682034907967943722841257765922283692526422653916506577810629430853963448057701574209912936660396486847365579797147723437378122880075493171892191049105237005801787649587080840600670585409293046</span></span><br><span class="line"></span><br><span class="line">kp = hc-<span class="built_in">pow</span>(h,e,n)</span><br><span class="line">p = libnum.gcd(kp,n)</span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：rsa29</p><p>解答：通过变换得到一个数于n有公因数p，求得flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">h1= <span class="number">30855822627962989585229048864635672320544672090785297155723423466786046363050770166911337642023073726938940720811335150158356617935867424913657952916327330494297125827029212326952561052030408154856279444698976262609160644653834177066135162450457878611978648445980131216562928824964574836061694756466154667205</span></span><br><span class="line">h2= <span class="number">40100423593623305059775303455521238466361560139512541341649592368069344035986841719639287569549223369845132085965748305686682111656643181380183441717688410643280141958261131108758470255679260104010792458818255865919591927360182698571973058572267041626051012344432873060584028954870019976713790755601324558548</span></span><br><span class="line">n= <span class="number">64102959876468100680156640535847855388761634133282097987245513821195616433464232166471238446539383399142190819132167640251487788433828354971655930602252481995598958979413328369264306739790569021167918377152867054737871100808301104788028284764159363852402951908183073134132550874656189587590198702783318894869</span></span><br><span class="line">c= <span class="number">45131183832310284041286970164837452402860781494367814170537748979786683176908409834474718536824887130743650179867181711815561375866637642188028690304179190358058486755191379316599103162356440279017384835373685350107932236214472686050587719705355548868691431799158695967203810074232266157701183923093912519832</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">kq = <span class="built_in">pow</span>(<span class="number">2022</span>,<span class="number">1919</span>*<span class="number">9191</span>,n)*<span class="built_in">pow</span>(h2,<span class="number">1919</span>,n) - <span class="built_in">pow</span>(<span class="number">2021</span>,<span class="number">1919</span>*<span class="number">9191</span>,n)*<span class="built_in">pow</span>(h1,<span class="number">9191</span>,n)</span><br><span class="line">q = libnum.gcd(kq,n)</span><br><span class="line">phi = (q-<span class="number">1</span>)*(n//q - <span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;wp&lt;/p&gt;</summary>
    
    
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>CTF小学生——RSA班wp2</title>
    <link href="http://example.com/2022/02/17/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp2/"/>
    <id>http://example.com/2022/02/17/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp2/</id>
    <published>2022-02-17T06:18:59.000Z</published>
    <updated>2022-02-17T10:31:26.057Z</updated>
    
    <content type="html"><![CDATA[<p>wp</p><span id="more"></span><p>题目：rsa_14</p><p>解答:  已知n，e，c，dp，直接使用脚本求flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n= <span class="number">22622953499906408301564967921245988860495391097132954220274432924287509085632417945770881691534975145091374242390427640088367167203579325929612016723243658261593025738254367644091603118090370975169770127462281455311168276705797581236756566556572477147794482576566576141503657366877706216822051348815093952824935126554144616168117998226546298989358973835686535936849349204968416839514589022517798087249227968029567878985549747691248450050900456070085755111883456285843067740064987642442265366446045841262726264326834028291726094139315980161873887433830833454445599669910399735340574524109558630513082823400621144454351</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">c= <span class="number">469722654129671419249759522951904591667490211597089754628487076348562605615284355442799382577011350223484863274785594845261822294849547236041417367128695661795868225558049849940969387805053378233945487237026625762800225165430228884868681682886651471380372547431200184327293846958033983382179623067806485162201079574837090290662923491693441026067580453795233723008995575278125426502251786591238435141115672755813724389532148907336492040829080851823787879326475426928069825609696935156088233034235751099793215905063550820628171197918871238376618291835524535363337134321757043740849310613185143435442464034252256136947</span></span><br><span class="line">dp= <span class="number">126729618715997639432376012471064242072409613989447605497725787230926131930047985649208493373747981708515084950424544560607536523739481248536263970683258477808489883464951901490743860000504246086678359257162357254217610750532553294000611257291925400498830519491741364527898680055532286984211081076338931327137</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="keyword">if</span> (e * dp % x == <span class="number">1</span>):</span><br><span class="line">        p = (e * dp - <span class="number">1</span>) // x + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (n % p != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        q = n // p</span><br><span class="line">        phin = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">        d = gmpy2.invert(e, phin)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]) % <span class="number">2</span> == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;m:&quot;</span>, m)</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：RSA_15</p><p>解答：已知p,q,c,dp,dq，带入脚本求得flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p= <span class="number">112454994630978850005784651276022327545786198205744597431888680937657203192943</span></span><br><span class="line">q= <span class="number">111081771780978300442208201256251933100607227308819156491182881723714968913833</span></span><br><span class="line">c= <span class="number">7847140580627012782899798457736961376953768684667159008470556786390887805253326211691923724846808704462396746105331991924048819814322540306282164012066426</span></span><br><span class="line">dp= <span class="number">99016059099144522019375365089687785694029213535292918424815544402513220169503</span></span><br><span class="line">dq= <span class="number">79504900574184798493105575420403885224379864982754477219462523963780735261625</span></span><br><span class="line"></span><br><span class="line">invq=gmpy2.invert(q,p)</span><br><span class="line">mp=<span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq=<span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">m=((mp-mq)*invq%p)*q+mq</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：RSA_16</p><p>解答：通过yafu分解n可知n是某素数的5次方，通过欧拉函数定理求得n的欧拉函数值，即phi，得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n= <span class="number">24090704838485320092322602381433113998549491255884266387675228929661104335500411198637928025660996430319332941004040599396998234228244782303357297973137930526505489726115260523310511218709466132734290380881163955161225457364375241182423158684922361439555422326120328133588500102913773661266808325619034117428588147006907657756318674847307691315077012529837425655081122924789717051817547851005534496378358099420535561566073404733903281708969861402722313932576238811896701757123799634332216554086749941045956406802471674031944558913714990838086806396503547587896668889448877787128717078534093031525842561899729308823124832044199410217169735469224432542618693916399121293260293185310206776155217396940245472443313953985052989506641484804269835655950721932515156631880216443</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">c= <span class="number">4644692044652159435824271269188149877191463739428505800552271160405169256688524376059318365826281434840310221997229754973778724418987980440341270686332667226078120978326105359289063570833817421216507957905303736889805936005004450684613091300319138800693741893618264241268661031157574584193673068534877291120825428318673498993334115269043893347607706429720486411605530004387437787775015099350192774546635451473835741062999624582951642205695330470935474403770491104296455303487414392560417505110011204285904941964895708840331681754455406209522192714176572299696109331233432919143365691231618894725659346560911188282377099473664930243190978118442970824453139977801843431119816228255364416557236747200455405887287572620725727247354320774485121369770634224919966258978988036</span></span><br><span class="line">p= <span class="number">7522633459543261699928061990854146313832534923510670277767922552283252008995826136321031523873848172725576684552966982932229269010055777902040181800721643</span></span><br><span class="line">phi = n-p**<span class="number">4</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：RSA_8</p><p>解答：通过yafu分解n可知n本身是一个素数，通过欧拉函数定理求得n的欧拉函数值，即phi，得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n= <span class="number">161670795418661108941395547760068053355832555077779027853700140442876298077926786030806243269042521234383793929910836023913994987010924339006536693866763078849189869497871752489277315727669547511079303136326388638480680630822677173084810848784554433394382029956739707395702556105138001868786944077871569844771</span></span><br><span class="line">c= <span class="number">91652340468387584012845155237237896957786753396661434559421169499111938419733760364914054180181470453332534789456757372866493406817246725731113863637159054175158914882334950110118713886213759125279941357012004180349611604118066085014934218543579248275421019690815403585470855502464076600672369539603525850924</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">phi = n-<span class="number">1</span></span><br><span class="line">d =gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目:rsa_10</p><p>解答: 给了两组c，n，p，q，通过中国剩余定理求得结果为c，n1*n2为n，求解得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p1= <span class="number">241529374856419543994843741620715478233</span></span><br><span class="line">q1= <span class="number">329891612475502969315412700917758756573</span></span><br><span class="line">p2= <span class="number">179415062328238613586720079938194290751</span></span><br><span class="line">q2= <span class="number">281209161331996176661322999324485217597</span></span><br><span class="line">n1= <span class="number">79678514931584446837886795964984740987618425126262080131520484181733127175509</span></span><br><span class="line">n2= <span class="number">50453159207651801862952938090505477143503284591035016948403490994601319545347</span></span><br><span class="line">c1= <span class="number">10906371165492800616190805676717306177005704888515733402096006986355132032250</span></span><br><span class="line">c2= <span class="number">47055855052437161522184969745110429012879528443871661682592147046669796586664</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = n1*n2</span><br><span class="line">n1_ni = gmpy2.invert(n2,n1)</span><br><span class="line">n2_ni = gmpy2.invert(n1,n2)</span><br><span class="line">c = (n2*n1_ni*c1+n1*n2_ni*c2)%n</span><br><span class="line">phi = (p1-<span class="number">1</span>)*(p2-<span class="number">1</span>)*(q1-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：rsa_13</p><p>解答：给了两组c和n，并且n1，n2有最大公约数p，由此求得q1，q2，求得flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n1= <span class="number">14344966075668457197926805093252019643096573510969721322719333921005737087381900449540855412424548701204134893993421731511948833767143851141078209382285846501386535725301259909239487164541050781598400430159674920170854404496253398222187307367926322625492497171740002969789815008039987485265892529966452609000393813395779113860224081603944565240880582129475822907507399743470085845133711696533090310948349344084563385664363625995999399255547593760021153639514720877652246066221504678395471466612295627656516850262088529244725814466732348833167839822545350219641690764981001428685344377698209527688737137187300399652993</span></span><br><span class="line">n2= <span class="number">12354218348882658855939557374675440240130593637412960903022784670883099080512624736064231265886849271910351937451997751749093644637238859633012706230887428376122240805168054483532576336852668163683367625468673502957503469509123739755819238781219308756042088817872420155442438195380803116150498980766272244743798236039791910368557658313836740247547559284129302204970113950049895139613500250641481434700366895302374051200743877172702615189237557067101522920447615629272986158643661393610029180590415625821891554368097074431230829448921269825593886700360922071375933729554358494473990274497958858233048122738508242423439</span></span><br><span class="line">c1= <span class="number">3691123354676066697059437937998979583921581870731150079375228838089668944155347573115895745939257000857077746797136413811508634456041342500337302101225465437119807883492455873112323783750970718926005237215996705821476132706795935577193711973896496979170206973337515061654337654274989697617761256418417804735475939505284666094122467326381674631123530317439987013961787043442129186254743721364414447230567446822751926033047452822024681275085831713997686837779667260888016072279588480296674703292539294133901503225011837599317942181453227103095922082421095286788644523456206687517063265624595424684296819286062613760042</span></span><br><span class="line">c2= <span class="number">5938408686309543013293741535567205151131688865994815122696735470416646965603186344765655319536668785559696396104442531438099421602193304800760866674863437267379695326984063895846835762801125090313445489510683263350964708721907377863520679697909959118156916287172182350863938539461166083625073905275280319815502103888903393913834228224181613416918191464536553417181893783896959345196250270792673371830038465845317178867867078669131493698960171589833480768462627600224827986249429611594755180062966252940786732981155206917654348842803640264421695660795812804373210578066663145314490990520854537552802784407185492236744</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p = gmpy2.gcd(n1,n2)</span><br><span class="line">q1 = n1//p</span><br><span class="line">q2 = n2//p</span><br><span class="line">phi1 = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2 = (p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d1 = gmpy2.invert(e,phi1)</span><br><span class="line">d2 = gmpy2.invert(e,phi2)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m1)))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s((<span class="built_in">int</span>(m2))))</span><br></pre></td></tr></table></figure><hr><p>题目:rsa18</p><p>解答：给的e和phi不互素，找到e与phi的最大公因数gcd，将e/gcd当作新的e，求得m再开gcd次方得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p= <span class="number">179604728901172884984546444098336951299567226578637956867234955273321950834253763455974908411986208869587996429208317419915541879829705695083899455584410844347380529355478252408255665437124675873347322572413775553300676365369297224009959989495411452768654413529438720408670663273782756277912404468420962465297</span></span><br><span class="line">q= <span class="number">173812808579656497809794049676143957530187304874982238246182308756968315404682483726756662221017110382295012325999009417177266772549812121470834293121487863992068948158282535382396055587629081656872380987341085769570778778669919312677737719340626660293905750991112916961702537446688565242955846309244801936781</span></span><br><span class="line">e= <span class="number">298</span></span><br><span class="line">c= <span class="number">10877632494141323696706173060086601121355884259234525310108848169016343902980600845727568845840567726459597646880426553618145392261925420045090468239137708021360087031552255008560875384082156512208224524860549260224921452504096206527857951948234851544501022714642000242331900097894216267245750310618972277142398661493280224445067919972096475478247725627682511339310203665988973259583184028008064493780090233902782416178723036468013857367850280612841182686428704717939119216042691392502115511334107971111076296702241411286865983278698999230209388059621673227839004725621075278503145071860800081826179749895009884713055</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">gcd = gmpy2.gcd(phi,e)</span><br><span class="line">e = e//gcd</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line">m = gmpy2.iroot(m,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目:rsa20</p><p>解答：e=2</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p= <span class="number">122148491423639510060358520247326001415378756960123061340205031810235511253496233656913937819798161138467669802058794431258364815048474953088507274866256378381409951959750689384174071189227238884101846565741054406768547752624840426474750191838000550894022573930877154168207130498171735566553517132962856855111</span></span><br><span class="line">q= <span class="number">142755578574113482683875150345372577363277111983736520709390192691018628850982550669601255375276434229753811206425659062428721779518168263620205357414671725791655926862817648459031593998074454782619982558995296893592414687691579260619395713067522690127560706829880215532804483197706245921702087884445862908311</span></span><br><span class="line">n= <span class="number">17437378565136796938110429615460109306513763994515441361700826128854509816577500859330683620324942811798278054720514628441058958796253590667597639564320226081313246692273260392020172668686109508486701867559622051759183126919749044186432732690010275229298964648509739981889494014237283495021762548037876030067888443161621760780099178071080783305102758292721482026470985598146884711243792995042285939445306378914554641176698591510703687482228868400552567474489250501034857093624184577568397256397519711404394386053806918127762571356839381312261171823757803194242506737946861441555551672977659019959562416882973604727521</span></span><br><span class="line">c= <span class="number">3136716033729239841651527855193478838856206237778382623476323002673660140993283468296727521269046606643005570111263565370046029024734759921698482194871684883853668185647585044859555880105903361901008649</span></span><br><span class="line">e= <span class="number">2</span></span><br><span class="line">inv_p = gmpy2.invert(p, q)</span><br><span class="line">inv_q = gmpy2.invert(q, p)</span><br><span class="line">mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">a = (inv_p * p * mq + inv_q * q * mp) % n</span><br><span class="line">b = n - <span class="built_in">int</span>(a)</span><br><span class="line">c = (inv_p * p * mq - inv_q * q * mp) % n</span><br><span class="line">d = n - <span class="built_in">int</span>(c)</span><br><span class="line"><span class="comment">#因为rabin 加密有四种结果，全部列出。</span></span><br><span class="line">aa=[a,b,c,d]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> aa:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(i)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;wp&lt;/p&gt;</summary>
    
    
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>低解密指数攻击（e很大）</title>
    <link href="http://example.com/2022/01/22/%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB%EF%BC%88e%E5%BE%88%E5%A4%A7%EF%BC%89/"/>
    <id>http://example.com/2022/01/22/%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB%EF%BC%88e%E5%BE%88%E5%A4%A7%EF%BC%89/</id>
    <published>2022-01-22T09:36:14.000Z</published>
    <updated>2022-01-22T11:09:46.848Z</updated>
    
    <content type="html"><![CDATA[<p>RSA低解密指数攻击</p><span id="more"></span><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>使用wiener攻击(基于连分数的特殊类型攻击)：</p><ol><li>需要满足的条件：</li></ol><script type="math/tex; mode=display">d<\frac 13 n^{\frac 14}\\q<p<2q</script><ol><li><p>攻击思路</p><p>在RSA中:</p><script type="math/tex; mode=display">n=p*q\\\psi(n)=(p-1)(q-1)=p*q-(p+q)+1</script><p>因为p,q很大，且p，q相差不大，所以$p*q&gt;&gt;p+q$,所以$\psi(n)\approx n$。</p><p>又因为</p><script type="math/tex; mode=display">e*d \equiv1mod\psi(n)</script><p>所以有</p><script type="math/tex; mode=display">e*d-1=k*\psi(n)</script><p>两边同时除以$d*\psi(n)$得</p><script type="math/tex; mode=display">\frac e{\psi(n)}-\frac 1{d*\psi(n)}=\frac kd</script><p>因为$d\psi(n)$很大，所以$\frac 1{d\psi(n)}\approx0$,又因为$\psi(n)\approx n$，所以有</p><script type="math/tex; mode=display">\frac en\approx\frac kd</script><p>由于e和n是公钥我们知道，所以知道$\frac en$后，通过计算$\frac en$的连分数展开，依次计算出这个分数的每一个渐进分数，由于$\frac en$略大于$\frac kd$,wiener证明了，该攻击可以精确的覆盖$\frac kd$，所以计算每一个渐进分数，直到满足k，d所满足的条件，得到k，d。由</p><script type="math/tex; mode=display">\psi(n)=\frac {e*d-1}k</script><p>可以求出$\psi(n)$,然后通过解韦达定理得到p，q，如果满足$p*q=n$,则成功分解n。</p></li></ol><h2 id="攻击脚本"><a href="#攻击脚本" class="headerlink" title="攻击脚本"></a>攻击脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2 RSA 低解密指数攻击 e很大，使用wiener攻击求d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continued_fraction</span>(<span class="params">sub_res</span>):</span></span><br><span class="line">    numerator, denominator = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从sublist的后面往前循环</span></span><br><span class="line">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class="line">    <span class="keyword">return</span> denominator, numerator  <span class="comment"># 得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解每个渐进分数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_fraction</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    res = transform(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pq</span>(<span class="params">a, b, c</span>):</span>  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> sub_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line"></span><br><span class="line">n= </span><br><span class="line">e= </span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d=&quot;</span>, d)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RSA低解密指数攻击&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>PS基本工具</title>
    <link href="http://example.com/2022/01/21/PS%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7%E8%AE%B2%E8%A7%A3/"/>
    <id>http://example.com/2022/01/21/PS%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7%E8%AE%B2%E8%A7%A3/</id>
    <published>2022-01-21T05:59:01.000Z</published>
    <updated>2022-01-21T06:00:49.938Z</updated>
    
    <content type="html"><![CDATA[<p>啥也不是</p><span id="more"></span><ol><li>放大镜：放大图片，点击alt+拖动鼠标，缩小图片，ctrl+0：图片回到全部显示。</li><li>小手：拖动图片</li><li>图层属性面板：图层一层一层覆盖</li><li>混合模式：两个图片以特殊的形式混合在一起</li></ol><h2 id="图片裁切（需要特定尺寸）"><a href="#图片裁切（需要特定尺寸）" class="headerlink" title="图片裁切（需要特定尺寸）"></a>图片裁切（需要特定尺寸）</h2><ol><li><p>选框工具裁切：一般不使用，一般用此工具选中图片中的某一部分。</p></li><li><p>套索工具：一般不使用，一般用此工具扣出图片中的一些人或物。</p></li><li><p>裁切工具：裁切图片和画布。</p></li><li><p>导航栏选择图像找到图像大小，输入特定的像素值，作用：把图像变一个像素的尺寸，图像会出现压扁和拉升的现象。</p></li><li><p>导航栏选择图像找到画布大小，输入特定的像素值，作用：图像会出现裁剪的样式。并且可以拖动找到自己想要的位置。</p><p>优点：可以实现同比缩放，ctrl+T,按下shift键可以实现。按下alt实现以中心点进行缩放。</p></li></ol><h2 id="蒙板"><a href="#蒙板" class="headerlink" title="蒙板"></a>蒙板</h2><ol><li>ctrl+t：调节图像的大小和位置。</li><li>作用：可以实现去除一张照片中不需要的部分，并且不会破坏照片本身。</li><li>添加方法：选中图层，在右下角选择图层蒙板。</li><li>去除不需要的位置：是用画笔对不需要的部分进行擦除（可恢复）（黑透白不透）</li><li>流量：调节擦除程度。</li></ol><h2 id="校色"><a href="#校色" class="headerlink" title="校色"></a>校色</h2><ol><li>使用图像里的调整。（不建议使用，原因：调整后不便于返回修改）</li><li>曲线：调整亮暗对比度。</li><li>色彩平衡：调整图片的冷暖色调。</li><li>建议使用：选择右下角的创建新的填充和调整图层，使用这里的校色工具进行调整。</li></ol><h2 id="钢笔"><a href="#钢笔" class="headerlink" title="钢笔"></a>钢笔</h2><ol><li>可以绘制两种路径：直线和曲线。</li><li>作用：扣掉图片中的人或物。</li><li>移动锚点位置：按下ctrl键，鼠标移动锚点。</li><li>移动锚点一边的滑杆：按下alt键，鼠标选择一边的滑杆移动。</li><li>建立选区：右键钢笔绘制的封闭框，选择建立选取。</li><li>使用蒙版以保证不破坏图片。</li><li>精确扣图使用钢笔。</li></ol><h2 id="图像修改"><a href="#图像修改" class="headerlink" title="图像修改"></a>图像修改</h2><ol><li>修复画笔：修复污点并且很好的和周围融合。</li><li>仿制图章工具：完全复制所选部分。</li><li>修补工具：将一部分图像复制给另一部分。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;啥也不是&lt;/p&gt;</summary>
    
    
    
    <category term="PS" scheme="http://example.com/categories/PS/"/>
    
    
    <category term="PS" scheme="http://example.com/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>RSA共模攻击（m，n相同）</title>
    <link href="http://example.com/2022/01/21/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB%EF%BC%88m%EF%BC%8Cn%E7%9B%B8%E5%90%8C%EF%BC%89/"/>
    <id>http://example.com/2022/01/21/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB%EF%BC%88m%EF%BC%8Cn%E7%9B%B8%E5%90%8C%EF%BC%89/</id>
    <published>2022-01-21T04:17:05.000Z</published>
    <updated>2022-01-22T11:09:37.245Z</updated>
    
    <content type="html"><![CDATA[<p>RSA共模攻击，m，n相同，c，e不同。</p><span id="more"></span><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>对于m，n相同，有$c_1$、$c_2$,$e_1$、$e_2$。</p><p>首先$c_1$、$c_2$,$e_1$、$e_2$满足关系</p><script type="math/tex; mode=display">\begin{cases}        c_1\equiv m^{e_1}mod(n)        \\        c_2\equiv m^{e_2}mod(n)\end{cases}</script><ol><li><p>$e_1$、$e_2$互素</p><p>存在$s_1$、$s_2$满足</p><script type="math/tex; mode=display">e_1*s_1+e_2*s_2=1</script><p>所以有</p><script type="math/tex; mode=display">c_1^{s_1}*c_2^{s_2}\equiv (m^{e_1}mod(n))^{s_1}*(m^{e_2}mod(n))^{s_2}\equiv m^{e_1*s_1+e_2*s_2}\equiv m \quad mod(n)</script><p>所以</p><script type="math/tex; mode=display">m\equiv c_1^{s_1}*c_2^{s_2}mod(n)</script><p>因为$s_1$、$s_2$为一正一负，所以需要对负的取逆元，假设$s_1$为负,则 ${c_1}^{-1}$ 满足</p><script type="math/tex; mode=display">{c_1}^{-1}c_1\equiv1mod(n)</script><p>所以有</p><script type="math/tex; mode=display">m\equiv ({c_1}^{-1})^{-s_1}*{c_2}^{s_2}mod(n)</script></li><li><p>$e_1$、$e_2$不互素，且gcd($e_1$,$e_2$)=t</p><p>存在$s_1$、$s_2$满足</p><script type="math/tex; mode=display">e_1*s_1+e_2*s_2=t</script><p>所以有</p><script type="math/tex; mode=display">c_1^{s_1}*c_2^{s_2}\equiv (m^{e_1}mod(n))^{s_1}*(m^{e_2}mod(n))^{s_2}\equiv m^{e_1*s_1+e_2*s_2}\equiv m^t mod(n)</script><p>所以</p><script type="math/tex; mode=display">m^t\equiv c_1^{s_1}*c_2^{s_2}mod(n)</script><p>因为$s_1$、$s_2$为一正一负，所以需要对负的取逆元，假设$s_1$为负,则 ${c_1}^{-1}$ 满足</p><script type="math/tex; mode=display">{c_1}^{-1}c_1\equiv1mod(n)</script><p>所以有</p><script type="math/tex; mode=display">m^t\equiv ({c_1}^{-1})^{-s_1}*c_2^{s_2}mod(n)</script></li></ol><h2 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 RSA共模攻击 n，m相同，c，e不相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#gcd(e1,e2)=1</span></span><br><span class="line"><span class="comment">#使用欧几里得算法计算最大公约数，和s，t</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">e1,e2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> e1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (e2,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x = egcd(e2%e1,e1)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(e2//e1)*y,y)</span><br><span class="line">n=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line"></span><br><span class="line">s=egcd(e1,e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找负数求逆元</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1=-s1</span><br><span class="line">    c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2=-s2</span><br><span class="line">    c2=gmpy2.invert(c2,n)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1)*<span class="built_in">pow</span>(c2,s2))%n</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RSA共模攻击，m，n相同，c，e不同。&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>CTF小学生——RSA班wp1</title>
    <link href="http://example.com/2022/01/12/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp/"/>
    <id>http://example.com/2022/01/12/CTF%E5%B0%8F%E5%AD%A6%E7%94%9F%E2%80%94%E2%80%94RSA%E7%8F%ADwp/</id>
    <published>2022-01-12T09:02:27.000Z</published>
    <updated>2022-02-17T07:01:19.328Z</updated>
    
    <content type="html"><![CDATA[<p>CTF小学生——RSA班解题过程</p><span id="more"></span><p>题目：风二西_RSA1</p><p>e=1 (风二西原创题)</p><p>解答:打开看到e=1，m就是c，使用libnum库的n2s()函数直接求解得到flag</p><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">flag=<span class="number">56006392793403067781861231386277942050474101531963376999457063633948500765747587998496106575433840765</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(flag))</span><br></pre></td></tr></table></figure><p>注：libnum库一些函数介绍</p><ol><li>libnum.n2s() 整数转字符串</li><li>libnum.s2n() 字符串转整数</li><li>libnum.b2s() 二进制位串转字符串</li><li>libnum.s2b() 字符串转二进制位串</li><li>libnum.generate_prime(n) 生成n位素数</li><li>libnum.factorize(n) 分解质因数n</li></ol><hr><p>题目:风二西_RSA2 975 </p><p>还是e=1 风二西原创题</p><p>解答：e=1，这次给了三个n，对同一个m进行加密，所以m要比n要大，可以得到同余式</p><script type="math/tex; mode=display">\begin{cases} m\equiv c_1^emod(n_1)\\            m\equiv c_2^emod(n_2)\\            m\equiv c_3^emod(n_3)\end{cases}</script><p>解同余式得到m，通过libnum.n2s(m)得到flag</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n1= <span class="number">172774622114813683746188230007837413819</span></span><br><span class="line">c1= <span class="number">170260248491697016437095929037490480036</span></span><br><span class="line">n2= <span class="number">160333927436069409658483084503168246581</span></span><br><span class="line">c2= <span class="number">45134242975344810542214361639231372051</span></span><br><span class="line">n3= <span class="number">170109598387116572557100744899522621873</span></span><br><span class="line">c3= <span class="number">47903985600747367026642413789127948969</span></span><br><span class="line">M1 = n2*n3</span><br><span class="line">M2 = n1*n3</span><br><span class="line">M3 = n1*n2</span><br><span class="line">m = n1*n2*n3</span><br><span class="line">M1ni = gmpy2.invert(M1,n1)</span><br><span class="line">M2ni = gmpy2.invert(M2,n2)</span><br><span class="line">M3ni = gmpy2.invert(M3,n3)</span><br><span class="line">flag = (M1ni*M1*c1+M2ni*M2*c2+M3ni*M3*c3)%m</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">flag=<span class="number">56006392793428520954660428183473354430118021091291952136948688581395416086505962460430292111645161341</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(flag))</span><br></pre></td></tr></table></figure><hr><p>题目：风二西_RSA3 975</p><p>是同模？还是共模？ 风二西原创题</p><p>解答：发现是共模攻击，n相同，c、e不同，且e1,e2互素，直接套用脚本求解</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="comment">#gcd(e1,e2)=1</span></span><br><span class="line"><span class="comment">#使用欧几里得算法计算最大公约数，和s，t</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">e1,e2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> e1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (e2,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x = egcd(e2%e1,e1)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(e2//e1)*y,y)</span><br><span class="line">n=<span class="number">29143645421250041964610131519796316209374397204155469976436282970270223093227270116936148775043815634542786053957754648588547916685855943233747355087950255420084529208272959726798944771529812280211595246632324164318414568921620903228792312422949049251124675105357096001511900182384982136608469004475877350443767898973989583173128030434940886052792797816540787358610263798109517476404857884853737946851599020695228874374154464554424052641473818628619315542580958678324625251508687755281620720247997239232768548283841103391498016239630806481980671475372463330330690559668182431046684389707596830868072082755735808300723</span></span><br><span class="line">e1= <span class="number">2333</span></span><br><span class="line">e2= <span class="number">23333</span></span><br><span class="line">c1= <span class="number">28464542187422191031850220803592681443982634383785165404787481127746742239081112082691277387380864221897493018787897237288845518265099977907474953791840485909853466983639444091059228300562651089136949321590723345012238904080799669440783536285513938852463305681933753888253442824802846555416205812335548719095747051066829873263830078172121545700751405449738971567108453397818830862826958070177783517124845910659072272862984614381062761492904361633028713990053614106081540076229259722671415935974092569803776537579754503894924503109547447412708945156397515728781495017776632238192662716448961774725838090086512922104959</span></span><br><span class="line">c2= <span class="number">25460740614301054941307417174277347322525553796796196288752769907863955398765515335380778529183621484339197914989256662774198864351177654624197775903029703756861955442584045861986636864875901226135976736671991519278805887617112679731304236414795141091073965816301344099945916381853638867328898132344214266933361239131644854117821204868171505133539861191262265599453830009333580296852518159984059120727521818924305349230266951553997005351779068782851592785429670130975251007122036733544487495703754895368638401347707384114165405725474647288045480904543934563092673393523874294830739729422653819421294571780102207292072</span></span><br><span class="line"></span><br><span class="line">s=egcd(e1,e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找负数求逆元</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1=-s1</span><br><span class="line">    c1=gmpy2.invert(c1,n)</span><br><span class="line"><span class="keyword">if</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2=-s2</span><br><span class="line">    c2=gmpy2.invert(c2,n)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1)*<span class="built_in">pow</span>(c2,s2))%n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">m =<span class="number">56006392793403061952490523536016583124460187958714590455626182382537881626460510602357778657835299453</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure><hr><p>题目：风二西_RSA7 976</p><p>工具脚本一把梭吧</p><p>解答：打开题目是低解密指数攻击，使用脚本解密得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continued_fraction</span>(<span class="params">sub_res</span>):</span></span><br><span class="line">    numerator, denominator = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从sublist的后面往前循环</span></span><br><span class="line">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class="line">    <span class="keyword">return</span> denominator, numerator  <span class="comment"># 得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解每个渐进分数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_fraction</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    res = transform(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pq</span>(<span class="params">a, b, c</span>):</span>  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> sub_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n= <span class="number">76230002233243117494160925838103007078059987783012242668154928419914737829063294895922280964326704163760912076151634681903538211391318232043295054505369037037489356790665952040424073700340441976087746298068796807069622346676856605244662923296325332812844754859450419515772460413762564695491785275009170060931</span></span><br><span class="line">e= <span class="number">19252067118061066631831653736874168743759225404757996498452383337816071866700225650384181012362739758314516273574942119597579042209488383895276825193118297972030907899188520426741919737573230050112614350868516818112742663713344658825493377512886311960823584992531185444207705213109184076273376878524090762327</span></span><br><span class="line">c= <span class="number">51129364468759654610691969029018077135681286452403720342930701227318278867902499808039789577625318001225092301902887105131054762178225243088434961189430225241008880599986750881642671737591885881772112932433413661123951666955204365852817050308723133101090183352917490942744092495494108693783108146041173249096</span></span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">m = <span class="number">56006392793404066335162594342958753697724514638307721555579703515247366913832367671547128991134803325</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure><hr><p>题目：风二西_RSA11  976</p><p>很简单的</p><p>解答：e=3 很小，使用低加密指数攻击，直接使用开放</p><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c= <span class="number">175676150266627654394509074891404164566854171033140030366264579869316998382531731238646439305983889007988827572538127555289345112927153391354273822296560289724299704969505044786520464609064991216105190142528210147105407231359976850587913961569714117627302606370251386092433653181453744354380262673514341</span></span><br><span class="line">m = gmpy2.iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：RSA_5</p><p>解答:</p><ol><li>使用openssl解密 openssl rsa -pubin -in pubckey1.pem -text -modulus 得到公钥 n和e</li><li>使用yafu分解得到p和q</li><li>读取flag1.pem文件得到密文c</li></ol><p>代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag1.pem&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = <span class="built_in">int</span>(f.read().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">n = <span class="number">0xspan></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">154707169869912965572264038807085588160825389898605792084774698420524113924278063744211942790334520717545961407718606461114604633654138753720598358336593011214128451966613914165721695134758193524181137401802709098935179245573044474461382557698071520126327208903405426672668774245334192540031083738467279228573</span></span><br><span class="line">q = <span class="number">154707169869912965572264038807085588160825389898605792084774698420524113924278063744211942790334520717545961407718606461114604633654138753720598358336593011214128451966613914165721695134758193524181137401802709098935179245573044474461382557698071520126327208903405426672668774245334192540031083738467279227529</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><hr><p>题目：rsa_12</p><p>解答：使用中国剩余定理求得m^e次方；在对m开e次方得到flag</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n1= <span class="number">17252219271006504217652265353315644822689102990264622695769709059400124061303815961435216889436124568403595230367283469177657079450282677401376417062215262907612929047987828085558578625928693928880671915353617997183001765819850856038580986341451354677532575518429983180603767256598249850685593173010163922025509601326326321500794396556036639237902931276631659616154399922016651201757258733618622358585354871247473186946333948694594826747068676868873107272038233419801485049530755094873655667843995961470816804517358517607436960955104105230718119794284575683888642896061373529872181319831826417002365270413786886230051</span></span><br><span class="line">n2= <span class="number">19392925441119564341555603187441887561478389980762223332359001899590543508270070429654062355050348208292024600480329586395279855747079257790641213158649916066398059169788447789331043090129266878932663273082843414238406770932078873343241723699886063134727135260077063212826785200734480057973678585768855053011930755630200714822903690528979185570885528147643237687242400511057790185488304578078790856756920715781906997572283811891912799721107417543601482580382717235530747319855573633433655463698238396450160804967421072666570521835633096983265294367798652838134815267442249458052921576108382421808074197496756326651569</span></span><br><span class="line">n3= <span class="number">16308931821160738277381987335188301508935609331979902438602520050075201076202607797174570476508752749939535558232194093916143544677788076366822749055817956020216396168552177076772752147703927950913692270761747051591209445357878745137592704614863982995068341117660355411746655172287336173901923306626058276062979558685583245075792769514424287449989413646849923270337368271506480123292135149298907255291763788483970298044852870009792041207447026753646424275224352404748955511851564024075916958820790827323891618229420999340841099848014212559544340277261118686124000247691040332469447586013408096906429110903073529177959</span></span><br><span class="line">c1= <span class="number">9862674916042529918536092338186428078982165644848222161352523997087450888782685666699966847951244365280637841803438717743795168091292517068068919062777145241306310697080809891248377646719341230881649623908246452956514392532087121381507177426996878604461394499084196249530601094001617489710803912131948279913297986636209231828019500643894617602429551750854441781737312059554753531678468044053831648273296572848789992174657175515114338665837154883246900742720531354855559563140404249577415693939022593259289194459953438105757899587447271931995649255159342329359652305879885554769630544770966155000620489702683568172742</span></span><br><span class="line">c2= <span class="number">11681944755560676324959185187799099414481370223339263320227032572815322776036541246094706574111230437855451279755698238561172128989213481236089341690470560136591884018327949217955636371986098667096134214617286477749483182783065573382874881799002834245675144902527287434610910847735302841154506319451669009489558469224087072461557995913424041810554224864384732427620959534242904535632660788940451410731486496846273769609538396613198060913461220093973836108967904185914468061114191996582010088055074020730119033560498292937987199687933047535216255557403558690069800171880133754299157682045716215838413976578382030795387</span></span><br><span class="line">c3= <span class="number">12668278504770849369921196574913946259264733368388011806162184024969059726807829014394443240915036260802428499115569055027868892016678593665990881075365267878346964234838583098736850357277091593641798510490187797581111760056196425611939907216616878668062988351559417972184145303414105959155690055918434365061272003723017407148417783932381053632869804167234724945360916258465050598759067199479571813805864105608035898489711508922286844624373009203267737364854355266040795917980105237637939321394405488989345144898194063338461873834505409676538338655407786146050320466683048676780486336615260073541849747038981327813976</span></span><br><span class="line">n = n1*n2*n3</span><br><span class="line">M1 = n2*n3</span><br><span class="line">M2 = n1*n3</span><br><span class="line">M3 = n1*n2</span><br><span class="line">M1_ni = gmpy2.invert(M1,n1)</span><br><span class="line">M2_ni = gmpy2.invert(M2,n2)</span><br><span class="line">M3_ni = gmpy2.invert(M3,n3)</span><br><span class="line">m =(c1*M1*M1_ni+c2*M2*M2_ni+c3*M3*M3_ni)%n</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(m,i)[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(gmpy2.iroot(m,i)[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure><hr><p>题目：RSA_9</p><p>解答：就是将c换做m，d换做e来求解即可</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p= <span class="number">97368485043593006405417010779079380120093793034626963175677083523770994936525207940968193918786949567460392401775664093619173263261961563254058029894381986376275758006361044924787173495349206752585567053148516364028668638365676608691913705470536048404291284013185217624584284180593606281872606674303227862923</span></span><br><span class="line">q= <span class="number">174034507670751544663833619122758532253821916016434057019886746556436073565496931298817122456263338650062754783803599969233256462434713772953714031268092314238169815901012809393600325432808839406464715247202866205781781379919342815514475667193698142923567276511836660769097557234679842172400378371421781964289</span></span><br><span class="line">m= <span class="number">10713159978080595248303368136468725248428004219265383017568301839870142446158283601395319409739267941310957665427316430008931224971372871063315206268306110608326979812846886034642104794304853873192876460915559231227506777599442060327993342928268503696889652417983518056546140617858431621418835939458147783959307745523951841137415442238550765735249662192808694822637569812286855868419594276671181075389377949452992838748913612817680444419095179848524538089268826799430007066454995062821698762487766844583651126504070187331835027249508337718321126942529727464313184539455069391263828081876598132257030625297646910710698</span></span><br><span class="line">d= <span class="number">9390237469625625327767772772501860104758101441676147056413733378437848559772090449906444146313965320608216054116514082700525563243843771204901839503307479128967925438407562718344032952875123364816506810638856925864160725041981647121465162190807436028496569031178392890553177399355087553209625455734016456610191995005421761565733358070901800953003865665637614771105080265950575370421882124992956415586236776481116126106171771156040712750560153951276387711991194466653974368467861952058543035030816993478005980029315268610250448820942344432392048700822441849816775252185085593277697772013794833419946099360440772003135</span></span><br><span class="line">n= <span class="number">16945476357208644122981981769374646293926105553473297697614690692652601713322227208661975312188938407555360864148584038092323753063552504666101719934810973632634565975015494529491878727459181230406832788393966249955724078848021959836773296479882218413561668025756126880165471682246491275523240659976474618187166357040262223313242756132850124163812125138317620789358310094970897417863278091383242119765582782451173174886739833284579593252969063972226490849473760753219069834155364181062555776029449332377688052659981492134779226642225005427449494407806051665362319573826702559006783213306262376903229146869818573156747</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = gmpy2.invert(d,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(c)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF小学生——RSA班解题过程&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
</feed>
