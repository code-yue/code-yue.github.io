<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT 日志</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-26T08:05:13.218Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>继承-学习笔记</title>
    <link href="http://example.com/2021/08/26/%E7%BB%A7%E6%89%BF-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/26/%E7%BB%A7%E6%89%BF-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-26T08:02:38.000Z</published>
    <updated>2021-08-26T08:05:13.218Z</updated>
    
    <content type="html"><![CDATA[<p>继承——学习笔记。</p><span id="more"></span><ol><li>继承：更专用的类（派生类）继承更一般的类（基类）的数据和行为。</li><li>return a==b; 如果a与b的值相等返回true，否则返回false。</li><li>派生类从基类继承所有成员函数和数据成员，但如果继承的行为不合适，可以改变其实现。</li><li>派生类对象上可以调用基类的成员函数，但是<strong>不能访问</strong>基类的数据成员。</li><li>对值的变化使用单个类，对行为的变化使用继承。</li><li>使用<strong>初始化器列表</strong>调用基类构造函数，来对数据成员进行初始化。</li><li>在派生类中重写成员函数时，如果在写此成员函数中需要调用基类的该函数，需使用<strong>基类::函数</strong>的方法。</li><li>派生类的对象可作为基类对象存储在基类数组中，但是对象数组会将派生类下降为基类对象，并将其数据进行切割，保留基类数据；如需保留派生类对象的所有数据，可使用<strong>指针数组</strong>进行储存，因为指针是对象的起始地址，每个派生类对象都是基类对象的特例，因此派生类对象的起始地址就是基类对象的起始地址，另外对于派生类重写的成员函数，想要实现<strong>根据指针所指向的对象的实际类型来确定访问哪一个成员函数</strong>，需要在基类同名的那个成员函数的声明中加入保留字<strong>virtual</strong>，在派生类中那个成员函数前加入保留字virtual是一个比较好的习惯。注：只有派生类指针可以赋值给基类指针，而基类指针不能赋值给派生类指针。</li><li>由类的结构层次中的不同的类访问对象，应使用指针，因为指向各种对象的指针都具有相同的大小——即内存地址的大小——而对象本身可能具有不同的大小。</li><li>虚函数：对于函数声明前加入保留字virtual。</li><li>当调用虚函数时，编译器都会在运行时确定特定调用中隐式参数的类型，然后调用该对象的适当函数。</li><li>虚函数使程序<strong>易于扩展</strong>，就是基于同一个基类的所有派生类可以储存在同一个基类的指针数组中，使得在对此数组进行循环访问时可以根据特定对象来访问特定的函数。</li><li>多态性：一个数组中收集两类问题或几类问题的混合，都基于同一个基类。</li><li>多态集合中的对象具有一些共性，但不一定属于同一个类型，继承用于表达这种共性，而虚函数可以实现行为的变化。</li><li>当函数具有多态参数时（即可以属于基类的参数，也可以属于派生类的参数），参数变量尽量使用指针或引用，否则会发生切割问题。</li><li>如果想要在派生类中重写虚函数，可以在函数声明的某尾加入override保留字，这样如果由于不小心写错了函数，使得函数由重写变成了重载（尤其时忘掉了const保留字），编译器会报错，另外如果不是虚函数的话。编译器也会报错。</li><li>当使用一组类时，我们要将他们组织到继承层次结构中，这使我们可以以统一的方式处理不同类的对象。</li><li>UML类图：是面向对象系统建模中最常用的图，其基本元素是类和接口。</li><li>逐步形成继承层次结构：<ol><li>列出作为层次结构组成部分的类。</li><li>将各个类组织到继承层次结构当中（使用UML类图）。</li><li>确定公共职责。</li><li>确定在派生类中需要重写那些函数，并将需要重写的函数指定为虚函数。</li><li>定义每个派生类的公共接口。</li><li>确定数据成员。</li><li>实现构造函数和成员函数。</li><li>在空闲储存区上分配对象并处理它们。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;继承——学习笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="继承" scheme="http://example.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>类-学习笔记</title>
    <link href="http://example.com/2021/08/26/%E7%B1%BB-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/26/%E7%B1%BB-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-26T01:57:39.000Z</published>
    <updated>2021-08-26T02:01:21.214Z</updated>
    
    <content type="html"><![CDATA[<p>有关于类的一些需要注意的点，写下供以后进行复习。</p><span id="more"></span><ol><li>类中数据成员和成员函数定义所需要的所有头文件都要在头文件中声明，并且如果引用了标准库中的头文件，就要包含伪指令 using namespace std；。</li><li>只读函数在声明和定义的时候都需要加const关键字。</li><li>类中this是隐式参数的指针，不是隐式参数。</li><li>类中的成员函数包括 构造函数，析构函数，只读函数，只写函数和助手函数。</li><li>封装：隐藏实现细节的同时提供公共接口的过程。</li><li>骆驼命名法：名字以大写字母开头，名字中的每一个单词也已大写字母开头。</li><li>类的结尾要有分号。</li><li>重载：同一个函数名用于多个函数。</li><li>将平行向量转化为对象的向量。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;有关于类的一些需要注意的点，写下供以后进行复习。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="类" scheme="http://example.com/tags/%E7%B1%BB/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android_studio学习框架</title>
    <link href="http://example.com/2021/08/23/Android-studio%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2021/08/23/Android-studio%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/</id>
    <published>2021-08-23T07:47:23.000Z</published>
    <updated>2021-08-23T08:03:30.798Z</updated>
    
    <content type="html"><![CDATA[<p>​           终于学了如何开发一个app，并能实现开发一个小app的能力，为了整理一下这些天学的内容以及方便以后复习，就做了一个学习内容的框架。</p><span id="more"></span><h4 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h4><img src="/2021/08/23/Android-studio%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/1.png" class>]]></content>
    
    
    <summary type="html">&lt;p&gt;​           终于学了如何开发一个app，并能实现开发一个小app的能力，为了整理一下这些天学的内容以及方便以后复习，就做了一个学习内容的框架。&lt;/p&gt;</summary>
    
    
    
    <category term="Android studio" scheme="http://example.com/categories/Android-studio/"/>
    
    
    <category term="Android studio框架" scheme="http://example.com/tags/Android-studio%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之计数排序</title>
    <link href="http://example.com/2021/06/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-16T03:33:05.000Z</published>
    <updated>2021-06-16T03:53:34.346Z</updated>
    
    <content type="html"><![CDATA[<p>这里介绍第八种排序算法——计数排序</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。不基于比较来对元素进行排序。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>找出待排序的数组中最大num2和最小num1的元素。</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i-num1项。</li><li>反向填充目标数组：对数组C中的每一个元素(从后向前遍历)从该元素值到1进行遍历，将该元素在数组中的位置+num1填充在原始数组中。其中有一个记录位置的变量，起始大小等于原始数组大小减一，每填充一个值就使其减一，直到原始数组填充完毕。</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>最好、最坏、平均时间复杂度为：O(n+k) k是原始数组最大值减去最小值加一。</li><li>空间复杂度：O(k)</li><li>稳定性：稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">//记录最小值</span></span><br><span class="line">    <span class="keyword">int</span> num1=num[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//记录最大值</span></span><br><span class="line">    <span class="keyword">int</span> num2= num[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="keyword">sizeof</span> num/<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i]&lt;num1)</span><br><span class="line">        &#123;</span><br><span class="line">            num1=num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num[i]&gt;num2)</span><br><span class="line">        &#123;</span><br><span class="line">            num2=num[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对每一个出现的数进行计数</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">num3</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span> num/<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num3[num[i]-num1]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录排到的位置</span></span><br><span class="line">    <span class="keyword">int</span> num4=<span class="keyword">sizeof</span> num/<span class="number">4</span><span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//将数值从后向前填入数组中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num2-num1;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=num3[i]<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            num[num4]=i+num1;</span><br><span class="line">            num4--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span> num/<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里介绍第八种排序算法——计数排序&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之堆排序</title>
    <link href="http://example.com/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-15T15:44:23.000Z</published>
    <updated>2021-06-15T16:18:03.546Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了6中排序算法，这里介绍第七种——堆排序。</p><span id="more"></span><h3 id="堆和堆的性质"><a href="#堆和堆的性质" class="headerlink" title="堆和堆的性质"></a>堆和堆的性质</h3><ul><li><p>堆：堆是一种数据结构，一种叫做完全二叉树的数据结构。</p></li><li><p>堆的性质：</p><p>这里我们用到两种堆，其实也算是一种。</p><p>大顶堆：每个节点的值都大于或者等于它的左右子节点的值。</p><p>小顶堆：每个节点的值都小于或者等于它的左右子节点的值。</p><p>如下图所示，就是两种堆</p><img src="/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/1.jpg" class><p>如果我们把这种逻辑结构映射到数组中，就是下边这样</p><table><thead><tr><th align="center">9</th><th align="center">5</th><th align="center">8</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">7</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">4</td><td align="center">2</td><td align="center">8</td><td align="center">9</td><td align="center">7</td></tr></tbody></table></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>将数组中的最大值一个一个的交换到第一个位置，即num[0];然后在将其逐个放入数组的结尾，没放完一个，在程序中就使数组的大小减一，即堆的大小减一，直到数组中只剩下一个元素。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>将带排序的序列构造成一个大顶堆，根据大顶堆的性质，当前堆的根节点（堆顶）就是序列中最大的元素。</p></li><li><p>将堆顶元素和最后一个元素交换，然后将剩下的节点重新构造成一个大顶堆。</p></li><li><p>重复步骤2，如此反复，从第一次构建大顶堆开始，每一次构建，我们都能获得一个序列的最大值，然后把它放到大顶堆的尾部。最后，就得到一个有序的序列了。</p></li><li><p>将最大值放入堆顶的方法：</p><p>​        根据大顶堆的性质，每个节点的值都大于或者等于它的左右子节点的值。所以我们需要找到所有包含子节点的节点，也就是非叶子节点，然后调整他们的父子关系，非叶子节点遍历的顺序应该是从下往上，这比从上往下的顺序遍历次数少很多，因为，大顶堆的性质要求父节点的值要大于或者等于子节点的值，如果从上往下遍历，当某个节点即是父节点又是子节点并且它的子节点仍然有子节点的时候，因为子节点还没有遍历到，所以子节点不符合大顶堆性质，当子节点调整后，必然会影响其父节点需要二次调整。但是从下往上的方式不需要考虑父节点，因为当前节点调整完之后，当前节点必然比它的所有子节点都大，所以，只会影响到子节点二次调整。相比之下，从下往上的遍历方式比从上往下的方式少了父节点的二次调整。</p></li><li><p>几个关键值</p><ul><li>树的层数，即堆的层数。</li><li>倒数第二层非叶子节点数。</li><li>剩下未排序列的数组大小。</li></ul></li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>最好、最坏及平均时间复杂度：nlogn  以2为底</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/2.gif" class><img src="/2021/06/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/3.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明堆排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dui_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> num1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]= &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">//数组大小</span></span><br><span class="line">    <span class="keyword">int</span> size1 = <span class="keyword">sizeof</span> num/<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//每进入一次函数就将一个最大的值放入数列末尾</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size1; i&gt;=<span class="number">2</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dui_sort</span>(num,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dui_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> num1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//记录树的层数，从第0层开始</span></span><br><span class="line">    <span class="keyword">int</span> num2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num3=num1;</span><br><span class="line">    <span class="keyword">while</span>(num3&gt;=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num3=num3/<span class="number">2</span>;</span><br><span class="line">        num2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//记录倒数第二层非叶子节点的个数</span></span><br><span class="line">    <span class="keyword">int</span> num4=(num1-<span class="built_in">pow</span>(<span class="number">2</span>,num2))/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//记录要排到的位置数</span></span><br><span class="line">    <span class="keyword">int</span> num5=num1<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num2<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==num2<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num4; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> num6=<span class="built_in">pow</span>(<span class="number">2</span>,i)+j<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>]&amp;&amp;num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>&lt;num1)<span class="comment">//可能只有一个子叶所以需要判断是否越界</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="built_in">pow</span>(<span class="number">2</span>,i); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> num6=<span class="built_in">pow</span>(<span class="number">2</span>,i)+j<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(num[num6]&lt;num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(num[num6],num[num6*<span class="number">2</span>+<span class="number">1</span>+<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(num[num5],num[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面介绍了6中排序算法，这里介绍第七种——堆排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之归并排序</title>
    <link href="http://example.com/2021/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-13T12:40:59.000Z</published>
    <updated>2021-06-13T13:52:00.268Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法的10大排序前面已经介绍了5个，下来介绍第6中排序算法——归并排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>归并排序是创建在归并操作上的一种有效的排序算法。算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。归并排序思路简单，速度仅次于快速排序，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的数列。</p><p>归并排序是用分治思想，分治模式在每一层递归上有三个步骤：</p><ul><li>分解：将n个元素分成个含n/2个元素的子序列。</li><li>解决：用合并排序法对两个子序列递归的排序。</li><li>合并：合并两个已排序的子序列已得到排序结果。</li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>进入归并排序函数merge-sort(int num[],int low,int high,int mid),其中low是数组起始值，high是数组最大值，mid是数组大小除以2。</p></li><li><p>设置递归开始条件，即下代码的if(low&lt;high)。</p></li><li><p>实行分而治之的思想，将数组一分为二，分别执行merge-sort函数，直到剩下一个数，不可再分。</p></li><li><p>对之前一份为二的数组进行化二为一进行排序合并。</p><p>排序合并方法：</p><ul><li>定义一个向量。</li><li>将两个数组从小到大依次添加在向量后面。</li><li>将向量的值赋给原始数组的指定位置。</li></ul></li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>时间复杂度：不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )，以2为底。</li><li>空间复杂度：O(n)。</li><li>稳定性：稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span> mid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]= &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//进入归并排序函数,其中4为数组大小除以2</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(num,<span class="number">0</span>,<span class="number">9</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//打印排序好的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high,<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//不满足if下的条件递归开始</span></span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">merge_sort</span>(num,low,mid,(low+mid)/<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">merge_sort</span>(num,mid+<span class="number">1</span>,high,(mid+<span class="number">1</span>+high)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> num1 = low;</span><br><span class="line">        <span class="keyword">int</span> num2 = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//将数组中从low到high的数进行排序并存放在num4的向量之中</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; num4;</span><br><span class="line">        <span class="keyword">while</span>(num1&lt;=mid&amp;&amp;num2&lt;=high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[num1]&lt;=num[num2])</span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[num1]);</span><br><span class="line">                num1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[num2]);</span><br><span class="line">                num2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1&gt;mid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=num2; i&lt;=high; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=num1; i&lt;=mid; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                num4.<span class="built_in">push_back</span>(num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将从low到high的数排序完存入数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=low; i&lt;=high; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i]=num4[i-low];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;排序算法的10大排序前面已经介绍了5个，下来介绍第6中排序算法——归并排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之希尔排序</title>
    <link href="http://example.com/2021/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-12T04:40:33.000Z</published>
    <updated>2021-06-12T05:27:48.540Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们介绍了插入排序：从后向前与每个相邻元素进行比较和交换，下面来介绍一下插入排序的改进版——希尔排序：实现不相邻的两个元素进行比较和交换，但实质上也是插入排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>插入排序效率低下是因为其移动元素每次只能移动一位，当排序元素的规模较大时，需要将元素一位一位地从一端移动到另一端。而如果我们能够让元素一次性地移动到较远的位置上，这样无疑就可以避免多次一位一位地移动操作。希尔排序正是基于此原理来优化、提高插入排序的效率。通过指定步长step，将原数组分为step个互相独立子数组，然后通过<strong>插入排序</strong>对这些子数组分别进行排序(即分组排序)，这时我们称其为step有序数组。当step很大时，我们就可以将元素一次性移动到很远的位置上，为下一次较小的step有序创造便利；不断缩小步长step，重复上述过程建立step有序数组，达到局部有序的目的。当step最终为1做最后一次step有序时，就是我们平常所熟悉的插入排序了，由于该数组已经多次被较大的step进行分组排序了，此时只需要较少次数的元素移动就可以实现整个数组全局有序</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>定义一个增量gap大小就等于数组的大小。</li><li>进入一个while循环，条件是gap&gt;1,作用是当排序结束时跳出循环。</li><li>定义一个增量递减的倍数n，可以是小于数组大小的任意值，一般是2，3，4，并执行：gap=gap/n+1；注意这里如果n&gt;2的话，要在后加一，如：gap=gap/n+1，这是为了防止gap为0而不能进入最后一次插入排序;但是如果n=2的话，一定不能加一，否则可能会陷入无限循环。</li><li>通过增量将数组划分为若干个小数组。</li><li>对每一个小数组进行插入排序。</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>时间复杂度：希尔排序的时间复杂度与其增量gap有关，平均时间复杂度为：O(n*(logn)^2),以2为底。</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//定义增量</span></span><br><span class="line">    <span class="keyword">int</span> gap=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//第一个循环:控制增量的，直到增量小于等于1时说明排序已经完成，跳出即可</span></span><br><span class="line">    <span class="keyword">while</span>(gap&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gap=gap/<span class="number">3</span>+<span class="number">1</span>;<span class="comment">//10是数组的长度，2是每次增量减小的倍数，+1是为了防止最后增量为0而无法进行插入排序，但当增量减小的倍数为2时不能加1</span></span><br><span class="line">        <span class="comment">//第二个循环：通过增量将数组进行分组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gap&amp;&amp;i+gap&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第三和第四个循环：对每一组进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+gap;j&lt;<span class="number">10</span>;j+=gap)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = num[j];</span><br><span class="line">                <span class="keyword">int</span> k;</span><br><span class="line">                <span class="keyword">for</span>(k=j-gap;k&gt;=i;k=k-gap)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(num[k]&gt;temp)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num[k+gap]=num[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                num[k+gap]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面我们介绍了插入排序：从后向前与每个相邻元素进行比较和交换，下面来介绍一下插入排序的改进版——希尔排序：实现不相邻的两个元素进行比较和交换，但实质上也是插入排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之插入排序</title>
    <link href="http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-11T14:46:27.000Z</published>
    <updated>2021-06-11T15:06:02.385Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了冒泡排序，下面来介绍冒泡排序的姊妹排序——插入排序，虽然他们的原理不同，但是特性上面是完全相同的。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，直到找到相应的位置插入。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p></li><li><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p></li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><p>时间复杂度</p><ul><li>最好情况：数组初始状态是正序的，此时的时间复杂度为O(n)。</li><li>最坏情况: 文件的初始状态是逆序的，此时的时间复杂度为O(n^2)。</li><li>综上：插入排序总的时间复杂度为 O(n^2)。</li></ul></li><li><p>空间复杂度：无论什么情况都是O(1)。</p></li><li><p>稳定性: 稳定</p></li></ol><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序的数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">//逐个元素插入元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = num[i];<span class="comment">//存储要插入元素的值</span></span><br><span class="line">        <span class="keyword">int</span> k=i<span class="number">-1</span>;<span class="comment">//记录插入元素的索引</span></span><br><span class="line">        <span class="keyword">while</span>(k&gt;=<span class="number">0</span>&amp;&amp;num[k]&gt;temp)</span><br><span class="line">        &#123;</span><br><span class="line">            num[k+<span class="number">1</span>]=num[k];</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入元素</span></span><br><span class="line">        num[k+<span class="number">1</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面介绍了冒泡排序，下面来介绍冒泡排序的姊妹排序——插入排序，虽然他们的原理不同，但是特性上面是完全相同的。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之选择排序</title>
    <link href="http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-11T13:48:53.000Z</published>
    <updated>2021-06-12T05:24:55.828Z</updated>
    
    <content type="html"><![CDATA[<p>选择排序是排序算法中最简单粗暴的一种，之前写过冒泡排序，而选择排序与冒泡排序有相似之处，但时间复杂度要比冒泡排序还要高一些，下来介绍选择排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每次找到数组中的最大值(从大到小排)或最小值(从小到大排)放在前面。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>时间复杂度：</p><ul><li>最好情况：O(n^2)</li><li>最坏情况：O(n^2)</li><li>平均情况：O(n^2)</li></ul></li><li><p>空间复杂度：O(1)</p></li><li><p>稳定性：稳定</p></li></ul><h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><img src="/2021/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//待排序的数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=i;<span class="comment">//标记最小元素</span></span><br><span class="line">        <span class="comment">//找到最小元素索引</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[temp]&gt;num[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将最小值放入数组最左边</span></span><br><span class="line">        <span class="built_in">swap</span>(num[i],num[temp]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;选择排序是排序算法中最简单粗暴的一种，之前写过冒泡排序，而选择排序与冒泡排序有相似之处，但时间复杂度要比冒泡排序还要高一些，下来介绍选择排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之快速排序</title>
    <link href="http://example.com/2021/06/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-10T05:38:49.000Z</published>
    <updated>2021-06-10T06:18:14.187Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了冒泡排序，其是交换排序的一种，而快速排序是另一种交换排序，下就来介绍快速排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>设置两个变量 low、high，排序开始时：low=0，high=size-1(size为数组的大小)。</li><li>整个数组找基准正确位置，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面，具体步骤如下：<ul><li>默认数组的第一个数为基准数据，赋值给temp，即temp=num[low]。</li><li>因为默认数组的第一个数为基准，所以从后面开始向前搜索（high–-），找到第一个小于key的num[high]，就将 num[high] 赋给 num[low]，即 num[low] = num[high]，然后执行low++,break;。（循环条件是 low!=high）</li><li>此时从前面开始向后搜索（low++），找到第一个大于temp的num[low]，就将 num[low] 赋给 num[high]，即 num[high] = num[low]。,然后执行high++,break;（循环条件是 low!=high）</li><li>循环 2-3 步骤，直到 low=high，该位置就是基准位置。</li><li>把基准数据赋给当前位置。</li></ul></li><li>第一趟找到的基准位置，作为下一趟的分界点。</li><li>递归调用（quick_sort）对分界点前和分界点后的子数组排序，重复2.2、2.3、2.4的步骤。</li><li>最终就会得到排序好的数组。</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><p>时间复杂度</p><ul><li><p>最好情况：每一次将待排数组划分为两个相等的部分（多一少一也算相等），需要logn次划分，此时时间复杂度为 O(nlogn)(其中log以2为底)。</p></li><li><p>最坏情况：每次划分只能减少一个元素，快排就相当于是冒泡排序了，需要n-1次划分，此时时间复杂度为O(n^2)。</p></li><li><p>平均时间复杂度为：O(nlogn)(其中log以2为底)。</p></li></ul></li><li><p>空间复杂度</p><p>O(nlogn)(其中log以2为底)。</p></li><li><p>稳定性：不稳定。</p></li></ol><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明快排函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个要排序的数组</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//调用快排的函数</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(num,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="comment">//打印排序之后的结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义快排函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> num[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="comment">//将基准元素存储在temp中</span></span><br><span class="line">    temp = num[low];</span><br><span class="line">    <span class="comment">//将low和high的值赋值给i,j,因为马上的递归函数需要用到low和high</span></span><br><span class="line">    <span class="keyword">int</span> i=low;</span><br><span class="line">    <span class="keyword">int</span> j= high;</span><br><span class="line">    <span class="comment">//进入循环直到i&lt;j时跳出循环,递归结束</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//进入循环直到i=j时跳出循环，代表一个基准值放置在正确的位置</span></span><br><span class="line">        <span class="keyword">while</span>(i!=j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//进入循环直到有一个数与基准数相比相对位置不对应跳出循环</span></span><br><span class="line">            <span class="keyword">while</span>(i!=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[j]&lt;temp)</span><br><span class="line">                &#123;</span><br><span class="line">                    num[i]=num[j];</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进入循环，前一个循环从后往前找，这个循环从前向后找</span></span><br><span class="line">            <span class="keyword">while</span>(i!=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[i]&gt;temp)</span><br><span class="line">                &#123;</span><br><span class="line">                    num[j]=num[i];</span><br><span class="line">                    j--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将基准元素放入指定位置</span></span><br><span class="line">        num[i]=temp;</span><br><span class="line">        <span class="comment">//进入递归，直到所有元素都排列好</span></span><br><span class="line">        <span class="built_in">quick_sort</span>(num,low,i<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">quick_sort</span>(num,j+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面介绍了冒泡排序，其是交换排序的一种，而快速排序是另一种交换排序，下就来介绍快速排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之冒泡排序</title>
    <link href="http://example.com/2021/06/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/06/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
    <published>2021-06-09T06:28:48.000Z</published>
    <updated>2021-06-11T15:05:35.558Z</updated>
    
    <content type="html"><![CDATA[<p>在C++中我们经常会遇到对一组数进行排序，对于排序算法大概可分10种，这里介绍其中最简单的一种——冒泡排序。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>它走访要排序的元素列，依次比较相邻两个元素的大小，判断是否符合你所想要的规律(从大到小或从小到大)，若符合，则不改变它们的位置，继续寻找下一组，若不符合，则交换两个数的位置，继续判断下一组，直到最大值或最小值出现在数组末尾，在从头开始，将第二大或第二小的数放置末尾，直到数组排序完成。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><p>时间复杂度</p><ul><li>最好情况：数组初始状态是正序的，一趟扫描完即可完成排序，所需要比较次数C和需要交换次数M均达到最小值 Cmin=n-1;Mmin=0; 此时的时间复杂度为O(n)。</li><li>最坏情况: 文件的初始状态是逆序的，需要n-1趟扫描才能完成排序，每一趟扫描需要n-i次比较，每次比较之后都需要进行交换(需要执行3次操作)，此时的比较次数和需要移动的次数均达到最大值 Cmax=(n-1)n/2~~O(n^2);  Mmax= 3(n-1)n/2 ~~O(n^2)。</li><li>综上：冒泡排序总的时间复杂度为 O(n^2)。</li></ul></li><li><p>空间复杂度</p><ul><li>最好情况：数组初始状态是正序的，不需要交换元素，就不需要临时变量，空间复杂度为：0。</li><li>最坏情况：开始数组顺序为逆序的，每一次比较都会交换元素，空间复杂度为：O(n)。</li><li>综上：冒泡排序的平均空间复杂度为O(1)。</li></ul></li><li><p>稳定性: </p><p>因为若相邻两个元素相同，不会交换位置，所以相同的元素的相对位置不会发生改变，所以冒泡排序是稳定的。</p></li><li><p>相关概念说明</p><ul><li><p>时间复杂度</p><p>对序列数据的总操作次数，反映当n变化时，操作次数呈现什么规律。</p></li><li><p>空间复杂度</p><p>是对一个算法在运行过程中临时占用的存储空间大小的度量。</p></li><li><p>稳定性</p><p>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p><p>不稳定：如果a原本在b前面，而a=b，排序之后a可能会出现在b的后面。</p></li></ul></li></ol><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><img src="/2021/06/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/1.gif" class><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>]=&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>&#125;;<span class="comment">//待排序的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//若提前排好了直接跳出</span></span><br><span class="line">        <span class="keyword">int</span> num1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[j]&gt;num[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(num[j],num[j+<span class="number">1</span>]);</span><br><span class="line">                num1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印排好的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num[i]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在C++中我们经常会遇到对一组数进行排序，对于排序算法大概可分10种，这里介绍其中最简单的一种——冒泡排序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BMP格式图像文件的处理</title>
    <link href="http://example.com/2021/06/08/BMP%E6%A0%BC%E5%BC%8F%E5%9B%BE%E5%83%8F%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2021/06/08/BMP%E6%A0%BC%E5%BC%8F%E5%9B%BE%E5%83%8F%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2021-06-08T01:53:33.000Z</published>
    <updated>2021-06-08T03:29:35.673Z</updated>
    
    <content type="html"><![CDATA[<p>与png和jpeg格式不同，BMP格式非常简单，因为它不使用数据压缩，因此BMP文件(二进制文件）很大，现实中不常用到，不过，图像编译器可将任何图像转换为BMP格式。下来介绍用于编辑BMP格式图像文件的程序。</p><span id="more"></span><h3 id="BMP格式"><a href="#BMP格式" class="headerlink" title="BMP格式"></a>BMP格式</h3><p>BMP格式有不同的版本，我们将介绍最简单和最常用的版本，有时称之为24位真彩色格式。在这种格式中，每个像素表示为三个字节的序列，每个字节分别表示蓝色、绿色和红色值。</p><h3 id="BMP格式文件的部分数据项"><a href="#BMP格式文件的部分数据项" class="headerlink" title="BMP格式文件的部分数据项"></a>BMP格式文件的部分数据项</h3><p>位置 2 ：此文件的大小，以字节为单位。</p><p>位置 10：从图像数据起始处的偏移量。</p><p>位置18：图片宽度(以像素为单位)。</p><p>位置22 ：图片高度(以像素为单位)。</p><p>举例：</p><p>fstream file;</p><p>//以二进制格式打开文件</p><p>file.open(filename,ios::in|ios::out|ios::binary);</p><p>//get_int函数</p><p>int get_int(fstream&amp; stream,int offset)<br>{<br>    stream.seekg(offset);<br>    int result = 0;<br>    int base = 1;<br>    for(int i=0;i&lt;4;i++)<br>    {<br>        result = result +stream.get()*base;<br>        base = base*256;<br>    }<br>    return result;<br>}</p><p>若要获取图像的大小</p><p>int file_size = get_int(file,2);</p><p>图像数据起始处的偏移量</p><p>int start_size = get_int(stream,10);</p><p>图像宽度</p><p>int width = get_int(stream,18);</p><h3 id="BMP格式图像数据的存储形式"><a href="#BMP格式图像数据的存储形式" class="headerlink" title="BMP格式图像数据的存储形式"></a>BMP格式图像数据的存储形式</h3><p>图像以一系列像素行的形式存储，从图像最底下一行的像素开始，每个像素行包含一系列蓝色、绿色、红色三元组。行的末尾用额外的字节填充，以便每行中的字节数可被4整除。例如：如果一行仅由三个像素组成，一个青色、一个红色、一个灰色，则改行的编码为：</p><p>​    255 255 0 0 0 255 128 128 128 x y z</p><p>其中x y z 是填充字节，是改行长度达到12，为4的倍数。</p><p>格式展示：</p><img src="/2021/06/08/BMP%E6%A0%BC%E5%BC%8F%E5%9B%BE%E5%83%8F%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86/1.jpg" class><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>将BMP图像文件替换为负片，即白色变为黑色，青色变为红色，以此类推。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数一: 通过形成负片来处理像素,其中参数blue、green、red为像素的蓝色、绿色、红色通道值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp; blue,<span class="keyword">int</span>&amp; green,<span class="keyword">int</span>&amp; red)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    blue = <span class="number">255</span> - blue;</span><br><span class="line">    green = <span class="number">255</span>- green;</span><br><span class="line">    red = <span class="number">255</span> - red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数二：从二进制流中获取一个整数（即图像的大小，宽度，高度等），其中参数stream为输入流，offset为带读取整数的偏移地址</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_int</span><span class="params">(fstream&amp; stream,<span class="keyword">int</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stream.<span class="built_in">seekg</span>(offset);</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result = result +stream.<span class="built_in">get</span>()*base;</span><br><span class="line">        base = base*<span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个格式为BMP的图像文件：&quot;</span>;</span><br><span class="line">    string filename;</span><br><span class="line">    cin&gt;&gt; filename;</span><br><span class="line"></span><br><span class="line">    fstream file;</span><br><span class="line">    <span class="comment">//以二进制文件格式打开</span></span><br><span class="line">    file.<span class="built_in">open</span>(filename,ios::in|ios::out|ios::binary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图像大小</span></span><br><span class="line">    <span class="keyword">int</span> file_size = <span class="built_in">get_int</span>(file,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图像起始处的偏移量</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="built_in">get_int</span>(file,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图片宽度</span></span><br><span class="line">    <span class="keyword">int</span> width = <span class="built_in">get_int</span>(file,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图片高度</span></span><br><span class="line">    <span class="keyword">int</span> height = <span class="built_in">get_int</span>(file,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扫描各行，必须占用4个字节的整数倍</span></span><br><span class="line">    <span class="keyword">int</span> scanline_size = width*<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> padding = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(scanline_size%<span class="number">4</span>!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        padding = <span class="number">4</span>-scanline_size % <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(file_size != start + (scanline_size+padding)*height)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;图像内部格式不符&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pos = start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;height;i++)<span class="comment">//对每个扫描行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;width;j++)<span class="comment">//对每个像素</span></span><br><span class="line">        &#123;</span><br><span class="line">            file.<span class="built_in">seekg</span>(pos);<span class="comment">//去下一个像素</span></span><br><span class="line">            <span class="keyword">int</span> blue = file.<span class="built_in">get</span>();<span class="comment">//读取像素</span></span><br><span class="line">            <span class="keyword">int</span> green = file.<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">int</span> red = file.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">process</span>(blue,green,red);<span class="comment">//处理像素</span></span><br><span class="line"></span><br><span class="line">            file.<span class="built_in">seekp</span>(pos);<span class="comment">//回到像素起始位置</span></span><br><span class="line">            file.<span class="built_in">put</span>(blue);<span class="comment">//读取像素</span></span><br><span class="line">            file.<span class="built_in">put</span>(green);</span><br><span class="line">            file.<span class="built_in">put</span>(red);</span><br><span class="line">            pos= pos+<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        file.<span class="built_in">seekg</span>(padding,ios::cur);<span class="comment">//跳过填充字段</span></span><br><span class="line">        pos = pos +padding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;与png和jpeg格式不同，BMP格式非常简单，因为它不使用数据压缩，因此BMP文件(二进制文件）很大，现实中不常用到，不过，图像编译器可将任何图像转换为BMP格式。下来介绍用于编辑BMP格式图像文件的程序。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++_picture" scheme="http://example.com/tags/C-picture/"/>
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>文件的随机访问</title>
    <link href="http://example.com/2021/06/07/%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2021/06/07/%E6%96%87%E4%BB%B6%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE/</id>
    <published>2021-06-07T08:51:21.000Z</published>
    <updated>2021-06-07T14:07:21.243Z</updated>
    
    <content type="html"><![CDATA[<p>前面已经掌握了C++的文件输入输出流，但前面我们的输入方式为顺序访问，下来介绍如何实现文件的随机读写。</p><span id="more"></span><h3 id="顺序访问与随机访问"><a href="#顺序访问与随机访问" class="headerlink" title="顺序访问与随机访问"></a>顺序访问与随机访问</h3><ul><li><h4 id="顺序访问"><a href="#顺序访问" class="headerlink" title="顺序访问"></a>顺序访问</h4><p>从文件中依次读取一个数据项或者向文件中依次写入一个数据项，没有向前或者向后跳过数据项，这种访问模式称为顺序访问。</p></li><li><h4 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h4><p>通过文件指针指定访问文件中的特定项，而无须首先读取之前的所有项，这种访问模式称为随机访问。</p><p>注：随机访问并没有任何的”随机性”——该术语只是意味着可以读取和修改存储于文件中任何位置的任何项。</p></li><li><h4 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h4><p>在文件操作中有一个文件指针，用来指明当前应进行读写的位置，没有具体变量。</p></li></ul><h3 id="随机访问有关的成员函数"><a href="#随机访问有关的成员函数" class="headerlink" title="随机访问有关的成员函数"></a>随机访问有关的成员函数</h3><ol start="2"><li>tellg() : 返回输入文件指针的当前位置。</li><li>seekg(文件中的位置) ：将输入文件中指针移到指定的位置。</li><li>seekg(位移量，参照位置) : 以参照位置为基础移动若干字节(文件的一个空格相当于一个字节)。</li><li>tellp() : 返回输出文件指针的当前位置。</li><li>seekp(文件中的位置) ：将输出文件中指针移动到指定的位置。</li><li>seekp(位移量，参照位置) : 以参照位置为基础移动若干字节。</li></ol><p>注：对于上面的函数均是通过点运算符实现如( file.tellg() )，其中”文件中的位置”和”位移量”为 long 型参数，以字节为单位。”参照位置”可以是下面三者之一：</p><ol><li> ios::beg 文件开头</li><li>ios::cur 指向输入或输出的当前位置</li><li>ios::end 文件某尾</li></ol><p>比如：</p><ul><li>file.seekg(3)  指针移动到第三个字节的位置。</li><li>file.seekg(-3,ios::cur)  指针从当前位置向前移动三个字节。</li><li>file.seekg(3,ios::cur)   指针从当前位置向后移动三个字节。</li></ul><p>其他几个成员函数未举例，可根据以上例子自行体会。</p><p>目前文件的随机访问的基础知识已介绍完，不过可能会有一种感觉：感觉其很有用，知识也都掌握了，但是其有什么意义呢？怎么知道我想要的数据在文件中的位置，如果有这种感觉，下面的内容可能会对你有帮助。</p><h3 id="索引-随机访问"><a href="#索引-随机访问" class="headerlink" title="索引+随机访问"></a>索引+随机访问</h3><ul><li><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li>将数据和偏移量(相对于文件开头)一对一建立索引。</li><li>将索引文件导入到内存中(数组或向量)。</li><li>如果想要查找某条数据，先从索引中找到对应的偏移量然后在从数据文件中取出即可。</li></ol></li><li><h4 id="优点-相比于顺序访问"><a href="#优点-相比于顺序访问" class="headerlink" title="优点(相比于顺序访问)"></a>优点(相比于顺序访问)</h4><ol><li>空间优化：索引文件比数据文件小的多。</li><li>时间优化：将数据文件内容读入到内存中就需要占用很大的内存。</li></ol></li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream in_file;</span><br><span class="line">    in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">    string letter1;</span><br><span class="line">    in_file &gt;&gt; letter1;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; letter1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们获取文件当前位置</span></span><br><span class="line">    <span class="keyword">long</span> num1=in_file.<span class="built_in">tellg</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回到文件开头</span></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    in_file.<span class="built_in">seekg</span>(<span class="number">0</span>,ios::beg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    <span class="comment">//in_file.seekg(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    <span class="comment">//in_file.seekg(-num1,ios::cur);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以逐个测试一下,看看letter1和letter2是否相同：</span></span><br><span class="line">    string letter2;</span><br><span class="line">    in_file &gt;&gt; letter2;</span><br><span class="line">    cout &lt;&lt; letter2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ofstream out_file;</span><br><span class="line">    out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    string letter3=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    out_file &lt;&lt; letter3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们获取文件的当前位置</span></span><br><span class="line">    <span class="keyword">long</span> num2=out_file.<span class="built_in">tellp</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回到文件开头</span></span><br><span class="line">    <span class="comment">//法一:</span></span><br><span class="line">    out_file.<span class="built_in">seekp</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    <span class="comment">//out_file.seekp(0,ios::beg);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    <span class="comment">//out_file.seekp(-num2,ios::cur);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//同样可以逐个测试一下，发现第二次输出letter3完全覆盖了第一次的输出</span></span><br><span class="line">    out_file &lt;&lt; letter3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下是利用索引+随机访问</span></span><br><span class="line">    <span class="comment">//打开数据文件</span></span><br><span class="line">    ifstream input2;</span><br><span class="line">    input2.<span class="built_in">open</span>(<span class="string">&quot;input2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开索引文件</span></span><br><span class="line">    ifstream index;</span><br><span class="line">    index.<span class="built_in">open</span>(<span class="string">&quot;index.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">long</span>&gt; num3;<span class="comment">//存储每一个数据相对于文件开头的起始位置</span></span><br><span class="line">    num3.<span class="built_in">push_back</span>(<span class="number">0</span>);<span class="comment">//给个初始量，使得索引以1开始</span></span><br><span class="line">    <span class="keyword">long</span> num4;</span><br><span class="line">    <span class="keyword">while</span>(index&gt;&gt;num4)</span><br><span class="line">    &#123;</span><br><span class="line">        num3.<span class="built_in">push_back</span>(num4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时我想要得到文件的第二个数据</span></span><br><span class="line">    input2.<span class="built_in">seekg</span>(num3[<span class="number">2</span>],ios::beg);</span><br><span class="line">    string letter4;</span><br><span class="line">    input2 &gt;&gt; letter4;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里我定义第二个数据为love，你也可以自定义，下输出测试一下</span></span><br><span class="line">    cout &lt;&lt; letter4&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面已经掌握了C++的文件输入输出流，但前面我们的输入方式为顺序访问，下来介绍如何实现文件的随机读写。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>文件加密之凯撒密码</title>
    <link href="http://example.com/2021/06/06/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E4%B9%8B%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/"/>
    <id>http://example.com/2021/06/06/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E4%B9%8B%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/</id>
    <published>2021-06-06T07:09:09.000Z</published>
    <updated>2021-06-06T08:40:33.065Z</updated>
    
    <content type="html"><![CDATA[<p>在读此篇文章时相信大家已经掌握了C++中的文件输入输出流，下来介绍利用命令行参数实现对文件的加密，本加密使用凯撒密码。</p><span id="more"></span><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul><li><h4 id="什么是命令行参数"><a href="#什么是命令行参数" class="headerlink" title="什么是命令行参数"></a>什么是命令行参数</h4><p>根据所使用的系统和C++的开发环境，有不同启动程序的方法。例如：通过在编译器环境中选择“运行”，单击图标，或在shell命令窗口中提示符出键入程序名。对于后一种方法称为“从命令行调用程序”，此种方法可以在程序名后面添加一些其他的参数，这些参数就被叫做命令行参数。</p><p>例如，使用如下命令行启动程序：</p><p>prog -v input.txt</p><p>其中程序名就是prog，然后程序会接受两个命令行参数“-v” 和 “input.txt” 。</p></li><li><h4 id="命令行参数何去何从"><a href="#命令行参数何去何从" class="headerlink" title="命令行参数何去何从"></a>命令行参数何去何从</h4><p>在使用命令行参数的时候，我们的主函数的定义就与以往有些不同，如下：</p><p>int  main(int argc,char* argv[])</p><p>{</p><p>​    ······</p><p>}</p><p>何去：可以看到主函数中多出了两个参数，一个是整数 argc，一个是char类型的字符串常量数组。</p><p>而我们的程序名以及所有的命令行参数都储存在argv[]这样一个数组中，其中argc就是数组的大小。</p><p> 何从：在我们写程序的时候我们就可以调用argv[] 和 argc 来使用命令行参数。</p><hr></li></ul><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定的数目进行偏移，形成密文，例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。</p><p>下就使用凯撒密码实现对文件的加密和解密。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//设置密钥，可以随意给定一个整数值，这里我们使用3</span></span><br><span class="line">    <span class="keyword">int</span> key = <span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置加密文件流</span></span><br><span class="line">    ifstream input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置输出文件流</span></span><br><span class="line">    ofstream output;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是加密还是解密，并打开输入文件于输出文件，并判断是否能够成功打开</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;argc;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string arg = argv[i];</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(argv[i]==<span class="string">&quot;-d&quot;</span>)<span class="comment">//如果命令行参数为-d就是解密</span></span><br><span class="line">            &#123;</span><br><span class="line">                key= <span class="number">-3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            input.<span class="built_in">open</span>(arg);</span><br><span class="line">            <span class="keyword">if</span>(input.<span class="built_in">fail</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;input文件打开错误:&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">open</span>(arg);</span><br><span class="line">            <span class="keyword">if</span>(output.<span class="built_in">fail</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;output文件打开错误：&quot;</span>&lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户没有输入两个文件，应该退出</span></span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入四个命令行参数，依次为 程序名 -k或-d input.txt output.txt&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对文件进行加密</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(input.<span class="built_in">get</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        output.<span class="built_in">put</span>(ch+key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在读此篇文章时相信大家已经掌握了C++中的文件输入输出流，下来介绍利用命令行参数实现对文件的加密，本加密使用凯撒密码。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
    <category term="文件加密" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>C++流之读写字符串</title>
    <link href="http://example.com/2021/06/06/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2021/06/06/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-06-06T00:05:10.000Z</published>
    <updated>2021-06-06T02:52:30.715Z</updated>
    
    <content type="html"><![CDATA[<p>C++的输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标。下来介绍C++流类的串输入输出流。</p><span id="more"></span><h3 id="字符串流的类型和头文件"><a href="#字符串流的类型和头文件" class="headerlink" title="字符串流的类型和头文件"></a>字符串流的类型和头文件</h3><ul><li><h4 id="字符串流的类型"><a href="#字符串流的类型" class="headerlink" title="字符串流的类型"></a>字符串流的类型</h4><ol><li>istringstream：从字符串中读取字符。</li><li>ostringstream：将字符写入字符串。</li><li>stringstream：即可在字符串中写入字符，也可以读取字符。</li></ol></li><li><h4 id="字符串流的头文件"><a href="#字符串流的头文件" class="headerlink" title="字符串流的头文件"></a>字符串流的头文件</h4><p>​    三种类型的字符串流的使用，头文件均为 &lt;sstream&gt;</p><hr></li></ul><h3 id="打开字符串流"><a href="#打开字符串流" class="headerlink" title="打开字符串流"></a>打开字符串流</h3><ul><li><h4 id="打开字符串输入流"><a href="#打开字符串输入流" class="headerlink" title="打开字符串输入流"></a>打开字符串输入流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">istringstream strm;</span><br><span class="line">strm.<span class="built_in">str</span>(letter);</span><br></pre></td></tr></table></figure><ol><li>这里的strm是字符串输入流的一个对象，于标准输入流的cin类似。</li><li>其中str是流类的一个成员函数，用于初始化strm，通过点记号来调用。</li><li>letter是一个字符串，可以是已存在字符串变量，也可以是自定义字符串(需加双引号)。</li></ol></li><li><h4 id="打开字符串输出流"><a href="#打开字符串输出流" class="headerlink" title="打开字符串输出流"></a>打开字符串输出流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ostringstream strm;</span><br></pre></td></tr></table></figure><p>这里的strm是字符串输入流的一个对象，于标准输入流的cout类似。</p></li></ul><h3 id="字符串流读入和读出"><a href="#字符串流读入和读出" class="headerlink" title="字符串流读入和读出"></a>字符串流读入和读出</h3><ul><li><h4 id="字符串流读入"><a href="#字符串流读入" class="headerlink" title="字符串流读入"></a>字符串流读入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istringstream strm;</span><br><span class="line">strm.<span class="built_in">str</span>(<span class="string">&quot;2021 06 01&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">strm&gt;&gt;num;</span><br></pre></td></tr></table></figure><p>此时num的数值就是2021。</p></li><li><h4 id="字符串读出"><a href="#字符串读出" class="headerlink" title="字符串读出"></a>字符串读出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ostringstream strm;</span><br><span class="line"><span class="keyword">int</span> year=<span class="number">2021</span>;</span><br><span class="line"><span class="keyword">int</span> month= <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> day=<span class="number">1</span>;</span><br><span class="line">strm &lt;&lt;year&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;month &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt;day;</span><br></pre></td></tr></table></figure><p>此时字符串strm就是”2021 6 1“。</p></li></ul><h3 id="字符串于数值数据的相互转化"><a href="#字符串于数值数据的相互转化" class="headerlink" title="字符串于数值数据的相互转化"></a>字符串于数值数据的相互转化</h3><ul><li><h4 id="字符串转变为数值"><a href="#字符串转变为数值" class="headerlink" title="字符串转变为数值"></a>字符串转变为数值</h4><ol><li><h5 id="字符串转为int型"><a href="#字符串转为int型" class="headerlink" title="字符串转为int型"></a>字符串转为int型</h5><p>法一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istringstream strm;</span><br><span class="line">strm.<span class="built_in">str</span>(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">strm &gt;&gt; num;</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringstream strm;</span><br><span class="line">string letter = <span class="string">&quot;2021&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">strm &lt;&lt; letter;</span><br><span class="line">strm&gt;&gt; num;</span><br><span class="line">strm.<span class="built_in">clear</span>();<span class="comment">//清空字符串流，再次使用需要重新格式化</span></span><br></pre></td></tr></table></figure><p>法三</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string year = <span class="string">&quot;2021&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="built_in">stoi</span>(year);</span><br></pre></td></tr></table></figure></li><li><h5 id="字符串转为double型"><a href="#字符串转为double型" class="headerlink" title="字符串转为double型"></a>字符串转为double型</h5><p>法一法二完全同上，只需将int改为double。</p><p>法三：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string year = <span class="string">&quot;202.1&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> num = <span class="built_in">stod</span>(year);</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="数值转变为字符串"><a href="#数值转变为字符串" class="headerlink" title="数值转变为字符串"></a>数值转变为字符串</h4><ol><li><h5 id="int型转变为字符串"><a href="#int型转变为字符串" class="headerlink" title="int型转变为字符串"></a>int型转变为字符串</h5><p>法一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ostringstream strm;</span><br><span class="line"><span class="keyword">int</span> num= <span class="string">&quot;2021&quot;</span>;</span><br><span class="line">strm &lt;&lt; num;</span><br><span class="line">string letter = strm.<span class="built_in">str</span>();</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringstream strm;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">2021</span>;</span><br><span class="line">string letter;</span><br><span class="line">strm &lt;&lt; num;</span><br><span class="line">strm &gt;&gt; letter;</span><br><span class="line">strm.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><p>法三：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num=<span class="number">2021</span>;</span><br><span class="line">string letter = <span class="built_in">to_string</span>(num);</span><br></pre></td></tr></table></figure></li><li><h5 id="double-型转变为字符串"><a href="#double-型转变为字符串" class="headerlink" title="double 型转变为字符串"></a>double 型转变为字符串</h5><p>int型的三种方法均适用。注意：法三字符串变量会保留数值（double型）的小数点后六位，如果不足六位的情况下会使用0补齐，例如：string letter = to_string(2021),此时letter= “2021.000000”。</p></li></ol></li></ul><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打开字符串流</span></span><br><span class="line">    istringstream input;</span><br><span class="line">    ostringstream output;</span><br><span class="line">    stringstream in_out_put;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化读入字符串流</span></span><br><span class="line">    input.<span class="built_in">str</span>(<span class="string">&quot;2021 06 01&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以读入字符串流作为数据源</span></span><br><span class="line">    <span class="keyword">int</span> num1,num2,num3;</span><br><span class="line">    input &gt;&gt; num1;</span><br><span class="line">    input &gt;&gt; num2;</span><br><span class="line">    input &gt;&gt; num3;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1:&quot;</span>&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2:&quot;</span>&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num3:&quot;</span>&lt;&lt;num3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以读出字符串流作为数据结果</span></span><br><span class="line">    output &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num3;</span><br><span class="line">    string word = output.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word:&quot;</span> &lt;&lt; word &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串转变为int型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    istringstream input1;</span><br><span class="line">    input1.<span class="built_in">str</span>(<span class="string">&quot;2021&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> num4;</span><br><span class="line">    input1 &gt;&gt; num4;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num4:&quot;</span>&lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put1;</span><br><span class="line">    string letter = <span class="string">&quot;2021&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> num5;</span><br><span class="line">    in_out_put1 &lt;&lt; letter;</span><br><span class="line">    in_out_put1 &gt;&gt; num5;</span><br><span class="line">    in_out_put1.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num5:&quot;</span>&lt;&lt; num5 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    string letter1= <span class="string">&quot;2021&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> num6 = <span class="built_in">stoi</span>(letter1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num6:&quot;</span>&lt;&lt; num6&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串转变为double型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    istringstream input2;</span><br><span class="line">    input2.<span class="built_in">str</span>(<span class="string">&quot;202.1&quot;</span>);</span><br><span class="line">    <span class="keyword">double</span> num7;</span><br><span class="line">    input2 &gt;&gt; num7;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num7:&quot;</span>&lt;&lt; num7 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put2;</span><br><span class="line">    string letter2 = <span class="string">&quot;202.1&quot;</span>;</span><br><span class="line">    <span class="keyword">double</span> num8;</span><br><span class="line">    in_out_put2 &lt;&lt; letter2;</span><br><span class="line">    in_out_put2 &gt;&gt; num8;</span><br><span class="line">    in_out_put2.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;num8:&quot;</span>&lt;&lt; num8 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line"></span><br><span class="line">    string letter3= <span class="string">&quot;202.1&quot;</span>;</span><br><span class="line">    <span class="keyword">double</span> num9 = <span class="built_in">stod</span>(letter3);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num9:&quot;</span>&lt;&lt; num9&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int型转变为字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    ostringstream output1;</span><br><span class="line">    <span class="keyword">int</span> num10 = <span class="number">2021</span>;</span><br><span class="line">    output1 &lt;&lt; num10;</span><br><span class="line">    string word1 = output1.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word1:&quot;</span>&lt;&lt; word1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put3;</span><br><span class="line">    <span class="keyword">int</span> num11 = <span class="number">2021</span>;</span><br><span class="line">    string word2;</span><br><span class="line">    in_out_put3 &lt;&lt; num11;</span><br><span class="line">    in_out_put3 &gt;&gt;word2;</span><br><span class="line">    in_out_put3.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word2:&quot;</span>&lt;&lt; word2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    <span class="keyword">int</span> num12 = <span class="number">2021</span>;</span><br><span class="line">    string word3=<span class="built_in">to_string</span>(num12);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word3:&quot;</span>&lt;&lt;word3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//double型转变为字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法一：</span></span><br><span class="line">    ostringstream output2;</span><br><span class="line">    <span class="keyword">double</span> num13 = <span class="number">202.1</span>;</span><br><span class="line">    output2 &lt;&lt; num13;</span><br><span class="line">    string word4 = output2.<span class="built_in">str</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word4:&quot;</span>&lt;&lt; word4&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法二：</span></span><br><span class="line">    stringstream in_out_put4;</span><br><span class="line">    <span class="keyword">double</span> num14 = <span class="number">202.1</span>;</span><br><span class="line">    string word5;</span><br><span class="line">    in_out_put4 &lt;&lt; num14;</span><br><span class="line">    in_out_put4 &gt;&gt;word5;</span><br><span class="line">    in_out_put4.<span class="built_in">clear</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word5:&quot;</span>&lt;&lt; word5&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//法三：</span></span><br><span class="line">    <span class="keyword">double</span> num15 = <span class="number">202.1</span>;</span><br><span class="line">    string word6=<span class="built_in">to_string</span>(num15);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;word6:&quot;</span>&lt;&lt;word6&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++的输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标。下来介绍C++流类的串输入输出流。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>C++流之读写文本文件</title>
    <link href="http://example.com/2021/06/05/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/06/05/C-%E6%B5%81%E4%B9%8B%E8%AF%BB%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</id>
    <published>2021-06-05T01:45:54.000Z</published>
    <updated>2021-06-05T04:11:25.018Z</updated>
    
    <content type="html"><![CDATA[<p>​    C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。</p><span id="more"></span><h3 id="文件流的类型和头文件"><a href="#文件流的类型和头文件" class="headerlink" title="文件流的类型和头文件"></a>文件流的类型和头文件</h3><ul><li>文件流有三种类型：<ol><li>用于输入：ifstream</li><li>用于输出：ofstream</li><li>即可用于输入也可用于输出：fstream</li></ol></li><li>当使用三种文件流的任何一个时，头文件均为 &lt;fstream&gt;</li></ul><h3 id="打开和关闭文件流，并判断是否打开成功"><a href="#打开和关闭文件流，并判断是否打开成功" class="headerlink" title="打开和关闭文件流，并判断是否打开成功"></a>打开和关闭文件流，并判断是否打开成功</h3><ul><li><h4 id="打开文件流"><a href="#打开文件流" class="headerlink" title="打开文件流"></a>打开文件流</h4><ul><li><p>打开输入文件流：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>这里的 in_file 是文件输入流的一个对象，对于标准输入流 cin 的用法在其上完全适用。</p></li><li><p>其中open是其一个成员函数，使用点记号来进行调用。</p></li><li><p>input.txt 是储存在源文件下名为”input“的一个文本文档，里面的内容用于以后的输入。</p></li></ol></li><li><p>打开输出文件流：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ofstream out_file;</span><br><span class="line">out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>这里的 out_file 是文件输出流的一个对象，对于标准输出流 cout 的用法在其上完全适用。</li><li>其中open是其一个成员函数，使用点记号来进行调用。</li><li>output.txt 是一个输出文件，使用上述语句时会在源文件中生成一个名为”output“的文本文档，输出的内容皆在这里显示。</li></ol></li></ul></li><li><h4 id="判断是否成功打开输入文件流"><a href="#判断是否成功打开输入文件流" class="headerlink" title="判断是否成功打开输入文件流"></a>判断是否成功打开输入文件流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">​cout&lt;&lt; <span class="string">&quot;Can&#x27;t  open  input.txt&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">​读取输入</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：这里的in_file.fail() 中的fail 是一个成员函数，如果打开文件失败，会返回一个true值。</p></li><li><h4 id="关闭文件流"><a href="#关闭文件流" class="headerlink" title="关闭文件流"></a>关闭文件流</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">in_file.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>注: 这里的in_file.close() 中的close是一个成员函数，一般在程序结束是所有之前打开的流都会自动关闭，只有在流变量(这里是in_file)处理另一个文件是，才需要手动关闭。</p></li></ul><h3 id="文件流读入和读出，并判断是否成功读入"><a href="#文件流读入和读出，并判断是否成功读入" class="headerlink" title="文件流读入和读出，并判断是否成功读入"></a>文件流读入和读出，并判断是否成功读入</h3><ul><li><h4 id="文件流读入"><a href="#文件流读入" class="headerlink" title="文件流读入"></a>文件流读入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">string letter;</span><br><span class="line">in_file &gt;&gt; letter;</span><br></pre></td></tr></table></figure><p>注：可以看到文件流的读入  in_file &gt;&gt; letter; 于标准读入cin&gt;&gt; letter; 用法相同；不同的是in_file &gt;&gt;letter;是从文本文档 input 中读入，而cin&gt;&gt;letter,是从键盘键入。</p></li><li><h4 id="文件流读出"><a href="#文件流读出" class="headerlink" title="文件流读出"></a>文件流读出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ofstream out_file;</span><br><span class="line">out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">string letter2=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">out_file &lt;&lt; letter2;</span><br></pre></td></tr></table></figure><p>注：可以看到文件流的读出 out_file &lt;&lt; letter2; 于标准读出cout &lt;&lt; letter2; 用法相同；不同的是out_file &lt;&lt; letter2;是将“hello world” 写入文本文档output中，而cout &lt;&lt; letter2,是将“hello world”写入显示屏。</p></li><li><h4 id="判断是否读入成功"><a href="#判断是否读入成功" class="headerlink" title="判断是否读入成功"></a>判断是否读入成功</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file;</span><br><span class="line">in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">string letter;</span><br><span class="line">in_file &gt;&gt; letter;</span><br><span class="line"><span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">​cout &lt;&lt; <span class="string">&quot;输入错误&quot;</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">​处理输入；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：可以看到其用法于cin.fail()用法相同，当输入错误(当试图从文本中读取数字例如：55，但读入的数据项并不是标准的格式化数字例如：55a，则读取失败，in_file.fail()会返回一个true值。</p><p>值得说明的是，当从文件读取输入时，数字格式错误并不是失败的唯一原因，假设已经使用了文件中包含的所有数据，并试图读取更多的数据项时，文件流就会进入失败状态，而对于格式输入流cin就会一直等待用户输入。因此当一个输入流文件中的数据类型均为数值，我们想要计算其均值，即可直接使用如下语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ifstream in_file；</span><br><span class="line">in_file.<span class="built_in">open</span>(input.txt);</span><br><span class="line"><span class="keyword">double</span> tatol=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> num;</span><br><span class="line"><span class="keyword">while</span>(in_file&gt;&gt;num)</span><br><span class="line">&#123;</span><br><span class="line">    tatol+=num;</span><br><span class="line">    num1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> average = tatol/num1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>读取文本文档input.txt中的所有行，并将其按行逆序输出到文本文档output.txt中。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream in_file;</span><br><span class="line">    in_file.<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>);<span class="comment">//打开输入流文件</span></span><br><span class="line">    <span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())<span class="comment">//判断是否成功打开文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件打开有误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ofstream out_file;</span><br><span class="line">        out_file.<span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>);<span class="comment">//打开输出流文件</span></span><br><span class="line">      vector&lt;string&gt; letter;</span><br><span class="line">        string word;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(in_file,word))<span class="comment">//文件流读入，getline为按行读入，当读取完全部数据返回false</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(in_file.<span class="built_in">fail</span>())<span class="comment">//判断是否读入成功</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;数据类型不符，读入错误&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                letter.<span class="built_in">push_back</span>(word);<span class="comment">//按行存储文件中的内容</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=letter.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            out_file &lt;&lt; letter[i]&lt;&lt;endl;<span class="comment">//文件流读出</span></span><br><span class="line">        &#125;</span><br><span class="line">        in_file.<span class="built_in">close</span>();<span class="comment">//关闭输入流文件</span></span><br><span class="line">        out_file.<span class="built_in">close</span>();<span class="comment">//关闭输出流文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>从宏观上看C++流</title>
    <link href="http://example.com/2021/06/04/C-%E6%B5%81/"/>
    <id>http://example.com/2021/06/04/C-%E6%B5%81/</id>
    <published>2021-06-04T10:12:49.000Z</published>
    <updated>2021-06-04T13:14:00.805Z</updated>
    
    <content type="html"><![CDATA[<p>C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。</p><span id="more"></span><h4 id="什么是C-流"><a href="#什么是C-流" class="headerlink" title="什么是C++流"></a>什么是C++流</h4><p>C++的流是一种数据的载体，通过它可以实现数据交换和传输。就像水流是由一串水组成的一样，C++的数据流就是由一串数据组成的更长数据。简单来说，C++流就是输入和输出，其中输入流就是数据从键盘、文件或者是指定字符串流入到程序中；输出流就是程序中的数据流向屏幕、文件或字符串。</p><h4 id="C-中的输入流和输出流"><a href="#C-中的输入流和输出流" class="headerlink" title="C++中的输入流和输出流"></a>C++中的输入流和输出流</h4><ol><li>通过标准输入设备——键盘（C++中使用cin），或标准输出设备——显示器（C++中使用cout）进行输入和输出操作，简称为标准I/O。</li><li>通过对文件进行输入和输出操作，简称为文件I/O。</li><li>通过对程序中的指定字符串进行输入和输出操作，简称为串I/O。</li></ol><h4 id="C-中输入输出流使用的头文件"><a href="#C-中输入输出流使用的头文件" class="headerlink" title="C++中输入输出流使用的头文件"></a>C++中输入输出流使用的头文件</h4><ol><li>标准输入输出：#include &lt;iostream&gt;</li><li>文件输入输出： #include &lt;fstream&gt;</li><li>串输入输出： #include &lt;sstream&gt;</li></ol><h4 id="为什么要使用C-流"><a href="#为什么要使用C-流" class="headerlink" title="为什么要使用C++流"></a>为什么要使用C++流</h4><ol><li>毫无疑问，一个有意义的程序一定会有程序本身想要的输入，和你所想看到的输出，这是一个程序最本质的意义。</li><li>对于标准输入输出流：在所需要输入的数据比较简单，数量少，输出的数据也比较简单，并且是一个即时的数据，使用标准输入输出流是有很大裨益的。</li><li>对于文件输入输出流：<ol><li>在所需要的数据很庞大，并且在文件中有着一定的规律（例如表格），使用文件输入流很有必要。</li><li>在需要对程序进行大量的测试，需要对同样或者大部分相同的数据进行输入，使用文件流可节省很多时间。</li><li>通过文件输入输出流可以对文件进行加密以保护文件的安全。</li></ol></li><li>对于串输入输出流：<ol><li>以字符串作为输入可以实现从字符串到数值型数据的转变。</li><li>当需要从一个长字符串中提取一些想要的信息，使用串输入输出流是比较方便的（例：从 “2021 年 6 月 1 日“中提取月份，即可将此长字符串作为一个输入流，依次读入到第三个数据即为月份）。 </li></ol></li></ol><h4 id="C-流我们应该学到什么"><a href="#C-流我们应该学到什么" class="headerlink" title="C++流我们应该学到什么"></a>C++流我们应该学到什么</h4><ol><li>对于文件输入输出流的使用即读写文本文件。</li><li>对于串输入输出流的使用即读写字符串。</li><li>文件加密。</li><li>文件输入输出流的随机访问。</li><li>处理BMP格式的图像文件。</li></ol><h4 id="友情提示："><a href="#友情提示：" class="headerlink" title="友情提示："></a>友情提示：</h4><p>若要详细学习C++流的5点内容，请点击标签中的C++流。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++流" scheme="http://example.com/tags/C-%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>C++操作图像中的像素-Picture类</title>
    <link href="http://example.com/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/"/>
    <id>http://example.com/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/</id>
    <published>2021-06-04T09:45:23.670Z</published>
    <updated>2021-06-04T09:47:19.961Z</updated>
    
    <content type="html"><![CDATA[<p>​    数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。</p><span id="more"></span><h4 id="如何使用picture类型"><a href="#如何使用picture类型" class="headerlink" title="如何使用picture类型"></a>如何使用picture类型</h4><ol><li><p>将文件picture.cpp、picture.h、lodepng.cpp和lodepng.h复制到用户的源文件所在文件夹（注：文件可在<u>wiley.com./go/bclo3</u>中的配套代码下的ch04/worked_example_2下找到），如下图：</p><img src="/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/1.png" class></li><li><p>在工作空间中打开它们，具体步骤：右键picture-&gt;添加文件-&gt;同时打开4个文件，然后编译器会弹出信息，点击确定即可，打开之后如下图：</p></li></ol><img src="/2021/06/04/C-%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F%E4%B8%AD%E7%9A%84%E5%83%8F%E7%B4%A0/2.png" class><ol start="3"><li><p>在头文件中使用如下语句：#include “picture.h”,注：picture.h应由引号而不是尖括号括起来。</p></li><li><p>将要处理的图片复制到源文件所在的文件夹，图片名称为queen注：图片的类型必需为png类型。</p></li><li><p>打开图片，使用如下代码：Picture pic(“queen.png”)。</p><p>​    该语句定义了一个Picture 类型的变量 pic，用于保存图片的像素。</p><p>​    图片中每一个像素都有x和y坐标，其中0&lt;=x&lt;pic.width()(即图片的宽度)，0&lt;=y&lt;pic.height()(即图片的高度);例如(0,0)就位于图片的左上角，且y轴向下。</p><p>​    对于每一个像素都有一个RGB颜色值，该值由三原色组成：红、绿、蓝。每一个原色值都在0~255之间，所以我们操作图片中的像素即通过改变像素的颜色值来达到我们的目的。</p></li></ol><h4 id="Picture类型部分成员函数"><a href="#Picture类型部分成员函数" class="headerlink" title="Picture类型部分成员函数"></a>Picture类型部分成员函数</h4><ol><li><p>pic.width() 和 pic.height() ；</p><p>分别用来访问图片的的宽度和高度。</p></li><li><p>pic.red(x,y)、pic.blue(x,y) 和 pic.green(x,y) ；</p><p>分别用来获取像素(x,y)处红色原色值、蓝色原色值以及绿色原色值。</p></li><li><p>pic.set(x,y,red,green,bule)；</p><p>将像素(x,y)处设定为自定义原色值，其中后3个参数均为0~255之间的数值。</p></li><li><p>Picture pic2(“queen2.png”);</p><p>pic.add(pic2,num1,num2);</p><p>这是在图片pic中添加图片pic2，其中num1，num2 分别为pic2相对于(0,0)这个位置的位移。</p></li><li><p>pic.save(“result.png”)；</p><p>将操作后的图片保存。注：会在源文件中生成一个名为result，类型为png的图片。</p></li><li><p>Picture pic3(num1,num2,num3,num4,num5);</p><p>不从源文件中加载图片，生成一张单色的图片，其中num1,num2 分别指定图片的宽度的高度，num3、num4、num5 分别代表着图片每一个像素的红、绿、蓝原色值。</p></li></ol><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>编写程序，将图片queen中的每一个像素的个原色值都变成其相反值。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;picture.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Picture <span class="title">pic</span><span class="params">(<span class="string">&quot;queen.png&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pic.<span class="built_in">height</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pic.<span class="built_in">width</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> red=pic.<span class="built_in">red</span>(j,i);</span><br><span class="line">            <span class="keyword">int</span> green = pic.<span class="built_in">green</span>(j,i);</span><br><span class="line">            <span class="keyword">int</span> bule=pic.<span class="built_in">blue</span>(j,i);</span><br><span class="line">            pic.<span class="built_in">set</span>(j,i,<span class="number">255</span>-red,<span class="number">255</span>-green,<span class="number">255</span>-bule);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pic.<span class="built_in">save</span>(<span class="string">&quot;upset_down.png&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++_picture" scheme="http://example.com/tags/C-picture/"/>
    
  </entry>
  
</feed>
