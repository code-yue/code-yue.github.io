[{"title":"RSA各种攻击方法","date":"2022-02-19T03:58:18.000Z","path":"2022/02/19/RSA各种攻击方法/","text":"RSA各种攻击方法及脚本 1.共模攻击形式：n，m相同，c，e不相同。 脚本： gcd(e1,e2)=1 1234567891011121314151617181920212223242526import gmpy2#使用欧几里得算法计算最大公约数，和s，tdef egcd(e1,e2): if e1==0: return (e2,0,1) else: g,y,x = egcd(e2%e1,e1) return (g,x-(e2//e1)*y,y)n=c1=c2=e1=e2=s=egcd(e1,e2)s1 = s[1]s2 = s[2]#找负数求逆元if s1&lt;0: s1=-s1 c1=gmpy2.invert(c1,n)if s2&lt;0: s2=-s2 c2=gmpy2.invert(c2,n)m=(pow(c1,s1)*pow(c2,s2))%n gcd(e1,e2)!=1 123456789101112131415161718192021222324252627282930313233343536import gmpy2import libnumn=c1=c2=e1=e2=b = libnum.gcd(e1, e2)e1 = e1 // be2 = e2 // bdef egcd(e1,e2): if e1==0: return (e2,0,1) else: g,y,x = egcd(e2%e1,e1) return (g,x-(e2//e1)*y,y)s=egcd(e1,e2)s1 = s[1]s2 = s[2]#找负数求逆元if s1&lt;0: s1=-s1 c1=gmpy2.invert(c1,n)if s2&lt;0: s2=-s2 c2=gmpy2.invert(c2,n)m=(pow(c1,s1)*pow(c2,s2))%nfor k in range(10000): m1 = m + k*n flag, s = gmpy2.iroot(m1, b) if s: print(k) print(libnum.n2s(int(flag))) break 2.RSA 低解密指数攻击形式：e很大，使用wiener攻击求d 脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import gmpy2def transform(x, y): # 使用辗转相处将分数 x/y 转为连分数的形式 res = [] while y: res.append(x // y) x, y = y, x % y return resdef continued_fraction(sub_res): numerator, denominator = 1, 0 for i in sub_res[::-1]: # 从sublist的后面往前循环 denominator, numerator = numerator, i * numerator + denominator return denominator, numerator # 得到渐进分数的分母和分子，并返回# 求解每个渐进分数def sub_fraction(x, y): res = transform(x, y) res = list(map(continued_fraction, (res[0:i] for i in range(1, len(res))))) # 将连分数的结果逐一截取以求渐进分数 return resdef get_pq(a, b, c): # 由p+q和pq的值通过维达定理来求解p和q par = gmpy2.isqrt(b * b - 4 * a * c) # 由上述可得，开根号一定是整数，因为有解 x1, x2 = (-b + par) // (2 * a), (-b - par) // (2 * a) return x1, x2def wienerAttack(e, n): for (d, k) in sub_fraction(e, n): # 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数 if k == 0: # 可能会出现连分数的第一个为0的情况，排除 continue if (e * d - 1) % k != 0: # ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n) continue phi = (e * d - 1) // k # 这个结果就是 φ(n) px, qy = get_pq(1, n - phi + 1, n) if px * qy == n: p, q = abs(int(px)), abs(int(qy)) # 可能会得到两个负数，负负得正未尝不会出现 d = gmpy2.invert(e, (p - 1) * (q - 1)) # 求ed=1 (mod φ(n))的结果，也就是e关于 φ(n)的乘法逆元d return d print(&quot;该方法不适用&quot;)n= 76230002233243117494160925838103007078059987783012242668154928419914737829063294895922280964326704163760912076151634681903538211391318232043295054505369037037489356790665952040424073700340441976087746298068796807069622346676856605244662923296325332812844754859450419515772460413762564695491785275009170060931e= 19252067118061066631831653736874168743759225404757996498452383337816071866700225650384181012362739758314516273574942119597579042209488383895276825193118297972030907899188520426741919737573230050112614350868516818112742663713344658825493377512886311960823584992531185444207705213109184076273376878524090762327d = wienerAttack(e, n)print(&quot;d=&quot;, d) 3.RSA低指数幂加密攻击形式：e很小 脚本 12345678910111213import gmpy2import libnume =n =c =i =0while True: if gmpy2.iroot(c+n*i,e)[1]: break else: i+=1m = gmpy2.iroot(c+n*i,e)[0]print(libnum.n2s(int(m))) 4.对n进行攻击（分解n）形式：一般是n比较小或者p和q比较相近时使用yafu分解。 使用方式：1.yafu-x64 factor(n) 2.yafu-x64 “factor(@)” -batchfile n.txt。 5.e，m相同，不同的n得到不同的c方法：使用中国剩余定理得到m^e,在对m开e次方 脚本 1234567891011121314151617181920import gmpy2import libnumn1= n2= n3= c1= c2= c3= n = n1*n2*n3M1 = n2*n3M2 = n1*n3M3 = n1*n2M1_ni = gmpy2.invert(M1,n1)M2_ni = gmpy2.invert(M2,n2)M3_ni = gmpy2.invert(M3,n3)m =(c1*M1*M1_ni+c2*M2*M2_ni+c3*M3*M3_ni)%nlist = [11,13,17,19]for i in list: if gmpy2.iroot(m,i)[1]: print(libnum.n2s(int(gmpy2.iroot(m,i)[0]))) 6.已知n，e，c，dp求m脚本 1234567891011121314151617181920import gmpy2import libnumn=e=c=dp=for x in range(1, e): if (e * dp % x == 1): p = (e * dp - 1) // x + 1 if (n % p != 0): continue q = n // p phin = (p - 1) * (q - 1) d = gmpy2.invert(e, phin) m = pow(c, d, n) if (len(hex(m)[2:]) % 2 == 1): continue print(&quot;m:&quot;, m) print(libnum.n2s(int(m))) 7.已知p，q，dp，dq求m脚本 12345678910111213import gmpy2import libnump=q=c=dp=dq=invq=gmpy2.invert(q,p)mp=pow(c,dp,p)mq=pow(c,dq,q)m=((mp-mq)*invq%p)*q+mqprint(m)print(libnum.n2s(int(m))) 8.n是某个或者某些个大数的整数次幂方法：通过欧拉函数定理解得n的欧拉函数值，即phi 9.给出两组n，c，p，q方法：通过中国剩余定理求得结果为c，n1*n2为n，来求解 脚本 12345678910111213141516171819import gmpy2import libnump1= 241529374856419543994843741620715478233q1= 329891612475502969315412700917758756573p2= 179415062328238613586720079938194290751q2= 281209161331996176661322999324485217597n1= 79678514931584446837886795964984740987618425126262080131520484181733127175509n2= 50453159207651801862952938090505477143503284591035016948403490994601319545347c1= 10906371165492800616190805676717306177005704888515733402096006986355132032250c2= 47055855052437161522184969745110429012879528443871661682592147046669796586664e = 65537n = n1*n2n1_ni = gmpy2.invert(n2,n1)n2_ni = gmpy2.invert(n1,n2)c = (n2*n1_ni*c1+n1*n2_ni*c2)%nphi = (p1-1)*(p2-1)*(q1-1)*(q2-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 10.e和phi不互素方法：找到e与phi的最大公因数gcd，将e/gcd当作新的e，求得m再开gcd次方 脚本 12345678910111213141516import gmpy2import libnump= q= e= c= phi = (p-1)*(q-1)gcd = gmpy2.gcd(phi,e)e = e//gcdd = gmpy2.invert(e,phi)m = pow(c,d,p*q)m = gmpy2.iroot(m,2)[0]print(libnum.n2s(int(m))) 11. e=2脚本： 1234567891011121314151617181920import gmpy2import libnump= q= n= c= e= 2inv_p = gmpy2.invert(p, q)inv_q = gmpy2.invert(q, p)mp = pow(c, (p + 1) // 4, p)mq = pow(c, (q + 1) // 4, q)a = (inv_p * p * mq + inv_q * q * mp) % nb = n - int(a)c = (inv_p * p * mq - inv_q * q * mp) % nd = n - int(c)#因为rabin 加密有四种结果，全部列出。aa=[a,b,c,d]for i in aa: print(i) print(libnum.n2s(int(i))) 12.给出nivp，nivq，phi方法：通过数论推算解得p和q，得到flag 脚本 12345678910111213141516171819import libnumimport sympye= 65537phi= c= pinv= qinv= p, q = sympy.symbols(&#x27;p q&#x27;)expr1 = pinv * p + qinv * q - 1 - p*qexpr2 = (p-1)*(q-1) - phir = sympy.solve([expr1,expr2],[p, q],domain=sympy.S.Integers)p = int(r[0][0])q = int(r[0][1])d = libnum.invmod(e, phi)flag = pow(c,d,p*q)print(libnum.n2s(int(flag))) 13.数论推导形式：给出一个或多个数学公式，通过数论推导变换最后解得p，phi或者n 解得p：一般都是通过变换使得一个数于n有共同因数p，设那个数为o，则应满足o同余kpmodn的形式","tags":[{"name":"RSA","slug":"RSA","permalink":"http://example.com/tags/RSA/"}]},{"title":"CTF小学生——RSA班wp3","date":"2022-02-18T03:53:54.000Z","path":"2022/02/18/CTF小学生——RSA班wp3/","text":"wp 题目：rsa19 解答：根据题目信息发现n与c有公约数p，得到p，q，求出m，得到flag 代码 1234567891011import gmpy2import libnumn= 24981188020167643746074879674147956549430370314044132464039253351652835734440674909204189557556602865962429895374385855345228410925147709118740392159925942795088299679655602727568511595072696409696271371250102853677902616206682058248674337676916036346628088795691598346311821772518310067782592432491390315016938601034921878080792576848740835839533436309467949739957366439791446358471180018562594829965668319970676634275599934272794456322929434264075482862354958544593517741073415713467939034524174022554745424038830745700456334054077809280744596235294447559597633491714726093368901810800094506409706555205366712813489c= 18621596046506896357501494490427254488179638636182636310535680038609096612801678121484736598560358324455851721295385341142207429201113106822997090878471278518783809844775558184834964034587247425952074737623038780244691628409045326000650516141599732305641793044557982746856322994617259408879266356396616639748741726355064689072113192676869563527139209384310754130692810070548558914951576972545449143198975499766952417464247791425484288188124235662918342094367901287461654602032582020287215884903753469091244847129233355340585693462406329376871222071849218639774125831290704426337294409031337314523781596602940531607723e= 65537p = gmpy2.gcd(n,c)q = n//pphi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m//p))) 题目：rsa25 解答：是共模攻击的形式，但是e1与e2不互素，最后对m进行爆破，得到flag 代码 12345678910111213141516171819202122232425262728293031323334353637import gmpy2import libnume1= 221e2= 299n= 22752951745297736168537377055274778116665470909065477125935886705065315928343909239030226134317655286811706825307791028935468695248938314873728310939010332033303049984284854672480419186656651898284247010047681096246455201967436493619623922813042286133760359535974396266228677845061471522291462170675019300170320671686114928795841399272659671749295028598451924716935439876301262667477640877837569951118311739219264913187243646073550492683492113343384821975066291244933858116486782731928931431642274809491405001955412026149194699922670378380172100475024897567223023327826339547555266975263552287361838466410256332586243602018701252181095544525087725089471855146785890801898964498900490722824136161536824524023843219008916078446694933471093288073098317841217353433648382906362253310187885031349173752969974195099147758139669961092400692293113078059473080806234076443570119722130939533645583942861471571301658146374104930923161280707107854937882275460478198823125819905477560849933589115721416285687345303919348351291800712956242809906173781232818857076129195419972616950359257381023984782648862051425193061029177411755248884275122634206055064928918131704555281055171016232989653908936425333474592396425262724183978715755517681781896905505681019433680152515179578293854352466356161898967395639133527374169311595381c1= 10892593793227365116925700965458364184649125396663943796073539260980997644891965799450399424218723107551158558465723957982810191916064316067402569229239706110587662283006062233207602849048977390414725491999094784268795765845090278541345060691227848049341792356361866090107794846740587550516493827550761044916120742634716100959568752284205773635157016570644732882618112667602892495591343383196825341503584074765200031063900399784671363062540083853968276812461259424786023596109476654103941796084022234777516856935201686089014703949873963763173504178597282120893681944701529635472087336308148045296570250358965387578639389647372863697874387920284376355175371658214022432637233049643918240215883756536156344271717888814377311625833162569949367074856096858774042469897229733611875690829200986478219874772214075323186921718101279851215225427651429974497218901117181173977981895145545289488897144837754206327890077498892642359817562974797240756164341335703875164746037528216084897204167262772966756903307518956994642174111291907559634725813349461899233834828219448501415166737945826263270661137588163692728905410221169466525723870303978092494941639719863782656186969513167917612386960116158336850718448480833247082725651743364206989720150402475518960807596933665261898347257015381952076956414926169065628402035877024c2= 16234449136110301948915044033782803178888320780730248041362289400402520359200135207779437601300318341574596537693496447844160745059083759235870748096444629141498803084865475060123420097840970184733706276824699107779327930269426809903826537911640592522293558467627053309463726380481516500764543325038595504462274814965367972343969703518441786374346751491786697266008897789281988633961789937331687231107598075641627085598476591935681238873469342798684028977952673061492319474370639867032312696974209893993745844085661037025325712464003345130349368517370647831842069123305455497561422546383131187398775555886803281812066994566108824332556193714585778964779070971454065665303736272711223551782164863853905352227680603140162402255969282233812006972796280850233545219871869909534783019159100014111451843232957211373061429434617954249240688081192808501611525220067662230418353538193891708132134012043837396576358357488762683942703800181858824520755919230602612335238556205420378498803006965524284284802224595940916712846360900844939206346374912066944666599066191687022350969781809803220970991254223987034473812934155305370148168751311003191110608399854183137132450387729417275410039697670774601121758536584269746197227045293026303760774202258533200041885054449850059983037919760683276465377311443445828203784214390883b = libnum.gcd(e1, e2)e1 = e1 // be2 = e2 // bdef egcd(e1,e2): if e1==0: return (e2,0,1) else: g,y,x = egcd(e2%e1,e1) return (g,x-(e2//e1)*y,y)s=egcd(e1,e2)s1 = s[1]s2 = s[2]#找负数求逆元if s1&lt;0: s1=-s1 c1=gmpy2.invert(c1,n)if s2&lt;0: s2=-s2 c2=gmpy2.invert(c2,n)m=(pow(c1,s1)*pow(c2,s2))%nfor k in range(10000): m1 = m + k*n flag, s = gmpy2.iroot(m1, b) if s: print(k) print(libnum.n2s(int(flag))) break 题目：rsa26 解答：是共模攻击形式，但给的是e1和e2的关系式，通过遍历所有e1和e2的情况，得到flag 代码 1234567891011121314151617181920212223242526272829303132333435363738394041import gmpy2import libnum# e1*e2= 83317def egcd(e1, e2): if e1 == 0: return (e2, 0, 1) else: g, y, x = egcd(e2 % e1, e1) return (g, x - (e2 // e1) * y, y)n= 19361442710572745971265661179912428614335978862294499554478708154961900725571203060796104846289397242207304532314240136962004100859120350866177200389723065658762704195258332314791286248842309297348039111045266185355903400590470820183877252896166548216731371364979378507526744861441605219478410567943584909399458417880788827318597539692741384869777249157338164956516233081381729474311604082892186490173033244693551617094635430697205804969501877592642316320873084247185093376277647579480643486369145925195734181193015900482737320548696928588870712293186252013457131251209473809656777543374500592007808404407059561585875569527546497652518580045435210514546460508584320606314122520882426004609258608147903667923350952560862343978526661419457923377730038903725129920335146125419046956321000719022303404018007514471776998828154744785228693422230685108494515083105086516002742258455143048441346760686508352771381755359768486489070279892078844716848637514485979868052449468414483027672075237348001190373461535494802211938683204976566773050049547807712425194913096401165728862378611187510228222428679755307056276133497536735863204478321549958435946853973687386589497836951783399492540878952618631792625025126620608024559471293131768988077589502325651357976822933654550846615039529755326862460868499406888969184042128071c1= 8461455935702774839606732696628583481106108739457157757237961493721249315707058365854463354773540401038228236301572933195823206925383589280380438344346918293151928169930134045632956081184945062566817678757614816611860006425866597730747864519352309046720733870943424680296477704991108084039103348714387678260925701357278152801810444616098214964231942511332731906589339642434586792884729500618636404879133808745489823990051381479316035290316511507860259556699539853817794899071305575419968794233519130191693519669424965740754005557268523536259961342893331243822271702601491251166024629032785331163334845458532041066873062181204642511730061193181806412423310871852101503714865811232852678040552266896756835104015126426669170036333066668010437674021104622132437422087899276215087590613842963706972249810831528040008304175911799215946803926073839260039708714727246670180210772138254229999545871929350538204078637835690649108982156556159082202035891312400182426109033284706424624286874595070797624804888642649414098331802113837492380725023537502746076689560748513729573164798419260068335949704460969862627638288475890309143274515210188524564546972793051029662396980537597835874860939675476734819945549433268818379519178647303476509820821756282974287073312744339124424284365074314353072957540119217061097316369179812c2= 6204846642785521340470513546335239064256758077473460303136152226321426573866713276868303467627807818878464124001025948893472833684203082226317608116339642653526005250588488719287359040352790572959995584093188339849695217956472022875459556871491299322868787108334073007332501731796096022506406756118808831646084743403979543281704069120640233328839980099290857269846287187888156728145277024309531510105331797866833685076835273931526615042292719970926967658919153638762985362453791732734631621502983351581711188066449777097203043897589205329057225446193852593056040301734809364853181753118739604843784216536562612033307359103893806510482236157475021740603255590914121641809865052126419196638531405221094438510231726208366630512008162663744010330103156199459170979721924714894281792427651932643530734043790246173905509400532261288534889712214483873969552991657537356198890952147322594953541508366871552561029095676172024539741525694906063413062943730465813047155464168544196529490081901356676689826701155342513241655234549380041635792150618405682571311160853526719882812618473055821608217492122688669131559593093840370537049894579011917334477512297137182557102626033423909278319394496823138854073015927815382203590762482110896381565689852266596980436613904791614372199019839459027972129220041158226866818118745059i=2while i&lt;83317: if 83317%i==0: e1=i e2 = 83317//i b = libnum.gcd(e1, e2) e1 = e1 // b e2 = e2 // b s=egcd(e1,e2) s1 = s[1] s2 = s[2] #找负数求逆元 if s1&lt;0: s1=-s1 c1=gmpy2.invert(c1,n) if s2&lt;0: s2=-s2 c2=gmpy2.invert(c2,n) m=(pow(c1,s1)*pow(c2,s2))%n for k in range(100000): m1 = m + k*n flag, s = gmpy2.iroot(m1, b) if s: print(k) print(libnum.n2s(int(flag))) break i+=1 题目：rsa17 解答：给了q，可以求出p，但是p可以开三次方，属于n是某些整数整次幂题型，求出phi，得到flag 代码： 123456789101112131415import gmpy2import libnumq= 9821019070409676333044072841065266478412490068866140735407083020681876874216236257486646854474910118979331501550740926276257953946766816940478029341936251n= 20065300735475128590762092835634208578590188430910113938266923916956496499667511050434727958038855180430563677067665310984636341807198909493266030524407914174388530285921911038005426931867734450564693608543508971517875518246462535981518861032385301237643992100986849108856013524416300831289325154121110808247211536812259102311581603306878281780717796746256378731029854411630700458188720317727057026867196631023061032601638872839570025991211870975933208177308028632438360982879806030503684724554915521232091140311979213507503765831400499361130450254384304522697771978881836641395836048939329374662229617271102430460909e= 65537c= 10334353226901656582025695459419278099579299367981226010947137434420041484901529514923751765488009668423558942300563010202002037412708785365886627854514598472485113085663423766836258491855487234194680311886099056606577829335872927280970941190051132740285138145789581491571992748223980546807928715445558156932190046773138655188050614149792373562068124659615358354617809264387945436262858291997823711827227689741790876680419269257229837590349990437789831556244226011468099456803730676941298395849646182421743150816380697450542133246409603419842118484214641273072148680153105439037855464224041968796128112802295366103465p = n//qprint(p)pp = 12689067460968639894065349877170981382620686137782855931246710156025521091715625374157329608017968147868420672538526581198886713432258948704920071988814119phi = (q-1)*(p-pp**2)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 题目：rsa24 解答：通过数论推算得到p和q的值，求得flag 代码 123456789101112131415161718import libnumimport sympye= 65537phi= 28966979166570180792165296396724775304517816996213001378904940909248222621744363164060646280877414774628518793976134344184737619758944142550194446402845725493545936793098648425155476429668930938014304229091104323598042011271122352821641737995916068502719690156789746925879428347004296365564709555034301336182039595944335942074220057981089093966223640524369466707713532786591393560573430039419666653556854223221733490286943768486930990336116190822717169430449906522651685791244415661556972220411059281945030016877574295789727262542406148661746926555755138131897719940373448806465681975703741492376141647300222120764176c= 720145398292074537841545933602326576473741549031065757078743296389866423532323142546976378639116392401015537356833285793967458358811500970090359466006710851461179235194672218801099391897590970224027270931178916315599036922311596360019951482688270439303813604298778434700769575460359837832123520961908670114567264187749974973161834455504080742617408916975343280038195372974661435728626712478453001807287092016059839073591842844494467689945527339487420875460002726594818888135989064204753212132759555043298333825336624898166489925145638031193323390714418639197846253807136848080963690346391564786977660865660369588736pinv= 39909138618897087067954916901129200709546611058646810494691327775381751231251757009652158182562111025345777419136131627317857034803133000960699371752937982327038307202755295559833643098803333455922604021123985432376916162830630777450512563806228068454507293167399195031896286580600520567700823513451195630782qinv= 125979298930392658151999068892470842145268806602990251801755362457878865090087519939810066896328884925162140671677288627936775912311050406204502785192435746027871238995740612020311103525540888827958654046791157003378716522058722618817211827933204346475175247869409531112063929254072913542894583256079584493518p, q = sympy.symbols(&#x27;p q&#x27;)expr1 = pinv * p + qinv * q - 1 - p*qexpr2 = (p-1)*(q-1) - phir = sympy.solve([expr1,expr2],[p, q],domain=sympy.S.Integers)p = int(r[0][0])q = int(r[0][1])d = libnum.invmod(e, phi)flag = pow(c,d,p*q)print(libnum.n2s(int(flag))) 题目：rsa27 解答：通过对式子的变换可以得到$2021^n$与hint同余于p，所以有$gcd((2021^n)modn-hint,n)=p$ ,得到p后解得flag。 代码 123456789101112import libnumimport gmpy2e = 65537n=27020725261160598541077357737650775795182555998856810737571508044949928734067444441660366270392732456051807439301564552672200975582350577967001486740668193835704559129378410828266554536148151615878808327988333060924165410762016082268322936465413880236634083213834739549234631742766416876749808978934944262651307600621868854944164060642189749365967978497831698002669974744487926082412272998646851047638183126945784060957075393737537570645086672473571281053798891685646561828588448040073373363454584468753860529849749093081434144360661566815886630699933232263079413562069476421802192735693386029862725050469209845710383c=10188807385387617708190575473905502994151677148079820873886980571555051900701810208218351138721306416600688313703084580808183634201231599134123549448962443376514560489130860694363901933597676373555599555647232128717993571185822894818704143675318690577221330618533739592165564396729937983659337232822442555504262694675199751730664450120569727835850996566436129543730932040989365233424791093843941154003052950306359994891955336607690065213304872738280674213630736611351982705373394299097653653497017756036211550125607093109216729483090391729134062236908282557149575812220142872855836932590459512028618076264332235518829hint=15179972145975733285419381814235528011288991423484121653543845156913121513320504879647666067298415751234264897435338898933073713420024176276221164394369781676781604128149168834126855517212300158864797800121336042194751965268493010327202598446572764475343894613152062609436699715193914479572113800212525965140106015838636914979735618606768207651697548364440806425770871133439416876157686985836939255598747973339866125864303982956813846287509191028829738926404992619459242904729015823730553526572575372668559669124599614613391797015393641171177282129497503752370800088634017972208535899870704612274473042064675033593148p = libnum.gcd(pow(2021,n,n)-hint,n)q = n//pphi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 题目：rsa28 解答：推导得到$gcd(hc-h^emodn,n)=p$,求得flag 代码 123456789101112131415import libnumimport gmpy2e=65537h=20211102hc= 71505320953946158049530109094654497075489963071106175336722892393493112481336409391299522595724154571954223093317880494307263262649833222750675105885636892419350501821324979706283867758665536771783209816719106279467902518895579024290387800216711663670572861182058425925280993190282267615052256942516011995207n= 76856511192427852645963041043072791148703422665129663050712492700760489247788743818199589072069758934570218804936479267319288093436111548055922916898782764333246946326823653877357695179165138863843657328764265204547147092074499832221138997131011222722917338444675582832114206750168113207646100633238664244737c= 39246179387125192271554620313966311736032348078183121707012959204367908070472764506984235827179206718838172586811066682034907967943722841257765922283692526422653916506577810629430853963448057701574209912936660396486847365579797147723437378122880075493171892191049105237005801787649587080840600670585409293046kp = hc-pow(h,e,n)p = libnum.gcd(kp,n)q = n//pphi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 题目：rsa29 解答：通过变换得到一个数于n有公因数p，求得flag 代码 1234567891011import libnumh1= 30855822627962989585229048864635672320544672090785297155723423466786046363050770166911337642023073726938940720811335150158356617935867424913657952916327330494297125827029212326952561052030408154856279444698976262609160644653834177066135162450457878611978648445980131216562928824964574836061694756466154667205h2= 40100423593623305059775303455521238466361560139512541341649592368069344035986841719639287569549223369845132085965748305686682111656643181380183441717688410643280141958261131108758470255679260104010792458818255865919591927360182698571973058572267041626051012344432873060584028954870019976713790755601324558548n= 64102959876468100680156640535847855388761634133282097987245513821195616433464232166471238446539383399142190819132167640251487788433828354971655930602252481995598958979413328369264306739790569021167918377152867054737871100808301104788028284764159363852402951908183073134132550874656189587590198702783318894869c= 45131183832310284041286970164837452402860781494367814170537748979786683176908409834474718536824887130743650179867181711815561375866637642188028690304179190358058486755191379316599103162356440279017384835373685350107932236214472686050587719705355548868691431799158695967203810074232266157701183923093912519832e=65537kq = pow(2022,1919*9191,n)*pow(h2,1919,n) - pow(2021,1919*9191,n)*pow(h1,9191,n)q = libnum.gcd(kq,n)phi = (q-1)*(n//q - 1)d = libnum.invmod(e,phi)print(libnum.n2s(pow(c,d,n)))","tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"CTF小学生——RSA班wp2","date":"2022-02-17T06:18:59.000Z","path":"2022/02/17/CTF小学生——RSA班wp2/","text":"wp 题目：rsa_14 解答: 已知n，e，c，dp，直接使用脚本求flag 代码 12345678910111213141516171819import gmpy2import libnumn= 22622953499906408301564967921245988860495391097132954220274432924287509085632417945770881691534975145091374242390427640088367167203579325929612016723243658261593025738254367644091603118090370975169770127462281455311168276705797581236756566556572477147794482576566576141503657366877706216822051348815093952824935126554144616168117998226546298989358973835686535936849349204968416839514589022517798087249227968029567878985549747691248450050900456070085755111883456285843067740064987642442265366446045841262726264326834028291726094139315980161873887433830833454445599669910399735340574524109558630513082823400621144454351e= 65537c= 469722654129671419249759522951904591667490211597089754628487076348562605615284355442799382577011350223484863274785594845261822294849547236041417367128695661795868225558049849940969387805053378233945487237026625762800225165430228884868681682886651471380372547431200184327293846958033983382179623067806485162201079574837090290662923491693441026067580453795233723008995575278125426502251786591238435141115672755813724389532148907336492040829080851823787879326475426928069825609696935156088233034235751099793215905063550820628171197918871238376618291835524535363337134321757043740849310613185143435442464034252256136947dp= 126729618715997639432376012471064242072409613989447605497725787230926131930047985649208493373747981708515084950424544560607536523739481248536263970683258477808489883464951901490743860000504246086678359257162357254217610750532553294000611257291925400498830519491741364527898680055532286984211081076338931327137for x in range(1, e): if (e * dp % x == 1): p = (e * dp - 1) // x + 1 if (n % p != 0): continue q = n // p phin = (p - 1) * (q - 1) d = gmpy2.invert(e, phin) m = pow(c, d, n) if (len(hex(m)[2:]) % 2 == 1): continue print(&quot;m:&quot;, m) print(libnum.n2s(int(m))) 题目：RSA_15 解答：已知p,q,c,dp,dq，带入脚本求得flag 代码 1234567891011121314import gmpy2import libnump= 112454994630978850005784651276022327545786198205744597431888680937657203192943q= 111081771780978300442208201256251933100607227308819156491182881723714968913833c= 7847140580627012782899798457736961376953768684667159008470556786390887805253326211691923724846808704462396746105331991924048819814322540306282164012066426dp= 99016059099144522019375365089687785694029213535292918424815544402513220169503dq= 79504900574184798493105575420403885224379864982754477219462523963780735261625invq=gmpy2.invert(q,p)mp=pow(c,dp,p)mq=pow(c,dq,q)m=((mp-mq)*invq%p)*q+mqprint(m)print(libnum.n2s(int(m))) 题目：RSA_16 解答：通过yafu分解n可知n是某素数的5次方，通过欧拉函数定理求得n的欧拉函数值，即phi，得到flag 代码 12345678910import gmpy2import libnumn= 24090704838485320092322602381433113998549491255884266387675228929661104335500411198637928025660996430319332941004040599396998234228244782303357297973137930526505489726115260523310511218709466132734290380881163955161225457364375241182423158684922361439555422326120328133588500102913773661266808325619034117428588147006907657756318674847307691315077012529837425655081122924789717051817547851005534496378358099420535561566073404733903281708969861402722313932576238811896701757123799634332216554086749941045956406802471674031944558913714990838086806396503547587896668889448877787128717078534093031525842561899729308823124832044199410217169735469224432542618693916399121293260293185310206776155217396940245472443313953985052989506641484804269835655950721932515156631880216443e= 65537c= 4644692044652159435824271269188149877191463739428505800552271160405169256688524376059318365826281434840310221997229754973778724418987980440341270686332667226078120978326105359289063570833817421216507957905303736889805936005004450684613091300319138800693741893618264241268661031157574584193673068534877291120825428318673498993334115269043893347607706429720486411605530004387437787775015099350192774546635451473835741062999624582951642205695330470935474403770491104296455303487414392560417505110011204285904941964895708840331681754455406209522192714176572299696109331233432919143365691231618894725659346560911188282377099473664930243190978118442970824453139977801843431119816228255364416557236747200455405887287572620725727247354320774485121369770634224919966258978988036p= 7522633459543261699928061990854146313832534923510670277767922552283252008995826136321031523873848172725576684552966982932229269010055777902040181800721643phi = n-p**4d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 题目：RSA_8 解答：通过yafu分解n可知n本身是一个素数，通过欧拉函数定理求得n的欧拉函数值，即phi，得到flag 代码 123456789import gmpy2import libnumn= 161670795418661108941395547760068053355832555077779027853700140442876298077926786030806243269042521234383793929910836023913994987010924339006536693866763078849189869497871752489277315727669547511079303136326388638480680630822677173084810848784554433394382029956739707395702556105138001868786944077871569844771c= 91652340468387584012845155237237896957786753396661434559421169499111938419733760364914054180181470453332534789456757372866493406817246725731113863637159054175158914882334950110118713886213759125279941357012004180349611604118066085014934218543579248275421019690815403585470855502464076600672369539603525850924e= 65537phi = n-1d =gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 题目:rsa_10 解答: 给了两组c，n，p，q，通过中国剩余定理求得结果为c，n1*n2为n，求解得到flag 代码 12345678910111213141516171819import gmpy2import libnump1= 241529374856419543994843741620715478233q1= 329891612475502969315412700917758756573p2= 179415062328238613586720079938194290751q2= 281209161331996176661322999324485217597n1= 79678514931584446837886795964984740987618425126262080131520484181733127175509n2= 50453159207651801862952938090505477143503284591035016948403490994601319545347c1= 10906371165492800616190805676717306177005704888515733402096006986355132032250c2= 47055855052437161522184969745110429012879528443871661682592147046669796586664e = 65537n = n1*n2n1_ni = gmpy2.invert(n2,n1)n2_ni = gmpy2.invert(n1,n2)c = (n2*n1_ni*c1+n1*n2_ni*c2)%nphi = (p1-1)*(p2-1)*(q1-1)*(q2-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 题目：rsa_13 解答：给了两组c和n，并且n1，n2有最大公约数p，由此求得q1，q2，求得flag 代码 123456789101112131415161718import gmpy2import libnumn1= 14344966075668457197926805093252019643096573510969721322719333921005737087381900449540855412424548701204134893993421731511948833767143851141078209382285846501386535725301259909239487164541050781598400430159674920170854404496253398222187307367926322625492497171740002969789815008039987485265892529966452609000393813395779113860224081603944565240880582129475822907507399743470085845133711696533090310948349344084563385664363625995999399255547593760021153639514720877652246066221504678395471466612295627656516850262088529244725814466732348833167839822545350219641690764981001428685344377698209527688737137187300399652993n2= 12354218348882658855939557374675440240130593637412960903022784670883099080512624736064231265886849271910351937451997751749093644637238859633012706230887428376122240805168054483532576336852668163683367625468673502957503469509123739755819238781219308756042088817872420155442438195380803116150498980766272244743798236039791910368557658313836740247547559284129302204970113950049895139613500250641481434700366895302374051200743877172702615189237557067101522920447615629272986158643661393610029180590415625821891554368097074431230829448921269825593886700360922071375933729554358494473990274497958858233048122738508242423439c1= 3691123354676066697059437937998979583921581870731150079375228838089668944155347573115895745939257000857077746797136413811508634456041342500337302101225465437119807883492455873112323783750970718926005237215996705821476132706795935577193711973896496979170206973337515061654337654274989697617761256418417804735475939505284666094122467326381674631123530317439987013961787043442129186254743721364414447230567446822751926033047452822024681275085831713997686837779667260888016072279588480296674703292539294133901503225011837599317942181453227103095922082421095286788644523456206687517063265624595424684296819286062613760042c2= 5938408686309543013293741535567205151131688865994815122696735470416646965603186344765655319536668785559696396104442531438099421602193304800760866674863437267379695326984063895846835762801125090313445489510683263350964708721907377863520679697909959118156916287172182350863938539461166083625073905275280319815502103888903393913834228224181613416918191464536553417181893783896959345196250270792673371830038465845317178867867078669131493698960171589833480768462627600224827986249429611594755180062966252940786732981155206917654348842803640264421695660795812804373210578066663145314490990520854537552802784407185492236744e=65537p = gmpy2.gcd(n1,n2)q1 = n1//pq2 = n2//pphi1 = (p-1)*(q1-1)phi2 = (p-1)*(q2-1)d1 = gmpy2.invert(e,phi1)d2 = gmpy2.invert(e,phi2)m1 = pow(c1,d1,n1)m2 = pow(c2,d2,n2)print(libnum.n2s(int(m1)))print(libnum.n2s((int(m2)))) 题目:rsa18 解答：给的e和phi不互素，找到e与phi的最大公因数gcd，将e/gcd当作新的e，求得m再开gcd次方得到flag 代码 123456789101112131415import gmpy2import libnump= 179604728901172884984546444098336951299567226578637956867234955273321950834253763455974908411986208869587996429208317419915541879829705695083899455584410844347380529355478252408255665437124675873347322572413775553300676365369297224009959989495411452768654413529438720408670663273782756277912404468420962465297q= 173812808579656497809794049676143957530187304874982238246182308756968315404682483726756662221017110382295012325999009417177266772549812121470834293121487863992068948158282535382396055587629081656872380987341085769570778778669919312677737719340626660293905750991112916961702537446688565242955846309244801936781e= 298c= 10877632494141323696706173060086601121355884259234525310108848169016343902980600845727568845840567726459597646880426553618145392261925420045090468239137708021360087031552255008560875384082156512208224524860549260224921452504096206527857951948234851544501022714642000242331900097894216267245750310618972277142398661493280224445067919972096475478247725627682511339310203665988973259583184028008064493780090233902782416178723036468013857367850280612841182686428704717939119216042691392502115511334107971111076296702241411286865983278698999230209388059621673227839004725621075278503145071860800081826179749895009884713055phi = (p-1)*(q-1)gcd = gmpy2.gcd(phi,e)e = e//gcdd = gmpy2.invert(e,phi)m = pow(c,d,p*q)m = gmpy2.iroot(m,2)[0]print(libnum.n2s(int(m))) 题目:rsa20 解答：e=2 代码 1234567891011121314151617181920import gmpy2import libnump= 122148491423639510060358520247326001415378756960123061340205031810235511253496233656913937819798161138467669802058794431258364815048474953088507274866256378381409951959750689384174071189227238884101846565741054406768547752624840426474750191838000550894022573930877154168207130498171735566553517132962856855111q= 142755578574113482683875150345372577363277111983736520709390192691018628850982550669601255375276434229753811206425659062428721779518168263620205357414671725791655926862817648459031593998074454782619982558995296893592414687691579260619395713067522690127560706829880215532804483197706245921702087884445862908311n= 17437378565136796938110429615460109306513763994515441361700826128854509816577500859330683620324942811798278054720514628441058958796253590667597639564320226081313246692273260392020172668686109508486701867559622051759183126919749044186432732690010275229298964648509739981889494014237283495021762548037876030067888443161621760780099178071080783305102758292721482026470985598146884711243792995042285939445306378914554641176698591510703687482228868400552567474489250501034857093624184577568397256397519711404394386053806918127762571356839381312261171823757803194242506737946861441555551672977659019959562416882973604727521c= 3136716033729239841651527855193478838856206237778382623476323002673660140993283468296727521269046606643005570111263565370046029024734759921698482194871684883853668185647585044859555880105903361901008649e= 2inv_p = gmpy2.invert(p, q)inv_q = gmpy2.invert(q, p)mp = pow(c, (p + 1) // 4, p)mq = pow(c, (q + 1) // 4, q)a = (inv_p * p * mq + inv_q * q * mp) % nb = n - int(a)c = (inv_p * p * mq - inv_q * q * mp) % nd = n - int(c)#因为rabin 加密有四种结果，全部列出。aa=[a,b,c,d]for i in aa: print(i) print(libnum.n2s(int(i)))","tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"低解密指数攻击（e很大）","date":"2022-01-22T09:36:14.000Z","path":"2022/01/22/低解密指数攻击（e很大）/","text":"RSA低解密指数攻击 攻击原理使用wiener攻击(基于连分数的特殊类型攻击)： 需要满足的条件： d","tags":[{"name":"RSA","slug":"RSA","permalink":"http://example.com/tags/RSA/"}]},{"title":"PS基本工具","date":"2022-01-21T05:59:01.000Z","path":"2022/01/21/PS基本工具讲解/","text":"啥也不是 放大镜：放大图片，点击alt+拖动鼠标，缩小图片，ctrl+0：图片回到全部显示。 小手：拖动图片 图层属性面板：图层一层一层覆盖 混合模式：两个图片以特殊的形式混合在一起 图片裁切（需要特定尺寸） 选框工具裁切：一般不使用，一般用此工具选中图片中的某一部分。 套索工具：一般不使用，一般用此工具扣出图片中的一些人或物。 裁切工具：裁切图片和画布。 导航栏选择图像找到图像大小，输入特定的像素值，作用：把图像变一个像素的尺寸，图像会出现压扁和拉升的现象。 导航栏选择图像找到画布大小，输入特定的像素值，作用：图像会出现裁剪的样式。并且可以拖动找到自己想要的位置。 优点：可以实现同比缩放，ctrl+T,按下shift键可以实现。按下alt实现以中心点进行缩放。 蒙板 ctrl+t：调节图像的大小和位置。 作用：可以实现去除一张照片中不需要的部分，并且不会破坏照片本身。 添加方法：选中图层，在右下角选择图层蒙板。 去除不需要的位置：是用画笔对不需要的部分进行擦除（可恢复）（黑透白不透） 流量：调节擦除程度。 校色 使用图像里的调整。（不建议使用，原因：调整后不便于返回修改） 曲线：调整亮暗对比度。 色彩平衡：调整图片的冷暖色调。 建议使用：选择右下角的创建新的填充和调整图层，使用这里的校色工具进行调整。 钢笔 可以绘制两种路径：直线和曲线。 作用：扣掉图片中的人或物。 移动锚点位置：按下ctrl键，鼠标移动锚点。 移动锚点一边的滑杆：按下alt键，鼠标选择一边的滑杆移动。 建立选区：右键钢笔绘制的封闭框，选择建立选取。 使用蒙版以保证不破坏图片。 精确扣图使用钢笔。 图像修改 修复画笔：修复污点并且很好的和周围融合。 仿制图章工具：完全复制所选部分。 修补工具：将一部分图像复制给另一部分。","tags":[{"name":"PS","slug":"PS","permalink":"http://example.com/tags/PS/"}]},{"title":"RSA共模攻击（m，n相同）","date":"2022-01-21T04:17:05.000Z","path":"2022/01/21/RSA共模攻击（m，n相同）/","text":"RSA共模攻击，m，n相同，c，e不同。 攻击原理对于m，n相同，有$c_1$、$c_2$,$e_1$、$e_2$。 首先$c_1$、$c_2$,$e_1$、$e_2$满足关系 \\begin{cases} c_1\\equiv m^{e_1}mod(n) \\\\ c_2\\equiv m^{e_2}mod(n) \\end{cases} $e_1$、$e_2$互素 存在$s_1$、$s_2$满足 e_1*s_1+e_2*s_2=1所以有 c_1^{s_1}*c_2^{s_2}\\equiv (m^{e_1}mod(n))^{s_1}*(m^{e_2}mod(n))^{s_2}\\equiv m^{e_1*s_1+e_2*s_2}\\equiv m \\quad mod(n)所以 m\\equiv c_1^{s_1}*c_2^{s_2}mod(n)因为$s_1$、$s_2$为一正一负，所以需要对负的取逆元，假设$s_1$为负,则 ${c_1}^{-1}$ 满足 {c_1}^{-1}c_1\\equiv1mod(n)所以有 m\\equiv ({c_1}^{-1})^{-s_1}*{c_2}^{s_2}mod(n) $e_1$、$e_2$不互素，且gcd($e_1$,$e_2$)=t 存在$s_1$、$s_2$满足 e_1*s_1+e_2*s_2=t所以有 c_1^{s_1}*c_2^{s_2}\\equiv (m^{e_1}mod(n))^{s_1}*(m^{e_2}mod(n))^{s_2}\\equiv m^{e_1*s_1+e_2*s_2}\\equiv m^t mod(n)所以 m^t\\equiv c_1^{s_1}*c_2^{s_2}mod(n)因为$s_1$、$s_2$为一正一负，所以需要对负的取逆元，假设$s_1$为负,则 ${c_1}^{-1}$ 满足 {c_1}^{-1}c_1\\equiv1mod(n)所以有 m^t\\equiv ({c_1}^{-1})^{-s_1}*c_2^{s_2}mod(n) 解题脚本123456789101112131415161718192021222324252627282930#1 RSA共模攻击 n，m相同，c，e不相同import gmpy2#gcd(e1,e2)=1#使用欧几里得算法计算最大公约数，和s，tdef egcd(e1,e2): if e1==0: return (e2,0,1) else: g,y,x = egcd(e2%e1,e1) return (g,x-(e2//e1)*y,y)n=c1=c2=e1=e2=s=egcd(e1,e2)s1 = s[1]s2 = s[2]#找负数求逆元if s1&lt;0: s1=-s1 c1=gmpy2.invert(c1,n)if s2&lt;0: s2=-s2 c2=gmpy2.invert(c2,n)m=(pow(c1,s1)*pow(c2,s2))%n","tags":[{"name":"RSA","slug":"RSA","permalink":"http://example.com/tags/RSA/"}]},{"title":"CTF小学生——RSA班wp1","date":"2022-01-12T09:02:27.000Z","path":"2022/01/12/CTF小学生——RSA班wp/","text":"CTF小学生——RSA班解题过程 题目：风二西_RSA1 e=1 (风二西原创题) 解答:打开看到e=1，m就是c，使用libnum库的n2s()函数直接求解得到flag 代码: 123import libnumflag=56006392793403067781861231386277942050474101531963376999457063633948500765747587998496106575433840765print(libnum.n2s(flag)) 注：libnum库一些函数介绍 libnum.n2s() 整数转字符串 libnum.s2n() 字符串转整数 libnum.b2s() 二进制位串转字符串 libnum.s2b() 字符串转二进制位串 libnum.generate_prime(n) 生成n位素数 libnum.factorize(n) 分解质因数n 题目:风二西_RSA2 975 还是e=1 风二西原创题 解答：e=1，这次给了三个n，对同一个m进行加密，所以m要比n要大，可以得到同余式 \\begin{cases} m\\equiv c_1^emod(n_1)\\\\ m\\equiv c_2^emod(n_2)\\\\ m\\equiv c_3^emod(n_3) \\end{cases}解同余式得到m，通过libnum.n2s(m)得到flag 代码： 12345678910111213141516171819import libnumimport gmpy2n1= 172774622114813683746188230007837413819c1= 170260248491697016437095929037490480036n2= 160333927436069409658483084503168246581c2= 45134242975344810542214361639231372051n3= 170109598387116572557100744899522621873c3= 47903985600747367026642413789127948969M1 = n2*n3M2 = n1*n3M3 = n1*n2m = n1*n2*n3M1ni = gmpy2.invert(M1,n1)M2ni = gmpy2.invert(M2,n2)M3ni = gmpy2.invert(M3,n3)flag = (M1ni*M1*c1+M2ni*M2*c2+M3ni*M3*c3)%mprint(flag)flag=56006392793428520954660428183473354430118021091291952136948688581395416086505962460430292111645161341print(libnum.n2s(flag)) 题目：风二西_RSA3 975 是同模？还是共模？ 风二西原创题 解答：发现是共模攻击，n相同，c、e不同，且e1,e2互素，直接套用脚本求解 脚本 1234567891011121314151617181920212223242526272829303132#3import gmpy2import libnum#gcd(e1,e2)=1#使用欧几里得算法计算最大公约数，和s，tdef egcd(e1,e2): if e1==0: return (e2,0,1) else: g,y,x = egcd(e2%e1,e1) return (g,x-(e2//e1)*y,y)n=29143645421250041964610131519796316209374397204155469976436282970270223093227270116936148775043815634542786053957754648588547916685855943233747355087950255420084529208272959726798944771529812280211595246632324164318414568921620903228792312422949049251124675105357096001511900182384982136608469004475877350443767898973989583173128030434940886052792797816540787358610263798109517476404857884853737946851599020695228874374154464554424052641473818628619315542580958678324625251508687755281620720247997239232768548283841103391498016239630806481980671475372463330330690559668182431046684389707596830868072082755735808300723e1= 2333e2= 23333c1= 28464542187422191031850220803592681443982634383785165404787481127746742239081112082691277387380864221897493018787897237288845518265099977907474953791840485909853466983639444091059228300562651089136949321590723345012238904080799669440783536285513938852463305681933753888253442824802846555416205812335548719095747051066829873263830078172121545700751405449738971567108453397818830862826958070177783517124845910659072272862984614381062761492904361633028713990053614106081540076229259722671415935974092569803776537579754503894924503109547447412708945156397515728781495017776632238192662716448961774725838090086512922104959c2= 25460740614301054941307417174277347322525553796796196288752769907863955398765515335380778529183621484339197914989256662774198864351177654624197775903029703756861955442584045861986636864875901226135976736671991519278805887617112679731304236414795141091073965816301344099945916381853638867328898132344214266933361239131644854117821204868171505133539861191262265599453830009333580296852518159984059120727521818924305349230266951553997005351779068782851592785429670130975251007122036733544487495703754895368638401347707384114165405725474647288045480904543934563092673393523874294830739729422653819421294571780102207292072s=egcd(e1,e2)s1 = s[1]s2 = s[2]#找负数求逆元if s1&lt;0: s1=-s1 c1=gmpy2.invert(c1,n)if s2&lt;0: s2=-s2 c2=gmpy2.invert(c2,n)m=(pow(c1,s1)*pow(c2,s2))%nprint(m)m =56006392793403061952490523536016583124460187958714590455626182382537881626460510602357778657835299453print(libnum.n2s(m)) 题目：风二西_RSA7 976 工具脚本一把梭吧 解答：打开题目是低解密指数攻击，使用脚本解密得到flag 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import gmpy2import libnumdef transform(x, y): # 使用辗转相处将分数 x/y 转为连分数的形式 res = [] while y: res.append(x // y) x, y = y, x % y return resdef continued_fraction(sub_res): numerator, denominator = 1, 0 for i in sub_res[::-1]: # 从sublist的后面往前循环 denominator, numerator = numerator, i * numerator + denominator return denominator, numerator # 得到渐进分数的分母和分子，并返回# 求解每个渐进分数def sub_fraction(x, y): res = transform(x, y) res = list(map(continued_fraction, (res[0:i] for i in range(1, len(res))))) # 将连分数的结果逐一截取以求渐进分数 return resdef get_pq(a, b, c): # 由p+q和pq的值通过维达定理来求解p和q par = gmpy2.isqrt(b * b - 4 * a * c) # 由上述可得，开根号一定是整数，因为有解 x1, x2 = (-b + par) // (2 * a), (-b - par) // (2 * a) return x1, x2def wienerAttack(e, n): for (d, k) in sub_fraction(e, n): # 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数 if k == 0: # 可能会出现连分数的第一个为0的情况，排除 continue if (e * d - 1) % k != 0: # ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n) continue phi = (e * d - 1) // k # 这个结果就是 φ(n) px, qy = get_pq(1, n - phi + 1, n) if px * qy == n: p, q = abs(int(px)), abs(int(qy)) # 可能会得到两个负数，负负得正未尝不会出现 d = gmpy2.invert(e, (p - 1) * (q - 1)) # 求ed=1 (mod φ(n))的结果，也就是e关于 φ(n)的乘法逆元d return d print(&quot;该方法不适用&quot;)n= 76230002233243117494160925838103007078059987783012242668154928419914737829063294895922280964326704163760912076151634681903538211391318232043295054505369037037489356790665952040424073700340441976087746298068796807069622346676856605244662923296325332812844754859450419515772460413762564695491785275009170060931e= 19252067118061066631831653736874168743759225404757996498452383337816071866700225650384181012362739758314516273574942119597579042209488383895276825193118297972030907899188520426741919737573230050112614350868516818112742663713344658825493377512886311960823584992531185444207705213109184076273376878524090762327c= 51129364468759654610691969029018077135681286452403720342930701227318278867902499808039789577625318001225092301902887105131054762178225243088434961189430225241008880599986750881642671737591885881772112932433413661123951666955204365852817050308723133101090183352917490942744092495494108693783108146041173249096d = wienerAttack(e, n)m = pow(c,d,n)print(m)m = 56006392793404066335162594342958753697724514638307721555579703515247366913832367671547128991134803325print(libnum.n2s(m)) 题目：风二西_RSA11 976 很简单的 解答：e=3 很小，使用低加密指数攻击，直接使用开放 代码: 123456import gmpy2import libnume = 3c= 175676150266627654394509074891404164566854171033140030366264579869316998382531731238646439305983889007988827572538127555289345112927153391354273822296560289724299704969505044786520464609064991216105190142528210147105407231359976850587913961569714117627302606370251386092433653181453744354380262673514341m = gmpy2.iroot(c,e)[0]print(libnum.n2s(int(m))) 题目：RSA_5 解答: 使用openssl解密 openssl rsa -pubin -in pubckey1.pem -text -modulus 得到公钥 n和e 使用yafu分解得到p和q 读取flag1.pem文件得到密文c 代码: 123456789101112import gmpy2import libnumwith open(&quot;flag1.pem&quot;, &#x27;rb&#x27;) as f: c = int(f.read().hex(),16)n = 0xBD98A36A39B78C4069B35001669DCEAB74E64569C15B58349839222101D5C79BA3C3855998B4ABF074C2CFD4FA36B406D85C1B935E18EF791C3A2EA33A0834236483F8E024E50659107334C087139B7AC5069644B98615A38E433D79E9EDE167AA05601B915FE01E179E0C6854DAD5B3B58263E793DB62E7674EB72110D2C4C230561DCD8B3E75C03CFF48E1F5057C1FE4B4B8981EE2AF68DB6B14E763F9B2260B1F7C5E4DA274EC91B6A47B6016DA9ED4656E3628D2007F331C4828DD11A5CE028F3D7E49512E69D44C3461AE2CFFED8273DB9AEC17CCB8759D7DB321F6FFD4A6FE90C305430D4210C4DC98BA8E7BF4D8BB9D0CA87FD3D34B97AE4040A27405e = 65537p = 154707169869912965572264038807085588160825389898605792084774698420524113924278063744211942790334520717545961407718606461114604633654138753720598358336593011214128451966613914165721695134758193524181137401802709098935179245573044474461382557698071520126327208903405426672668774245334192540031083738467279228573q = 154707169869912965572264038807085588160825389898605792084774698420524113924278063744211942790334520717545961407718606461114604633654138753720598358336593011214128451966613914165721695134758193524181137401802709098935179245573044474461382557698071520126327208903405426672668774245334192540031083738467279227529phi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(libnum.n2s(int(m))) 题目：rsa_12 解答：使用中国剩余定理求得m^e次方；在对m开e次方得到flag 代码 1234567891011121314151617181920import gmpy2import libnumn1= 17252219271006504217652265353315644822689102990264622695769709059400124061303815961435216889436124568403595230367283469177657079450282677401376417062215262907612929047987828085558578625928693928880671915353617997183001765819850856038580986341451354677532575518429983180603767256598249850685593173010163922025509601326326321500794396556036639237902931276631659616154399922016651201757258733618622358585354871247473186946333948694594826747068676868873107272038233419801485049530755094873655667843995961470816804517358517607436960955104105230718119794284575683888642896061373529872181319831826417002365270413786886230051n2= 19392925441119564341555603187441887561478389980762223332359001899590543508270070429654062355050348208292024600480329586395279855747079257790641213158649916066398059169788447789331043090129266878932663273082843414238406770932078873343241723699886063134727135260077063212826785200734480057973678585768855053011930755630200714822903690528979185570885528147643237687242400511057790185488304578078790856756920715781906997572283811891912799721107417543601482580382717235530747319855573633433655463698238396450160804967421072666570521835633096983265294367798652838134815267442249458052921576108382421808074197496756326651569n3= 16308931821160738277381987335188301508935609331979902438602520050075201076202607797174570476508752749939535558232194093916143544677788076366822749055817956020216396168552177076772752147703927950913692270761747051591209445357878745137592704614863982995068341117660355411746655172287336173901923306626058276062979558685583245075792769514424287449989413646849923270337368271506480123292135149298907255291763788483970298044852870009792041207447026753646424275224352404748955511851564024075916958820790827323891618229420999340841099848014212559544340277261118686124000247691040332469447586013408096906429110903073529177959c1= 9862674916042529918536092338186428078982165644848222161352523997087450888782685666699966847951244365280637841803438717743795168091292517068068919062777145241306310697080809891248377646719341230881649623908246452956514392532087121381507177426996878604461394499084196249530601094001617489710803912131948279913297986636209231828019500643894617602429551750854441781737312059554753531678468044053831648273296572848789992174657175515114338665837154883246900742720531354855559563140404249577415693939022593259289194459953438105757899587447271931995649255159342329359652305879885554769630544770966155000620489702683568172742c2= 11681944755560676324959185187799099414481370223339263320227032572815322776036541246094706574111230437855451279755698238561172128989213481236089341690470560136591884018327949217955636371986098667096134214617286477749483182783065573382874881799002834245675144902527287434610910847735302841154506319451669009489558469224087072461557995913424041810554224864384732427620959534242904535632660788940451410731486496846273769609538396613198060913461220093973836108967904185914468061114191996582010088055074020730119033560498292937987199687933047535216255557403558690069800171880133754299157682045716215838413976578382030795387c3= 12668278504770849369921196574913946259264733368388011806162184024969059726807829014394443240915036260802428499115569055027868892016678593665990881075365267878346964234838583098736850357277091593641798510490187797581111760056196425611939907216616878668062988351559417972184145303414105959155690055918434365061272003723017407148417783932381053632869804167234724945360916258465050598759067199479571813805864105608035898489711508922286844624373009203267737364854355266040795917980105237637939321394405488989345144898194063338461873834505409676538338655407786146050320466683048676780486336615260073541849747038981327813976n = n1*n2*n3M1 = n2*n3M2 = n1*n3M3 = n1*n2M1_ni = gmpy2.invert(M1,n1)M2_ni = gmpy2.invert(M2,n2)M3_ni = gmpy2.invert(M3,n3)m =(c1*M1*M1_ni+c2*M2*M2_ni+c3*M3*M3_ni)%nlist = [11,13,17,19]for i in list: if gmpy2.iroot(m,i)[1]: print(libnum.n2s(int(gmpy2.iroot(m,i)[0]))) 题目：RSA_9 解答：就是将c换做m，d换做e来求解即可 代码 123456789101112import libnumimport gmpy2p= 97368485043593006405417010779079380120093793034626963175677083523770994936525207940968193918786949567460392401775664093619173263261961563254058029894381986376275758006361044924787173495349206752585567053148516364028668638365676608691913705470536048404291284013185217624584284180593606281872606674303227862923q= 174034507670751544663833619122758532253821916016434057019886746556436073565496931298817122456263338650062754783803599969233256462434713772953714031268092314238169815901012809393600325432808839406464715247202866205781781379919342815514475667193698142923567276511836660769097557234679842172400378371421781964289m= 10713159978080595248303368136468725248428004219265383017568301839870142446158283601395319409739267941310957665427316430008931224971372871063315206268306110608326979812846886034642104794304853873192876460915559231227506777599442060327993342928268503696889652417983518056546140617858431621418835939458147783959307745523951841137415442238550765735249662192808694822637569812286855868419594276671181075389377949452992838748913612817680444419095179848524538089268826799430007066454995062821698762487766844583651126504070187331835027249508337718321126942529727464313184539455069391263828081876598132257030625297646910710698d= 9390237469625625327767772772501860104758101441676147056413733378437848559772090449906444146313965320608216054116514082700525563243843771204901839503307479128967925438407562718344032952875123364816506810638856925864160725041981647121465162190807436028496569031178392890553177399355087553209625455734016456610191995005421761565733358070901800953003865665637614771105080265950575370421882124992956415586236776481116126106171771156040712750560153951276387711991194466653974368467861952058543035030816993478005980029315268610250448820942344432392048700822441849816775252185085593277697772013794833419946099360440772003135n= 16945476357208644122981981769374646293926105553473297697614690692652601713322227208661975312188938407555360864148584038092323753063552504666101719934810973632634565975015494529491878727459181230406832788393966249955724078848021959836773296479882218413561668025756126880165471682246491275523240659976474618187166357040262223313242756132850124163812125138317620789358310094970897417863278091383242119765582782451173174886739833284579593252969063972226490849473760753219069834155364181062555776029449332377688052659981492134779226642225005427449494407806051665362319573826702559006783213306262376903229146869818573156747phi = (p-1)*(q-1)e = gmpy2.invert(d,phi)c = pow(m,e,n)print(libnum.n2s(int(c)))","tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"RSA基础","date":"2022-01-12T03:58:27.000Z","path":"2022/01/12/RAS基础/","text":"RSA基础知识 RSA简介RSA是最流行的非对称加密算法之一。也被称为公钥加密。 RSA是非对称的，也就是用来加密的密钥和用来解密的密钥不是同一个。和DES一样的是，RSA也是分组加密算法，不同的是分组大小可以根据密钥的大小而改变。如果加密的数据不是分组大小的整数倍，则会根据具体的应用方式增加额外的填充位。 RSA作为一种非对称的加密算法，其中很重要的一特点是当数据在网络中传输时，用来加密数据的密钥并不需要也和数据一起传送。因此，这就减少了密钥泄露的可能性。RSA在不允许加密方解密数据时也很有用，加密的一方使用一个密钥，称为公钥，解密的一方使用另一个密钥，称为私钥，私钥需要保持其私有性。 RSA被认为是非常安全的，不过计算速度要比DES慢很多。同DES一样，其安全性也从未被证明过，但想攻破RSA算法涉及的大数（至少200位的大数）的因子分解是一个极其困难的问题。所以，由于缺乏解决大数的因子分解的有效方法，因此，可以推测出目前没有有效的办法可以破解RSA。 RSA实现过程 随机生成两个素数p，q 计算得到n=p*q 计算欧拉函数$phi=\\psi(n)=(p-1)*(q-1)$ 随机生成一个与phi互质的整数e，$gcd(e,phi)=1$ 生成e关于phi的逆元d，$e*d\\equiv1mod(phi)$ 对明文m加密得到密文c，$c\\equiv m^emod(n)$ 对密文c解密得到明文m，$m \\equiv c^dmod(n)$ RSA原理根据欧拉定理 c^{\\psi(n)} \\equiv 1mod(n)又因为$e*d \\equiv 1mod(phi)$,所以有 e*d = phi*k+1(k是整数)又因为$phi=\\psi(n),m&lt;n$,所以有 c^{e*d} =c^{phi*k+1}\\equiv c^{phi+1}\\equiv cmod(n)所以有 c\\equiv c^{d*e}mod(n)又因为对明文m加密得到密文c c\\equiv m^emod(n)所以得到 m\\equiv c^dmod(n)从上面不难看出RSA在一次加密时明文的长度不能大于n。所以当所需要加密的数字过于长的时候，就需要将明文分段加密。","tags":[{"name":"RSA","slug":"RSA","permalink":"http://example.com/tags/RSA/"}]},{"title":"java的特点和对java常见误解","date":"2022-01-11T05:36:14.000Z","path":"2022/01/11/java的特点和对java常见误解/","text":"​ 学习java之前可以了解一下 java的特点 简单性 java没有头文件、指针运算（甚至指针语法）、结构、联合、操作符重载、虚基类。 面向对象 java的面向对象特性与C++旗鼓相当，java与C++的主要不同点在于多重继承，在Java中，取而代之的是简单的接口概念。与C++相比，java提供了更丰富的运行时自省功能。 分布式 java有一个丰富的例程库，用于处理像HTTP和FTP之类的TCP/IP协议。java应用程序能通过URL打开和访问网络上的对象，其便捷程度就好像访问本地文件一样 分布式：分布式计算是计算机科学中一个研究方向，它研究如何把一个需要非常巨大的计算能力才能解决的问题分成许多小的部分，然后把这些部分分配给多个计算机进行处理，最后把这些计算结果综合起来得到最终的结果。 健壮性 java非常强调进行早期的问题检测、后期动态的（运行时）检测，以及消除容易出错的地方，java与C/C++最大的不同在于java采用的指针模型可以消除重写内存和损坏数据的可能性。 安全性 java可以构建防病毒、防篡改的系统。 体系结构中立 编译器生成一个体系结构中立的目标文件格式，这是一种编译过的代码，只要有java运行时系统，这些编译后的代码可以在许多处理器上运行。java编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。 可移植性 java规范中没有“依赖具体实现”的地方，基本数据类型的大小以及有关运算的行为都有明确说明。 作为系统组成部分的类库，定义了可移植的接口。除了与用户界面有关的部分外，所有其他java库能很好地支持平台独立性。可以处理文件、正则表达式、XML、日期和时间、数据库、网络连接、线程等，不用操心底层操作系统。 解释性 java解释器可以在任何移植了解释器地机器上直接执行java字节码，由于连接是一个增量且轻量级的过程，所以，开发过程也变得更加快捷，更加具有探索性。 高能性 字节码可以（在运行时）动态的转换成对应运行这个应用的特定CPU的机器码。 多线程 动态性 java与C/C++相比更加具有动态性，它能够适应不断发展的环境，库中可以自由地添加新方法和实例变量，而对客户端却没有任何影响，在java中找出运行时类型信息十分简单。 关于Java的常见误解 java是HTML的扩展 java是一种程序设计语言，HTML是一种描述网页结构的方式。 使用XML，所以不需要java java是一种程序设计语言，XML是一种数据描述的方式，可以使用任何一种程序设计语言处理XML数据，java API 对XML处理提供了很好的支持。许多重要的XML工具都采用java编写。 java是一种非常容易学习的程序设计语言 要将编写玩具式程序的轻松与开发实际项目的艰难区分开来。 java将成为适用于所有平台的通用性编程语言 java在服务器端编程和跨平台客户端应用领域很有优势。 java是专用的，应该避免使用。 java是解释型的，因此对于关键的应用程序速度太慢了。 早期java是解释型的，现在java虚拟机使用了即时编译器，因此采用java编写的“热点”代码运行速度与C++相差无几，有些情况下甚至更快。 所有的java程序都是在网页中运行的。 大多数的java程序是运行在web浏览器之外的独立应用程序。 JavaScript是java的简易版 JavaScript是一种可以在网页中使用的脚本语言，最初的名字是LiveScript，JavaScript的语法让人想到java，名字也很像，但除此之外，两者并无任何关系。","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]},{"title":"buu——wp2","date":"2022-01-09T07:42:37.000Z","path":"2022/01/09/buu——wp2/","text":"​ 记录一些buu的wp 题目：RSAROLL 注意：得到的 flag 请包上 flag{} 提交 02c01a13-3a86-47de-8648-f03328a5e5d8.zip 解答：打开压缩包，一个题目文档，一个data文档，观察data文档一个{}里面的两个数是公钥，后面一个{}里面的数是密文，将n通过yafu分解质因数，得到p和q，根据题目提示的roll，想到将后一个密文里的数一个一个解密，得到flag 代码 1234567891011121314151617181920212223#rsa roll roll rollimport gmpy2p = 49891q = 18443e =19phi=(p-1)*(q-1)d = gmpy2.invert(e,phi)list = [704796792,752211152,274704164,18414022,368270835,483295235,263072905,459788476,483295235,459788476,663551792,475206804,459788476,428313374,475206804,459788476,425392137,704796792,458265677,341524652,483295235,534149509,425392137,428313374,425392137,341524652,458265677,263072905,483295235,828509797,341524652,425392137,475206804,428313374,483295235,475206804,459788476,306220148]for i in list: print(num2str(pow(i,d,p*q)),end=&quot;&quot;)def num2str(n): tmp=str(hex(n))[2:] if len(tmp)%2==0: pass else: tmp=&#x27;0&#x27;+tmp s=&#x27;&#x27; for i in range(0,len(tmp),2): temp=tmp[i]+tmp[i+1] s+=chr(int(temp,16)) return s 题目:RSA RSA 注意：得到的 flag 请包上 flag{} 提交 解答:解压压缩包得到flag.enc和pub.key文件，首先在python中通过ssl协议打开pub.key文件得到公钥，如下图： 得到n通过yafu分解质因数得到p和q 然后读取flag文件中的密文，解密得到flag 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#RSA!!import gmpy2e = 65537n = 0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDDp = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463#bytes型字符串转化为数字def bytes2num(b): s=&#x27;0x&#x27; for x in b: tmp=str(hex(x))[2:] if len(tmp)==2: pass else: tmp=&#x27;0&#x27;+tmp #print(tmp) s+=tmp num=int(s,16) return num#将 10 进制数值按照 ascii 码转为字符串def num2str(n): tmp=str(hex(n))[2:] if len(tmp)%2==0: pass else: tmp=&#x27;0&#x27;+tmp s=&#x27;&#x27; for i in range(0,len(tmp),2): temp=tmp[i]+tmp[i+1] s+=chr(int(temp,16)) return sr=open(&quot;flag.enc&quot;,&quot;rb&quot;)r=r.read()r=bytes2num(r)# print(r)c = 29666689760194689065394649908301285751747553295673979512822807815563732622178phi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)flag = num2str(m)print(flag) 题目:异性相吸 最近出现了一个奇葩观点，说性别都不一样，怎么能谈恋爱？为了证明这个观点错误，请大家证明异性是相吸的。 注意：得到的 flag 请包上 flag{} 提交 b8c1caee-43d6-42ee-aecc-d72502a5ade2.zip 解答：打开压缩包是一个密文和一个key文本文档，使用010分别打开两个文档，以二进制方式复制，再写脚本将两串二进制数异或，再010中新建一个hex文件，将得到的二进制数粘贴进去（以二进制数粘贴），得到flag 代码 123456789101112#异性相吸key = &#x27;01100001 01110011 01100001 01100100 01110011 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01100001 01110011 01100100 01110001 01110111 01100101 01110011 01110001 01100110&#x27;密文 = &#x27;00000111 00011111 00000000 00000011 00001000 00000100 00010010 01010101 00000011 00010000 01010100 01011000 01001011 01011100 01011000 01001010 01010110 01010011 01000100 01010010 00000011 01000100 00000010 01011000 01000110 00000110 01010100 01000111 00000101 01010110 01000111 01010111 01000100 00010010 01011101 01001010 00010100 00011011&#x27;str1 = key.replace(&quot; &quot;,&quot;&quot;)str2 = 密文.replace(&quot; &quot;,&quot;&quot;)for i in range(len(str1)): if str1[i]==str2[i]: print(&quot;0&quot;,end=&quot;&quot;) else: print(&quot;1&quot;,end=&quot;&quot;)print()","tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"buu——wp1","date":"2021-12-12T10:31:19.000Z","path":"2021/12/12/buu——wp1/","text":"buu第一页需要写脚本的密码题题解。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137题目：变异凯撒注意：得到的 flag 请包上 flag&#123;&#125; 提交str = &#x27;afZ_r9VYfScOeO_UL^RWUc&#x27;i = 5flag = &#x27;&#x27;for s in str: flag+=chr(ord(s)+i) i+=1print(flag)RSA题目：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17求解出d作为flga提交import gmpy2p = 473398607161q = 4511491e = 17phi = (p-1)*(q-1)d = gmpy2.invert(e,phi)print(d)Alice与Bob密码学历史中，有两位知名的杰出人物，Alice和Bob。他们的爱情经过置换和轮加密也难以混淆，即使是没有身份认证也可以知根知底。就像在数学王国中的素数一样，孤傲又热情。下面是一个大整数:98554799767,请分解为两个素数，分解后，小的放前面，大的放后面，合成一个新的数字，进行md5的32位小写哈希，提交答案。 注意：得到的 flag 请包上 flag&#123;&#125; 提交import hashlibdef md5value(key): input_name = hashlib.md5() input_name.update(key.encode(&quot;utf-8&quot;)) print(&quot;大写的32位&quot; + (input_name.hexdigest()).upper()) print(&quot;大写的16位&quot;+(input_name.hexdigest())[8:-8].upper()) print(&quot;小写的32位&quot; + (input_name.hexdigest()).lower()) print(&quot;小写的16位&quot; + (input_name.hexdigest())[8:-8].lower())P6 = 966233P7 = 101999p = 101999966233md5value(str(p))丢失的MD5注意：得到的 flag 请包上 flag&#123;&#125; 提交import hashlibfor i in range(32,127): for j in range(32,127): for k in range(32,127): m=hashlib.md5() m.update((&#x27;TASC&#x27;+str(chr(i))+&#x27;O3RJMV&#x27;+str(chr(j))+&#x27;WDJKX&#x27;+str(chr(k))+&#x27;ZM&#x27;).encode(&#x27;utf-8&#x27;)) des=m.hexdigest() # print(des) if &#x27;e9032&#x27; in des and &#x27;da&#x27; in des and &#x27;911513&#x27; in des: print(des)# 题目:rsarsa# 注意：得到的 flag 请包上 flag&#123;&#125; 提交import gmpy2p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e = 65537c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034phi = (p-1)*(q-1)d = gmpy2.invert(e,phi)n = p*qflag = gmpy2.powmod(c,d,n)print(flag)题目:RSA1注意：得到的 flag 请包上 flag&#123;&#125; 提交p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852import gmpy2import binasciiI = gmpy2.invert(p,q)mp = gmpy2.powmod(c,dp,p)mq = gmpy2.powmod(c,dq,q)m = ((I*(mp-mq))%q)*p+mpprint(binascii.unhexlify(hex(m)[2:]))题目：我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。 注意：得到的 flag 请包上 flag&#123;&#125; 提交import hashlibimport restr1 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;sorce = re.compile(r&#x27;E903...4DAB....08.....51.80..8A.&#x27;)for i in str1: for j in str1: for k in str1: str2 = &quot;TASC&#123;&#125;O3RJMV&#123;&#125;WDJKX&#123;&#125;ZM&quot;.format(i,j,k) m = hashlib.md5() m.update(str2.encode(&quot;utf-8&quot;)) str3 = m.hexdigest().upper() str4 = re.match(sorce,str3) if str4==None: print(end=&quot;&quot;) else: print(str4)题目:RSA3注意：得到的 flag 请包上 flag&#123;&#125; 提交import gmpy2import binasciic1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801e1=11187289c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e2=9647291s = gmpy2.gcdext(e1,e2)a = s[1]b = s[2]if a&lt;0: a = -a c1 = gmpy2.invert(c1,n)else: b = -b c2 = gmpy2.invert(c2,n)m = (gmpy2.powmod(c1,a,n)*gmpy2.powmod(c2,b,n))%nprint(binascii.unhexlify(hex(m)[2:]))","tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"金盾杯wp","date":"2021-12-12T10:25:31.000Z","path":"2021/12/12/金盾杯wp/","text":"记录一下wp——金盾杯 解题过程题目一 ：Hi There 题目描述：flag格式：flag{32位md5} 操作内容： ​ 下载附件，打开文件得到一串字符串：Hhbe1cie93bfTFbcc2hl94e2ea1c91rgab5fei3432Tse498， 看着就是古典密码，然后就用CTF编码工具一键解码，然后在栅栏解密中栏数为8时得到：HiThereTheFlagisb9b91a3ee3c4cb441bce9539cf221f28，得到flag。 flag值：flag{b9b91a3ee3c4cb441bce9539cf221f28} 题目二 ：低音吉他谱 题目描述：低音吉他谱 操作内容： ​ 下载附件，打开文件得到一串很长的字符串，用CTF编码工具一键解码，得到base32密码，在一键解码，又得到base64密码，然后就猜应该是base套娃，一直解base密码，最后得到flag：380a4d5bea49d6a00921d4ed26b9d4ab flag值：flag{380a4d5bea49d6a00921d4ed26b9d4ab} 题目三 ：未完成的宣传图 题目描述：设计师离职，交接当前未完成的工作，其中需求为： 宣传图需要重新设计为矢量图 添加联系方式的二维码 操作内容： ​ 下载附件，打开是一个tmp格式的文件，直接用记事本打开，里面都是一个一个有序对，题目描述说宣传图需要重新设计为矢量图，查了一下矢量图定义：所谓矢量图，就是使用直线和曲线来描述的图形，构成这些图形的元素是一些点、线、矩形、多边形、圆和弧线等，又说添加联系方式的二维码，就想着是有序对这些点构成一个二维码，于是画了一个散点图（如下），看着像二维码，扫一下得到flag。 脚本： 1234567891011import matplotlib.pyplot as pltx = []y = []num = [[24, 24], [36, 24], [48, 24], [60, 24], [72, 24], [84, 24], [96, 24], [120, 24], [156, 24], [192, 24], [228, 24], [252, 24], [348, 24], [360, 24], [384, 24], [396, 24], [408, 24], [420, 24], [432, 24], [444, 24], [456, 24], [24, 36], [96, 36], [156, 36], [168, 36], [180, 36], [192, 36], [216, 36], [240, 36], [276, 36], [312, 36], [348, 36], [384, 36], [456, 36], [24, 48], [48, 48], [60, 48], [72, 48], [96, 48], [156, 48], [180, 48], [228, 48], [240, 48], [300, 48], [312, 48], [336, 48], [348, 48], [384, 48], [408, 48], [420, 48], [432, 48], [456, 48], [24, 60], [48, 60], [60, 60], [72, 60], [96, 60], [120, 60], [132, 60], [168, 60], [180, 60], [204, 60], [216, 60], [252, 60], [288, 60], [348, 60], [360, 60], [384, 60], [408, 60], [420, 60], [432, 60], [456, 60], [24, 72], [48, 72], [60, 72], [72, 72], [96, 72], [144, 72], [156, 72], [168, 72], [192, 72], [216, 72], [264, 72], [276, 72], [324, 72], [348, 72], [360, 72], [384, 72], [408, 72], [420, 72], [432, 72], [456, 72], [24, 84], [96, 84], [132, 84], [144, 84], [168, 84], [180, 84], [204, 84], [228, 84], [288, 84], [300, 84], [336, 84], [348, 84], [360, 84], [384, 84], [456, 84], [24, 96], [36, 96], [48, 96], [60, 96], [72, 96], [84, 96], [96, 96], [120, 96], [144, 96], [168, 96], [192, 96], [216, 96], [240, 96], [264, 96], [288, 96], [312, 96], [336, 96], [360, 96], [384, 96], [396, 96], [408, 96], [420, 96], [432, 96], [444, 96], [456, 96], [156, 108], [180, 108], [192, 108], [216, 108], [228, 108], [240, 108], [252, 108], [276, 108], [288, 108], [300, 108], [348, 108], [360, 108], [48, 120], [72, 120], [84, 120], [96, 120], [120, 120], [156, 120], [204, 120], [240, 120], [264, 120], [276, 120], [288, 120], [372, 120], [420, 120], [456, 120], [48, 132], [60, 132], [84, 132], [120, 132], [168, 132], [204, 132], [228, 132], [252, 132], [276, 132], [288, 132], [300, 132], [312, 132], [324, 132], [348, 132], [384, 132], [456, 132], [36, 144], [48, 144], [96, 144], [108, 144], [228, 144], [276, 144], [312, 144], [372, 144], [384, 144], [396, 144], [408, 144], [432, 144], [456, 144], [24, 156], [36, 156], [84, 156], [120, 156], [132, 156], [144, 156], [156, 156], [168, 156], [180, 156], [192, 156], [240, 156], [252, 156], [300, 156], [324, 156], [336, 156], [348, 156], [384, 156], [456, 156], [24, 168], [36, 168], [48, 168], [72, 168], [84, 168], [96, 168], [108, 168], [120, 168], [132, 168], [156, 168], [168, 168], [180, 168], [192, 168], [204, 168], [300, 168], [324, 168], [336, 168], [372, 168], [384, 168], [396, 168], [456, 168], [24, 180], [48, 180], [84, 180], [120, 180], [132, 180], [192, 180], [204, 180], [216, 180], [228, 180], [240, 180], [276, 180], [312, 180], [324, 180], [336, 180], [384, 180], [396, 180], [444, 180], [456, 180], [24, 192], [36, 192], [48, 192], [60, 192], [72, 192], [96, 192], [108, 192], [120, 192], [132, 192], [144, 192], [168, 192], [216, 192], [288, 192], [372, 192], [384, 192], [444, 192], [456, 192], [72, 204], [84, 204], [108, 204], [120, 204], [132, 204], [168, 204], [192, 204], [216, 204], [228, 204], [240, 204], [264, 204], [300, 204], [312, 204], [324, 204], [336, 204], [348, 204], [360, 204], [372, 204], [396, 204], [444, 204], [36, 216], [48, 216], [96, 216], [108, 216], [144, 216], [156, 216], [168, 216], [192, 216], [228, 216], [252, 216], [276, 216], [324, 216], [360, 216], [372, 216], [384, 216], [444, 216], [456, 216], [24, 228], [36, 228], [72, 228], [84, 228], [108, 228], [144, 228], [216, 228], [288, 228], [300, 228], [324, 228], [360, 228], [372, 228], [384, 228], [420, 228], [444, 228], [456, 228], [24, 240], [36, 240], [48, 240], [60, 240], [72, 240], [96, 240], [144, 240], [156, 240], [180, 240], [192, 240], [204, 240], [228, 240], [252, 240], [276, 240], [336, 240], [360, 240], [372, 240], [384, 240], [396, 240], [408, 240], [420, 240], [444, 240], [456, 240], [48, 252], [72, 252], [84, 252], [120, 252], [144, 252], [168, 252], [192, 252], [204, 252], [228, 252], [264, 252], [276, 252], [288, 252], [312, 252], [324, 252], [336, 252], [360, 252], [372, 252], [384, 252], [420, 252], [444, 252], [456, 252], [24, 264], [48, 264], [60, 264], [72, 264], [96, 264], [108, 264], [144, 264], [156, 264], [180, 264], [192, 264], [204, 264], [264, 264], [276, 264], [312, 264], [324, 264], [360, 264], [384, 264], [420, 264], [444, 264], [456, 264], [24, 276], [36, 276], [48, 276], [120, 276], [156, 276], [168, 276], [180, 276], [204, 276], [252, 276], [312, 276], [324, 276], [360, 276], [384, 276], [444, 276], [456, 276], [72, 288], [96, 288], [108, 288], [120, 288], [132, 288], [144, 288], [168, 288], [180, 288], [216, 288], [252, 288], [264, 288], [276, 288], [312, 288], [336, 288], [372, 288], [396, 288], [408, 288], [420, 288], [432, 288], [444, 288], [456, 288], [24, 300], [36, 300], [48, 300], [72, 300], [84, 300], [132, 300], [144, 300], [156, 300], [180, 300], [192, 300], [216, 300], [228, 300], [240, 300], [264, 300], [276, 300], [324, 300], [336, 300], [348, 300], [396, 300], [420, 300], [444, 300], [456, 300], [36, 312], [72, 312], [96, 312], [192, 312], [204, 312], [216, 312], [228, 312], [240, 312], [252, 312], [288, 312], [336, 312], [360, 312], [384, 312], [420, 312], [456, 312], [36, 324], [48, 324], [108, 324], [132, 324], [156, 324], [216, 324], [228, 324], [300, 324], [324, 324], [336, 324], [348, 324], [360, 324], [372, 324], [420, 324], [444, 324], [456, 324], [24, 336], [48, 336], [60, 336], [72, 336], [96, 336], [120, 336], [144, 336], [192, 336], [228, 336], [252, 336], [288, 336], [324, 336], [336, 336], [348, 336], [360, 336], [396, 336], [408, 336], [420, 336], [444, 336], [456, 336], [36, 348], [48, 348], [60, 348], [72, 348], [84, 348], [120, 348], [132, 348], [144, 348], [168, 348], [180, 348], [192, 348], [216, 348], [228, 348], [252, 348], [276, 348], [300, 348], [324, 348], [360, 348], [384, 348], [396, 348], [408, 348], [420, 348], [456, 348], [24, 360], [48, 360], [60, 360], [84, 360], [96, 360], [120, 360], [144, 360], [180, 360], [192, 360], [240, 360], [264, 360], [276, 360], [288, 360], [312, 360], [324, 360], [348, 360], [360, 360], [372, 360], [384, 360], [396, 360], [408, 360], [420, 360], [456, 360], [120, 372], [180, 372], [204, 372], [216, 372], [228, 372], [240, 372], [252, 372], [276, 372], [312, 372], [324, 372], [348, 372], [360, 372], [408, 372], [432, 372], [456, 372], [24, 384], [36, 384], [48, 384], [60, 384], [72, 384], [84, 384], [96, 384], [132, 384], [144, 384], [156, 384], [204, 384], [216, 384], [228, 384], [240, 384], [264, 384], [276, 384], [288, 384], [324, 384], [348, 384], [360, 384], [384, 384], [408, 384], [432, 384], [456, 384], [24, 396], [96, 396], [120, 396], [144, 396], [204, 396], [216, 396], [228, 396], [252, 396], [276, 396], [288, 396], [324, 396], [360, 396], [408, 396], [456, 396], [24, 408], [48, 408], [60, 408], [72, 408], [96, 408], [120, 408], [168, 408], [180, 408], [216, 408], [228, 408], [240, 408], [252, 408], [276, 408], [312, 408], [324, 408], [360, 408], [372, 408], [384, 408], [396, 408], [408, 408], [456, 408], [24, 420], [48, 420], [60, 420], [72, 420], [96, 420], [132, 420], [144, 420], [156, 420], [168, 420], [180, 420], [204, 420], [216, 420], [228, 420], [264, 420], [276, 420], [288, 420], [300, 420], [312, 420], [324, 420], [348, 420], [372, 420], [396, 420], [408, 420], [420, 420], [444, 420], [456, 420], [24, 432], [48, 432], [60, 432], [72, 432], [96, 432], [120, 432], [168, 432], [180, 432], [192, 432], [228, 432], [252, 432], [288, 432], [300, 432], [312, 432], [324, 432], [336, 432], [348, 432], [360, 432], [372, 432], [396, 432], [408, 432], [432, 432], [456, 432], [24, 444], [96, 444], [132, 444], [144, 444], [192, 444], [204, 444], [216, 444], [228, 444], [240, 444], [252, 444], [264, 444], [276, 444], [312, 444], [324, 444], [348, 444], [360, 444], [372, 444], [396, 444], [420, 444], [444, 444], [24, 456], [36, 456], [48, 456], [60, 456], [72, 456], [84, 456], [96, 456], [144, 456], [168, 456], [192, 456], [228, 456], [240, 456], [264, 456], [276, 456], [288, 456], [300, 456], [312, 456], [324, 456], [348, 456], [360, 456], [372, 456], [396, 456], [408, 456], [420, 456], [444, 456], [456, 456]]for i in num: x.append(i[0]) y.append(i[1])print(x)print(y)plt.plot(x,y,&#x27;o&#x27;)plt.show() flag值：flag{1e52c4c05dcff5fcc54b64e21bcbdc9e}","tags":[{"name":"wp","slug":"wp","permalink":"http://example.com/tags/wp/"}]},{"title":"转轮机加密","date":"2021-12-09T09:11:23.000Z","path":"2021/12/09/转轮机加密/","text":"​ 转轮机加密 ​ 转轮密码机是由一个输入键盘和一组转轮组成的，每个转轮上标有26个字母，字母的顺序随意，转轮之间由齿轮进行连接，当一个转轮转动时，可以将一个字母转化为另一个字母。 特征：​ 有一组有26个英文字母组成的字符串，每个字符串出现且仅出现一次，对应的有密钥和密文，密钥是的大小 1&lt;=密钥&lt;=字符串组个数，密文由一组字符串组成，密钥的个数与密文的长度与字符串组数相同。 解密方法： 1. 通过密钥对字母组成的字符串组重新排列。 2. 通过密文对每一个字母组成的字符串进行重新排列。 3. 然后按列取新的字符串组中的字符串中的每一个字母组成新的字符串组，共26组。 4. 找到符合题意得即为flag。（或直接一个一个试） 题目：字符串组：1: &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt; 2: &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt; 3: &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt; 4: &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt; 5: &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt; 6: &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt; 7: &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt; 8: &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt; 9: &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt; 10: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP&lt; 11：&lt; MNBVCXZQWERTPOIUYALSKDJFHG&lt; 12：&lt; LVNCMXZPQOWEIURYTASBKJDFHG&lt; 13： &lt; JZQAWSXCDERFVBGTYHNUMKILOP&lt; 密钥为：2，3，7，5，13，12，9，1，8，10，4，11，6 密文为：NFQKSEVOQOFNP 脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344import retable=[2,3,7,5,13,12,9,1,8,10,4,11,6]Ciphertext=&#x27;NFQKSEVOQOFNP&#x27;with open(r&#x27;转轮机.txt&#x27;,&#x27;r&#x27;,encoding=&quot;utf-8&quot;) as f: data=f.read()# 转轮机根据table重新排列def wheel_decode(data,table): resultList=[] pattern = re.compile(&#x27;[A-Z]&#123;26&#125;&#x27;) result = pattern.findall(data) for i in table: resultList.append(result[i-1]) return resultListresultList = wheel_decode(data,table)#根据密文重新排列def rearrange(List,Ciphertext): resultList=[] for i in range(0,13): resultList.append(List[i][List[i].find(Ciphertext[i]):]+List[i][:List[i].find(Ciphertext[i])]) return resultListresultList= rearrange(resultList,Ciphertext)# 选取每一列，列出结果def rearrange2(List): resultList=[] s=&#x27;&#x27; for i in range(0,26): for j in List: s += j[i] resultList.append(s) s=&#x27;&#x27; return resultListresultList = rearrange2(resultList)for i in resultList: print(i.lower())","tags":[{"name":"Crypto","slug":"Crypto","permalink":"http://example.com/tags/Crypto/"}]},{"title":"古典密码","date":"2021-12-05T07:16:20.000Z","path":"2021/12/05/Crypto做题总结——攻防世界/","text":"总结一些古典密码 Caesar 凯撒密码 在线解密即可 Morse 莫尔斯电码 密码由.-组成或者是由其他字符替换，格式有两个不一样的字符，组合成一段一段的长字符串。 组成： 点（.）（可由其他字符替换） 划（-）（可由其他字符替换） 每个字符间短的停顿（通常用空格表示停顿） 每个词之间中等的停顿（通常用 / 划分） 以及句子之间长的停顿 幂数加密 ：通过某一进制的幂数对字符进行加密（二进制加密） 二进制幂数加密法：由于英文字母只有26个字母。只要2的0、1、2、3、4、5次幂就可以表示31个单元。通过用二进制幂数表示字母序号数来加密。 密码形式：由1，2，3，4，5，五个数字组成的一段一段或者用某些特殊字符分割的字符串,或者直接求每一段之和得到字符序号。 由于英文字母只有26个字母，由公式可知，只要2的0、1、2、3、4、5次幂就可以表示31个单元。通过用二进制幂数表示字母序号数来加密。例如： 明文： d o n o t p u l l a l l y o u r e g g s i n o n e b a s k e t 字母序号：4 15 14 15 20 16 21 12 12 1 12 12 25 15 21 18 5 7 7 19 9 14 15 14 5 2 1 19 11 5 20 由于4=2^2 所以D加密过之后是2；15=2^0+2^1+2^2+2^3所以O加密后是0123。 python脚本： 12345678910a = &quot;8842101220480224404014224202480122&quot; //求每一段之和a = a.split(&quot;0&quot;)flag = &#x27;&#x27;for i in range(0, len(a)): str = a[i] sum = 0 for i in str: sum += int(i) flag += chr(sum + 64)print(flag) 栅栏密码（Railfence）（传统）：栅栏密码是一种简单的移动字符位置的加密方法，规则简单，容易破解。栅栏密码的加密方式：把文本按照一定的字数分成多个组，取每组第一个字连起来得到密文1，再取每组第二个字连起来得到密文2……最后把密文1、密文2……连成整段密文。（密钥一般为其字符串长度的因数） 栅栏密码（W型）：明文由上至下顺序写上，当到达最低部时，再回头向上，一直重复直至整篇明文写完为止。（密钥可能是小于字符串长度的任何一个数字） 培根密码：加密时，明文中的每个字母都会转换成一组五个英文字母（由A/a和B/b组成）。 特征：给一串字符串，字符串由两种字符组成，将两种字符分别替换成A和B进行解密。 html编码：形如\\&#76;\\&#122;\\&#69;\\&#120;\\&#79;\\&#83;\\&#56;\\&#120;\\&#77;\\&#68;\\&#69;\\&#118;\\&#77;这样的编码。 sacll码加密：通过0-127对字符进行编码。 解码脚本： 123456##ascll码解密flag = input();letters = flag.split(&#x27;/&#x27;)for i in letters: print(chr(int(i)),end=&#x27;&#x27;)#flag=119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100 base64编码：由’A’-‘Z’，’a’-‘z’，’0’’9’，’+’和’/‘组成的字符串密码，结尾可能会有=号。 base32编码：由字母A-Z和数字2-7，组成的字符串密码。 base16编码：数字0-9和字母A-F，组成的字符串密码 RSA(具体原理以后单独总结，知识只根据本题)已知p,q,e，求d 解密脚本: 1234567##rsa已知p,q,e,求dimport gmpy2p = 473398607161q = 4511491e = 17d = gmpy2.invert(e,(p-1)*(q-1))print (d) pyc文件：由py文件编译而成的二进制文件。打开方式：将pyc文件复制到项目目录下，通过终端使用uncompyle6 xxx.pyc &gt; xxx.py 即可反编译为py文件查看。 esaychallenge wp： 反编译二进制文件得到py文件。代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940# uncompyle6 version 3.8.0# Python bytecode 2.7 (62211)# Decompiled from: Python 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]# Embedded file name: ans.py# Compiled at: 2018-08-09 11:29:44import base64def encode1(ans): s = &#x27;&#x27; for i in ans: x = ord(i) ^ 36 x = x + 25 s += chr(x) return sdef encode2(ans): s = &#x27;&#x27; for i in ans: x = ord(i) + 36 x = x ^ 36 s += chr(x) return sdef encode3(ans): return base64.b32encode(ans)flag = &#x27; &#x27;print (&#x27;Please Input your flag:&#x27;)# flag = raw_input()final = &#x27;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#x27;if encode3(encode2(encode1(flag))) == final: print (&quot;correct&quot;)else: print (&#x27;wrong&#x27;)# okay decompiling easychallenge.pyc 发现是flag被3次加密，加密后得到的密文已给出为final。依次解密3次得到flag，脚本如下： 123456789101112131415161718192021222324#easychallengeimport base64final = &#x27;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#x27;def decode3(ans): return base64.b32decode(ans)final=decode3(final)# final=final.split(&quot;\\&quot;)def decode2(ans): s = &#x27;&#x27; for i in ans: i = i ^ 36 x = i - 36 s += chr(x) return sfinal=decode2(final)def decode1(ans): s = &#x27;&#x27; for i in ans: i = ord(i) - 25 x = i ^ 36 s += chr(x) return sprint(decode1(final)) 得到flag：cyberpeace{interestinghhhhh} MD5加密： 特征：由16位或者32位的字符组成，且字符是大写字母和数字或者小写字母和数字。字母大小写要统一。 Url编码： 特征：使用 百分号% + 十六进制数字 组成的字符串。 ​ 编码过程：一个字符/汉字 —&gt; 转化为对应的ascll码值/扩展ascll码值 —&gt; 转化为16进制数 —&gt;在前 面加上% —&gt;Url编码 的一个字符 unicode编码 Unicode码扩展自ASCII字元集,使用全16位元字元集.Unicode目前普遍采用的是UCS-2,它用两个字节来编码一个字符,字符编码一般用十六进制来表示. 例如:\\u4e16\\u754c\\u4f60\\u597dhello world 中文电码 ​ 中文电码表采用了四位阿拉伯数字作代号，从0001到9999按四位数顺序排列，用四位数字表示最多一万个汉字、字母和符号。 特征：由一串数字转变成汉字","tags":[{"name":"Crypto做题总结","slug":"Crypto做题总结","permalink":"http://example.com/tags/Crypto%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/"}]},{"title":"继承-学习笔记","date":"2021-08-26T08:02:38.000Z","path":"2021/08/26/继承-学习笔记/","text":"继承——学习笔记。 继承：更专用的类（派生类）继承更一般的类（基类）的数据和行为。 return a==b; 如果a与b的值相等返回true，否则返回false。 派生类从基类继承所有成员函数和数据成员，但如果继承的行为不合适，可以改变其实现。 派生类对象上可以调用基类的成员函数，但是不能访问基类的数据成员。 对值的变化使用单个类，对行为的变化使用继承。 使用初始化器列表调用基类构造函数，来对数据成员进行初始化。 在派生类中重写成员函数时，如果在写此成员函数中需要调用基类的该函数，需使用基类::函数的方法。 派生类的对象可作为基类对象存储在基类数组中，但是对象数组会将派生类下降为基类对象，并将其数据进行切割，保留基类数据；如需保留派生类对象的所有数据，可使用指针数组进行储存，因为指针是对象的起始地址，每个派生类对象都是基类对象的特例，因此派生类对象的起始地址就是基类对象的起始地址，另外对于派生类重写的成员函数，想要实现根据指针所指向的对象的实际类型来确定访问哪一个成员函数，需要在基类同名的那个成员函数的声明中加入保留字virtual，在派生类中那个成员函数前加入保留字virtual是一个比较好的习惯。注：只有派生类指针可以赋值给基类指针，而基类指针不能赋值给派生类指针。 由类的结构层次中的不同的类访问对象，应使用指针，因为指向各种对象的指针都具有相同的大小——即内存地址的大小——而对象本身可能具有不同的大小。 虚函数：对于函数声明前加入保留字virtual。 当调用虚函数时，编译器都会在运行时确定特定调用中隐式参数的类型，然后调用该对象的适当函数。 虚函数使程序易于扩展，就是基于同一个基类的所有派生类可以储存在同一个基类的指针数组中，使得在对此数组进行循环访问时可以根据特定对象来访问特定的函数。 多态性：一个数组中收集两类问题或几类问题的混合，都基于同一个基类。 多态集合中的对象具有一些共性，但不一定属于同一个类型，继承用于表达这种共性，而虚函数可以实现行为的变化。 当函数具有多态参数时（即可以属于基类的参数，也可以属于派生类的参数），参数变量尽量使用指针或引用，否则会发生切割问题。 如果想要在派生类中重写虚函数，可以在函数声明的某尾加入override保留字，这样如果由于不小心写错了函数，使得函数由重写变成了重载（尤其时忘掉了const保留字），编译器会报错，另外如果不是虚函数的话。编译器也会报错。 当使用一组类时，我们要将他们组织到继承层次结构中，这使我们可以以统一的方式处理不同类的对象。 UML类图：是面向对象系统建模中最常用的图，其基本元素是类和接口。 逐步形成继承层次结构： 列出作为层次结构组成部分的类。 将各个类组织到继承层次结构当中（使用UML类图）。 确定公共职责。 确定在派生类中需要重写那些函数，并将需要重写的函数指定为虚函数。 定义每个派生类的公共接口。 确定数据成员。 实现构造函数和成员函数。 在空闲储存区上分配对象并处理它们。","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"继承","slug":"继承","permalink":"http://example.com/tags/%E7%BB%A7%E6%89%BF/"}]},{"title":"类-学习笔记","date":"2021-08-26T01:57:39.000Z","path":"2021/08/26/类-学习笔记/","text":"有关于类的一些需要注意的点，写下供以后进行复习。 类中数据成员和成员函数定义所需要的所有头文件都要在头文件中声明，并且如果引用了标准库中的头文件，就要包含伪指令 using namespace std；。 只读函数在声明和定义的时候都需要加const关键字。 类中this是隐式参数的指针，不是隐式参数。 类中的成员函数包括 构造函数，析构函数，只读函数，只写函数和助手函数。 封装：隐藏实现细节的同时提供公共接口的过程。 骆驼命名法：名字以大写字母开头，名字中的每一个单词也已大写字母开头。 类的结尾要有分号。 重载：同一个函数名用于多个函数。 将平行向量转化为对象的向量。","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"类","slug":"类","permalink":"http://example.com/tags/%E7%B1%BB/"}]},{"title":"Android_studio学习框架","date":"2021-08-23T07:47:23.000Z","path":"2021/08/23/Android-studio学习框架/","text":"​ 终于学了如何开发一个app，并能实现开发一个小app的能力，为了整理一下这些天学的内容以及方便以后复习，就做了一个学习内容的框架。 框架图","tags":[{"name":"Android studio框架","slug":"Android-studio框架","permalink":"http://example.com/tags/Android-studio%E6%A1%86%E6%9E%B6/"}]},{"title":"排序算法之计数排序","date":"2021-06-16T03:33:05.000Z","path":"2021/06/16/排序算法之计数排序/","text":"这里介绍第八种排序算法——计数排序 原理计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。不基于比较来对元素进行排序。 实现步骤 找出待排序的数组中最大num2和最小num1的元素。 统计数组中每个值为i的元素出现的次数，存入数组C的第i-num1项。 反向填充目标数组：对数组C中的每一个元素(从后向前遍历)从该元素值到1进行遍历，将该元素在数组中的位置+num1填充在原始数组中。其中有一个记录位置的变量，起始大小等于原始数组大小减一，每填充一个值就使其减一，直到原始数组填充完毕。 特性 最好、最坏、平均时间复杂度为：O(n+k) k是原始数组最大值减去最小值加一。 空间复杂度：O(k) 稳定性：稳定 动态演示 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int main()&#123; //待排序数组 int num[10]=&#123;1,5,9,3,4,7,6,8,0,2&#125;; //记录最小值 int num1=num[0]; //记录最大值 int num2= num[0]; for(int i=1;i&lt;sizeof num/4;i++) &#123; if(num[i]&lt;num1) &#123; num1=num[i]; &#125; if(num[i]&gt;num2) &#123; num2=num[i]; &#125; &#125; //对每一个出现的数进行计数 vector&lt;int&gt; num3(10); for(int i=0;i&lt;sizeof num/4;i++) &#123; num3[num[i]-num1]++; &#125; //记录排到的位置 int num4=sizeof num/4-1; //将数值从后向前填入数组中 for(int i=num2-num1;i&gt;=0;i--) &#123; for(int j=num3[i]-1;j&gt;=0;j--) &#123; num[num4]=i+num1; num4--; &#125; &#125; //打印数组 for(int i=0;i&lt;sizeof num/4;i++) &#123; cout &lt;&lt; num[i]&lt;&lt;&quot; &quot;; &#125; return 0;&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"排序算法之堆排序","date":"2021-06-15T15:44:23.000Z","path":"2021/06/15/排序算法之堆排序/","text":"前面介绍了6中排序算法，这里介绍第七种——堆排序。 堆和堆的性质 堆：堆是一种数据结构，一种叫做完全二叉树的数据结构。 堆的性质： 这里我们用到两种堆，其实也算是一种。 大顶堆：每个节点的值都大于或者等于它的左右子节点的值。 小顶堆：每个节点的值都小于或者等于它的左右子节点的值。 如下图所示，就是两种堆 如果我们把这种逻辑结构映射到数组中，就是下边这样 | 9 | 5 | 8 | 2 | 3 | 4 | 7 | 1 || :—: | :—: | :—: | :—: | :—: | :—: | :—: | :—: || 1 | 3 | 5 | 4 | 2 | 8 | 9 | 7 | 原理将数组中的最大值一个一个的交换到第一个位置，即num[0];然后在将其逐个放入数组的结尾，没放完一个，在程序中就使数组的大小减一，即堆的大小减一，直到数组中只剩下一个元素。 实现步骤 将带排序的序列构造成一个大顶堆，根据大顶堆的性质，当前堆的根节点（堆顶）就是序列中最大的元素。 将堆顶元素和最后一个元素交换，然后将剩下的节点重新构造成一个大顶堆。 重复步骤2，如此反复，从第一次构建大顶堆开始，每一次构建，我们都能获得一个序列的最大值，然后把它放到大顶堆的尾部。最后，就得到一个有序的序列了。 将最大值放入堆顶的方法： ​ 根据大顶堆的性质，每个节点的值都大于或者等于它的左右子节点的值。所以我们需要找到所有包含子节点的节点，也就是非叶子节点，然后调整他们的父子关系，非叶子节点遍历的顺序应该是从下往上，这比从上往下的顺序遍历次数少很多，因为，大顶堆的性质要求父节点的值要大于或者等于子节点的值，如果从上往下遍历，当某个节点即是父节点又是子节点并且它的子节点仍然有子节点的时候，因为子节点还没有遍历到，所以子节点不符合大顶堆性质，当子节点调整后，必然会影响其父节点需要二次调整。但是从下往上的方式不需要考虑父节点，因为当前节点调整完之后，当前节点必然比它的所有子节点都大，所以，只会影响到子节点二次调整。相比之下，从下往上的遍历方式比从上往下的方式少了父节点的二次调整。 几个关键值 树的层数，即堆的层数。 倒数第二层非叶子节点数。 剩下未排序列的数组大小。 特性 最好、最坏及平均时间复杂度：nlogn 以2为底 空间复杂度：O(1) 稳定性：不稳定 动态演示 源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;//声明堆排序函数void dui_sort(int num[],int num1);int main()&#123; //待排序数组 int num[10]= &#123;1,5,9,3,4,7,6,8,0,2&#125;; //数组大小 int size1 = sizeof num/4; //每进入一次函数就将一个最大的值放入数列末尾 for(int i=size1; i&gt;=2; i--) &#123; dui_sort(num,i); &#125; //打印数组 for(int i=0;i&lt;size1;i++) &#123; cout &lt;&lt; num[i]&lt;&lt;&quot; &quot;; &#125; return 0;&#125;void dui_sort(int num[],int num1)&#123; //记录树的层数，从第0层开始 int num2=0; int num3=num1; while(num3&gt;=2) &#123; num3=num3/2; num2++; &#125; //记录倒数第二层非叶子节点的个数 int num4=(num1-pow(2,num2))/2+1; //记录要排到的位置数 int num5=num1-1; for(int i=num2-1; i&gt;=0; i--) &#123; if(i==num2-1) &#123; for(int j=0; j&lt;num4; j++) &#123; int num6=pow(2,i)+j-1; if(num[num6]&lt;num[num6*2+1]) &#123; swap(num[num6],num[num6*2+1]); &#125; if(num[num6]&lt;num[num6*2+1+1]&amp;&amp;num6*2+1+1&lt;num1)//可能只有一个子叶所以需要判断是否越界 &#123; swap(num[num6],num[num6*2+1+1]); &#125; &#125; &#125; else &#123; for(int j=0; j&lt;pow(2,i); j++) &#123; int num6=pow(2,i)+j-1; if(num[num6]&lt;num[num6*2+1]) &#123; swap(num[num6],num[num6*2+1]); &#125; if(num[num6]&lt;num[num6*2+1+1]) &#123; swap(num[num6],num[num6*2+1+1]); &#125; &#125; &#125; &#125; swap(num[num5],num[0]);&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"排序算法之归并排序","date":"2021-06-13T12:40:59.000Z","path":"2021/06/13/排序算法之归并排序/","text":"排序算法的10大排序前面已经介绍了5个，下来介绍第6中排序算法——归并排序。 原理归并排序是创建在归并操作上的一种有效的排序算法。算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。归并排序思路简单，速度仅次于快速排序，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的数列。 归并排序是用分治思想，分治模式在每一层递归上有三个步骤： 分解：将n个元素分成个含n/2个元素的子序列。 解决：用合并排序法对两个子序列递归的排序。 合并：合并两个已排序的子序列已得到排序结果。 实现步骤 进入归并排序函数merge-sort(int num[],int low,int high,int mid),其中low是数组起始值，high是数组最大值，mid是数组大小除以2。 设置递归开始条件，即下代码的if(low&lt;high)。 实行分而治之的思想，将数组一分为二，分别执行merge-sort函数，直到剩下一个数，不可再分。 对之前一份为二的数组进行化二为一进行排序合并。 排序合并方法： 定义一个向量。 将两个数组从小到大依次添加在向量后面。 将向量的值赋给原始数组的指定位置。 特性 时间复杂度：不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )，以2为底。 空间复杂度：O(n)。 稳定性：稳定 动态演示 源码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;//函数声明void merge_sort(int num[],int low,int high,int mid);int main()&#123; //待排序数组 int num[10]= &#123;2,3,9,8,7,5,4,6,1,0&#125;; //进入归并排序函数,其中4为数组大小除以2 merge_sort(num,0,9,4); //打印排序好的数组 for(int i=0; i&lt;10; i++) &#123; cout &lt;&lt; num[i]&lt;&lt; &quot; &quot;; &#125; return 0;&#125;//函数定义void merge_sort(int num[],int low,int high,int mid)&#123; //不满足if下的条件递归开始 if(low&lt;high) &#123; merge_sort(num,low,mid,(low+mid)/2); merge_sort(num,mid+1,high,(mid+1+high)/2); int num1 = low; int num2 = mid+1; //将数组中从low到high的数进行排序并存放在num4的向量之中 vector&lt;int&gt; num4; while(num1&lt;=mid&amp;&amp;num2&lt;=high) &#123; if(num[num1]&lt;=num[num2]) &#123; num4.push_back(num[num1]); num1++; &#125; else &#123; num4.push_back(num[num2]); num2++; &#125; &#125; if(num1&gt;mid) &#123; for(int i=num2; i&lt;=high; i++) &#123; num4.push_back(num[i]); &#125; &#125; else &#123; for(int i=num1; i&lt;=mid; i++) &#123; num4.push_back(num[i]); &#125; &#125; //将从low到high的数排序完存入数组中 for(int i=low; i&lt;=high; i++) &#123; num[i]=num4[i-low]; &#125; &#125;&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"排序算法之希尔排序","date":"2021-06-12T04:40:33.000Z","path":"2021/06/12/排序算法之希尔排序/","text":"前面我们介绍了插入排序：从后向前与每个相邻元素进行比较和交换，下面来介绍一下插入排序的改进版——希尔排序：实现不相邻的两个元素进行比较和交换，但实质上也是插入排序。 原理插入排序效率低下是因为其移动元素每次只能移动一位，当排序元素的规模较大时，需要将元素一位一位地从一端移动到另一端。而如果我们能够让元素一次性地移动到较远的位置上，这样无疑就可以避免多次一位一位地移动操作。希尔排序正是基于此原理来优化、提高插入排序的效率。通过指定步长step，将原数组分为step个互相独立子数组，然后通过插入排序对这些子数组分别进行排序(即分组排序)，这时我们称其为step有序数组。当step很大时，我们就可以将元素一次性移动到很远的位置上，为下一次较小的step有序创造便利；不断缩小步长step，重复上述过程建立step有序数组，达到局部有序的目的。当step最终为1做最后一次step有序时，就是我们平常所熟悉的插入排序了，由于该数组已经多次被较大的step进行分组排序了，此时只需要较少次数的元素移动就可以实现整个数组全局有序 实现步骤 定义一个增量gap大小就等于数组的大小。 进入一个while循环，条件是gap&gt;1,作用是当排序结束时跳出循环。 定义一个增量递减的倍数n，可以是小于数组大小的任意值，一般是2，3，4，并执行：gap=gap/n+1；注意这里如果n&gt;2的话，要在后加一，如：gap=gap/n+1，这是为了防止gap为0而不能进入最后一次插入排序;但是如果n=2的话，一定不能加一，否则可能会陷入无限循环。 通过增量将数组划分为若干个小数组。 对每一个小数组进行插入排序。 特性 时间复杂度：希尔排序的时间复杂度与其增量gap有关，平均时间复杂度为：O(n*(logn)^2),以2为底。 空间复杂度：O(1) 稳定性：不稳定 动态演示 源码1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;iostream&gt;using namespace std;int main()&#123; //待排序数组 int num[10]=&#123;0,1,5,9,2,4,8,3,6,7&#125;; //定义增量 int gap=10; //第一个循环:控制增量的，直到增量小于等于1时说明排序已经完成，跳出即可 while(gap&gt;1) &#123; gap=gap/3+1;//10是数组的长度，2是每次增量减小的倍数，+1是为了防止最后增量为0而无法进行插入排序，但当增量减小的倍数为2时不能加1 //第二个循环：通过增量将数组进行分组 for(int i=0;i&lt;gap&amp;&amp;i+gap&lt;10;i++) &#123; //第三和第四个循环：对每一组进行插入排序 for(int j=i+gap;j&lt;10;j+=gap) &#123; int temp = num[j]; int k; for(k=j-gap;k&gt;=i;k=k-gap) &#123; if(num[k]&gt;temp) &#123; num[k+gap]=num[k]; &#125; else &#123; break; &#125; &#125; num[k+gap]=temp; &#125; &#125; &#125; //打印数组 for(int i=0;i&lt;10;i++) &#123; cout &lt;&lt; num[i]&lt;&lt; &quot; &quot;; &#125; return 0;&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"排序算法之插入排序","date":"2021-06-11T14:46:27.000Z","path":"2021/06/11/排序算法之插入排序/","text":"前面介绍了冒泡排序，下面来介绍冒泡排序的姊妹排序——插入排序，虽然他们的原理不同，但是特性上面是完全相同的。 原理通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，直到找到相应的位置插入。 实现步骤 将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。） 特性 时间复杂度 最好情况：数组初始状态是正序的，此时的时间复杂度为O(n)。 最坏情况: 文件的初始状态是逆序的，此时的时间复杂度为O(n^2)。 综上：插入排序总的时间复杂度为 O(n^2)。 空间复杂度：无论什么情况都是O(1)。 稳定性: 稳定 动态演示 源码1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;using namespace std;int main()&#123; //待排序的数组 int num[10]=&#123;0,1,4,7,2,5,8,3,6,9&#125;; //逐个元素插入元素 for(int i=1;i&lt;10;i++) &#123; int temp = num[i];//存储要插入元素的值 int k=i-1;//记录插入元素的索引 while(k&gt;=0&amp;&amp;num[k]&gt;temp) &#123; num[k+1]=num[k]; k--; &#125; //插入元素 num[k+1]=temp; &#125; //打印数组 for(int i=0;i&lt;10;i++) &#123; cout &lt;&lt; num[i]&lt;&lt; &quot; &quot;; &#125; return 0;&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"排序算法之选择排序","date":"2021-06-11T13:48:53.000Z","path":"2021/06/11/排序算法之选择排序/","text":"选择排序是排序算法中最简单粗暴的一种，之前写过冒泡排序，而选择排序与冒泡排序有相似之处，但时间复杂度要比冒泡排序还要高一些，下来介绍选择排序。 原理每次找到数组中的最大值(从大到小排)或最小值(从小到大排)放在前面。 实现步骤 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 重复第二步，直到所有元素均排序完毕 特性 时间复杂度： 最好情况：O(n^2) 最坏情况：O(n^2) 平均情况：O(n^2) 空间复杂度：O(1) 稳定性：稳定 动图演示 源码123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std;int main()&#123; //待排序的数组 int num[10]=&#123;2,5,8,3,6,9,1,4,7,0&#125;; for(int i=0;i&lt;10;i++) &#123; int temp=i;//标记最小元素 //找到最小元素索引 for(int j=i+1;j&lt;10;j++) &#123; if(num[temp]&gt;num[j]) &#123; temp=j; &#125; &#125; //将最小值放入数组最左边 swap(num[i],num[temp]); &#125; //打印数组 for(int i=0;i&lt;10;i++) &#123; cout &lt;&lt; num[i]&lt;&lt; &quot; &quot;; &#125; return 0;&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"排序算法之快速排序","date":"2021-06-10T05:38:49.000Z","path":"2021/06/10/排序算法之快速排序/","text":"前面介绍了冒泡排序，其是交换排序的一种，而快速排序是另一种交换排序，下就来介绍快速排序。 原理通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。 实现步骤 设置两个变量 low、high，排序开始时：low=0，high=size-1(size为数组的大小)。 整个数组找基准正确位置，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面，具体步骤如下： 默认数组的第一个数为基准数据，赋值给temp，即temp=num[low]。 因为默认数组的第一个数为基准，所以从后面开始向前搜索（high–-），找到第一个小于key的num[high]，就将 num[high] 赋给 num[low]，即 num[low] = num[high]，然后执行low++,break;。（循环条件是 low!=high） 此时从前面开始向后搜索（low++），找到第一个大于temp的num[low]，就将 num[low] 赋给 num[high]，即 num[high] = num[low]。,然后执行high++,break;（循环条件是 low!=high） 循环 2-3 步骤，直到 low=high，该位置就是基准位置。 把基准数据赋给当前位置。 第一趟找到的基准位置，作为下一趟的分界点。 递归调用（quick_sort）对分界点前和分界点后的子数组排序，重复2.2、2.3、2.4的步骤。 最终就会得到排序好的数组。 特性 时间复杂度 最好情况：每一次将待排数组划分为两个相等的部分（多一少一也算相等），需要logn次划分，此时时间复杂度为 O(nlogn)(其中log以2为底)。 最坏情况：每次划分只能减少一个元素，快排就相当于是冒泡排序了，需要n-1次划分，此时时间复杂度为O(n^2)。 平均时间复杂度为：O(nlogn)(其中log以2为底)。 空间复杂度 O(nlogn)(其中log以2为底)。 稳定性：不稳定。 动态演示 源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;iostream&gt;using namespace std;//声明快排函数void quick_sort(int num[],int low,int high);int main()&#123; //定义一个要排序的数组 int num[10]=&#123;5,4,3,6,9,8,7,1,2,0&#125;; //调用快排的函数 quick_sort(num,0,9); //打印排序之后的结果 for(int i=0;i&lt;10;i++) &#123; cout &lt;&lt; num[i]&lt;&lt; &quot; &quot;; &#125; return 0;&#125;//定义快排函数void quick_sort(int num[],int low,int high)&#123; int temp; //将基准元素存储在temp中 temp = num[low]; //将low和high的值赋值给i,j,因为马上的递归函数需要用到low和high int i=low; int j= high; //进入循环直到i&lt;j时跳出循环,递归结束 while(i&lt;j) &#123; //进入循环直到i=j时跳出循环，代表一个基准值放置在正确的位置 while(i!=j) &#123; //进入循环直到有一个数与基准数相比相对位置不对应跳出循环 while(i!=j) &#123; if(num[j]&lt;temp) &#123; num[i]=num[j]; i++; break; &#125; else &#123; j--; &#125; &#125; //进入循环，前一个循环从后往前找，这个循环从前向后找 while(i!=j) &#123; if(num[i]&gt;temp) &#123; num[j]=num[i]; j--; break; &#125; else &#123; i++; &#125; &#125; &#125; //将基准元素放入指定位置 num[i]=temp; //进入递归，直到所有元素都排列好 quick_sort(num,low,i-1); quick_sort(num,j+1,high); &#125;&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"排序算法之冒泡排序","date":"2021-06-09T06:28:48.000Z","path":"2021/06/09/排序算法之冒泡排序/","text":"在C++中我们经常会遇到对一组数进行排序，对于排序算法大概可分10种，这里介绍其中最简单的一种——冒泡排序。 原理它走访要排序的元素列，依次比较相邻两个元素的大小，判断是否符合你所想要的规律(从大到小或从小到大)，若符合，则不改变它们的位置，继续寻找下一组，若不符合，则交换两个数的位置，继续判断下一组，直到最大值或最小值出现在数组末尾，在从头开始，将第二大或第二小的数放置末尾，直到数组排序完成。 特性 时间复杂度 最好情况：数组初始状态是正序的，一趟扫描完即可完成排序，所需要比较次数C和需要交换次数M均达到最小值 Cmin=n-1;Mmin=0; 此时的时间复杂度为O(n)。 最坏情况: 文件的初始状态是逆序的，需要n-1趟扫描才能完成排序，每一趟扫描需要n-i次比较，每次比较之后都需要进行交换(需要执行3次操作)，此时的比较次数和需要移动的次数均达到最大值 Cmax=(n-1)n/2~~O(n^2); Mmax= 3(n-1)n/2 ~~O(n^2)。 综上：冒泡排序总的时间复杂度为 O(n^2)。 空间复杂度 最好情况：数组初始状态是正序的，不需要交换元素，就不需要临时变量，空间复杂度为：0。 最坏情况：开始数组顺序为逆序的，每一次比较都会交换元素，空间复杂度为：O(n)。 综上：冒泡排序的平均空间复杂度为O(1)。 稳定性: 因为若相邻两个元素相同，不会交换位置，所以相同的元素的相对位置不会发生改变，所以冒泡排序是稳定的。 相关概念说明 时间复杂度 对序列数据的总操作次数，反映当n变化时，操作次数呈现什么规律。 空间复杂度 是对一个算法在运行过程中临时占用的存储空间大小的度量。 稳定性 稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。 不稳定：如果a原本在b前面，而a=b，排序之后a可能会出现在b的后面。 动态演示 源码1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;using namespace std;int main()&#123; int num[10]=&#123;5,2,6,8,9,7,4,1,3,0&#125;;//待排序的数组 for(int i=0;i&lt;10;i++) &#123; //若提前排好了直接跳出 int num1=0; for(int j=0;j&lt;10-i-1;j++) &#123; if(num[j]&gt;num[j+1]) &#123; swap(num[j],num[j+1]); num1++; &#125; &#125; if(num1==0) &#123; break; &#125; &#125; //打印排好的数组 for(int i=0;i&lt;10;i++) &#123; cout &lt;&lt; num[i]&lt;&lt; &quot; &quot;; &#125; return 0;&#125;","tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"}]},{"title":"BMP格式图像文件的处理","date":"2021-06-08T01:53:33.000Z","path":"2021/06/08/BMP格式图像文件的处理/","text":"与png和jpeg格式不同，BMP格式非常简单，因为它不使用数据压缩，因此BMP文件(二进制文件）很大，现实中不常用到，不过，图像编译器可将任何图像转换为BMP格式。下来介绍用于编辑BMP格式图像文件的程序。 BMP格式BMP格式有不同的版本，我们将介绍最简单和最常用的版本，有时称之为24位真彩色格式。在这种格式中，每个像素表示为三个字节的序列，每个字节分别表示蓝色、绿色和红色值。 BMP格式文件的部分数据项位置 2 ：此文件的大小，以字节为单位。 位置 10：从图像数据起始处的偏移量。 位置18：图片宽度(以像素为单位)。 位置22 ：图片高度(以像素为单位)。 举例： fstream file; //以二进制格式打开文件 file.open(filename,ios::in|ios::out|ios::binary); //get_int函数 int get_int(fstream&amp; stream,int offset){ stream.seekg(offset); int result = 0; int base = 1; for(int i=0;i&lt;4;i++) { result = result +stream.get()*base; base = base*256; } return result;} 若要获取图像的大小 int file_size = get_int(file,2); 图像数据起始处的偏移量 int start_size = get_int(stream,10); 图像宽度 int width = get_int(stream,18); BMP格式图像数据的存储形式图像以一系列像素行的形式存储，从图像最底下一行的像素开始，每个像素行包含一系列蓝色、绿色、红色三元组。行的末尾用额外的字节填充，以便每行中的字节数可被4整除。例如：如果一行仅由三个像素组成，一个青色、一个红色、一个灰色，则改行的编码为： ​ 255 255 0 0 0 255 128 128 128 x y z 其中x y z 是填充字节，是改行长度达到12，为4的倍数。 格式展示： 示例将BMP图像文件替换为负片，即白色变为黑色，青色变为红色，以此类推。 示例代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;#include &lt;cstdlib&gt;using namespace std;//函数一: 通过形成负片来处理像素,其中参数blue、green、red为像素的蓝色、绿色、红色通道值void process(int&amp; blue,int&amp; green,int&amp; red)&#123; blue = 255 - blue; green = 255- green; red = 255 - red;&#125;//函数二：从二进制流中获取一个整数（即图像的大小，宽度，高度等），其中参数stream为输入流，offset为带读取整数的偏移地址int get_int(fstream&amp; stream,int offset)&#123; stream.seekg(offset); int result = 0; int base = 1; for(int i=0;i&lt;4;i++) &#123; result = result +stream.get()*base; base = base*256; &#125; return result;&#125;int main()&#123; cout &lt;&lt; &quot;请输入一个格式为BMP的图像文件：&quot;; string filename; cin&gt;&gt; filename; fstream file; //以二进制文件格式打开 file.open(filename,ios::in|ios::out|ios::binary); //获取图像大小 int file_size = get_int(file,2); //获取图像起始处的偏移量 int start = get_int(file,10); //获取图片宽度 int width = get_int(file,18); //获取图片高度 int height = get_int(file,22); //扫描各行，必须占用4个字节的整数倍 int scanline_size = width*3; int padding = 0; if(scanline_size%4!=0) &#123; padding = 4-scanline_size % 4; &#125; if(file_size != start + (scanline_size+padding)*height) &#123; cout &lt;&lt; &quot;图像内部格式不符&quot;&lt;&lt;endl; return 1; &#125; int pos = start; for(int i=0;i&lt;height;i++)//对每个扫描行 &#123; for(int j=0;j&lt;width;j++)//对每个像素 &#123; file.seekg(pos);//去下一个像素 int blue = file.get();//读取像素 int green = file.get(); int red = file.get(); process(blue,green,red);//处理像素 file.seekp(pos);//回到像素起始位置 file.put(blue);//读取像素 file.put(green); file.put(red); pos= pos+3; &#125; file.seekg(padding,ios::cur);//跳过填充字段 pos = pos +padding; &#125; return 0;&#125;","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"},{"name":"C++_picture","slug":"C-picture","permalink":"http://example.com/tags/C-picture/"}]},{"title":"文件的随机访问","date":"2021-06-07T08:51:21.000Z","path":"2021/06/07/文件的随机访问/","text":"前面已经掌握了C++的文件输入输出流，但前面我们的输入方式为顺序访问，下来介绍如何实现文件的随机读写。 顺序访问与随机访问 顺序访问从文件中依次读取一个数据项或者向文件中依次写入一个数据项，没有向前或者向后跳过数据项，这种访问模式称为顺序访问。 随机访问通过文件指针指定访问文件中的特定项，而无须首先读取之前的所有项，这种访问模式称为随机访问。 注：随机访问并没有任何的”随机性”——该术语只是意味着可以读取和修改存储于文件中任何位置的任何项。 文件指针在文件操作中有一个文件指针，用来指明当前应进行读写的位置，没有具体变量。 随机访问有关的成员函数 tellg() : 返回输入文件指针的当前位置。 seekg(文件中的位置) ：将输入文件中指针移到指定的位置。 seekg(位移量，参照位置) : 以参照位置为基础移动若干字节(文件的一个空格相当于一个字节)。 tellp() : 返回输出文件指针的当前位置。 seekp(文件中的位置) ：将输出文件中指针移动到指定的位置。 seekp(位移量，参照位置) : 以参照位置为基础移动若干字节。 注：对于上面的函数均是通过点运算符实现如( file.tellg() )，其中”文件中的位置”和”位移量”为 long 型参数，以字节为单位。”参照位置”可以是下面三者之一： ios::beg 文件开头 ios::cur 指向输入或输出的当前位置 ios::end 文件某尾 比如： file.seekg(3) 指针移动到第三个字节的位置。 file.seekg(-3,ios::cur) 指针从当前位置向前移动三个字节。 file.seekg(3,ios::cur) 指针从当前位置向后移动三个字节。 其他几个成员函数未举例，可根据以上例子自行体会。 目前文件的随机访问的基础知识已介绍完，不过可能会有一种感觉：感觉其很有用，知识也都掌握了，但是其有什么意义呢？怎么知道我想要的数据在文件中的位置，如果有这种感觉，下面的内容可能会对你有帮助。 索引+随机访问 流程 将数据和偏移量(相对于文件开头)一对一建立索引。 将索引文件导入到内存中(数组或向量)。 如果想要查找某条数据，先从索引中找到对应的偏移量然后在从数据文件中取出即可。 优点(相比于顺序访问) 空间优化：索引文件比数据文件小的多。 时间优化：将数据文件内容读入到内存中就需要占用很大的内存。 源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;vector&gt;using namespace std;int main()&#123; ifstream in_file; in_file.open(&quot;input.txt&quot;); string letter1; in_file &gt;&gt; letter1; cout &lt;&lt; letter1&lt;&lt;endl; //我们获取文件当前位置 long num1=in_file.tellg(); //回到文件开头 //法一： in_file.seekg(0,ios::beg); //法二： //in_file.seekg(0); //法三： //in_file.seekg(-num1,ios::cur); //可以逐个测试一下,看看letter1和letter2是否相同： string letter2; in_file &gt;&gt; letter2; cout &lt;&lt; letter2&lt;&lt;endl; ofstream out_file; out_file.open(&quot;output.txt&quot;); string letter3=&quot;hello&quot;; out_file &lt;&lt; letter3&lt;&lt;endl; //我们获取文件的当前位置 long num2=out_file.tellp(); //回到文件开头 //法一: out_file.seekp(0); //法二： //out_file.seekp(0,ios::beg); //法三： //out_file.seekp(-num2,ios::cur); //同样可以逐个测试一下，发现第二次输出letter3完全覆盖了第一次的输出 out_file &lt;&lt; letter3; //以下是利用索引+随机访问 //打开数据文件 ifstream input2; input2.open(&quot;input2.txt&quot;); //打开索引文件 ifstream index; index.open(&quot;index.txt&quot;); vector&lt;long&gt; num3;//存储每一个数据相对于文件开头的起始位置 num3.push_back(0);//给个初始量，使得索引以1开始 long num4; while(index&gt;&gt;num4) &#123; num3.push_back(num4); &#125; //此时我想要得到文件的第二个数据 input2.seekg(num3[2],ios::beg); string letter4; input2 &gt;&gt; letter4; //这里我定义第二个数据为love，你也可以自定义，下输出测试一下 cout &lt;&lt; letter4&lt;&lt;endl; return 0;&#125;","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"文件加密之凯撒密码","date":"2021-06-06T07:09:09.000Z","path":"2021/06/06/文件加密之凯撒密码/","text":"在读此篇文章时相信大家已经掌握了C++中的文件输入输出流，下来介绍利用命令行参数实现对文件的加密，本加密使用凯撒密码。 命令行参数 什么是命令行参数根据所使用的系统和C++的开发环境，有不同启动程序的方法。例如：通过在编译器环境中选择“运行”，单击图标，或在shell命令窗口中提示符出键入程序名。对于后一种方法称为“从命令行调用程序”，此种方法可以在程序名后面添加一些其他的参数，这些参数就被叫做命令行参数。 例如，使用如下命令行启动程序： prog -v input.txt 其中程序名就是prog，然后程序会接受两个命令行参数“-v” 和 “input.txt” 。 命令行参数何去何从在使用命令行参数的时候，我们的主函数的定义就与以往有些不同，如下： int main(int argc,char* argv[]) { ​ ······ } 何去：可以看到主函数中多出了两个参数，一个是整数 argc，一个是char类型的字符串常量数组。 而我们的程序名以及所有的命令行参数都储存在argv[]这样一个数组中，其中argc就是数组的大小。 何从：在我们写程序的时候我们就可以调用argv[] 和 argc 来使用命令行参数。 凯撒密码凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定的数目进行偏移，形成密文，例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。 下就使用凯撒密码实现对文件的加密和解密。 源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;using namespace std;int main(int argc,char* argv[])&#123; //设置密钥，可以随意给定一个整数值，这里我们使用3 int key = 3 ; //设置加密文件流 ifstream input; //设置输出文件流 ofstream output; //判断是加密还是解密，并打开输入文件于输出文件，并判断是否能够成功打开 for(int i=1;i&lt;argc;i++) &#123; string arg = argv[i]; if(i==1) &#123; if(argv[i]==&quot;-d&quot;)//如果命令行参数为-d就是解密 &#123; key= -3; &#125; &#125; else if(i==2) &#123; input.open(arg); if(input.fail()) &#123; cout &lt;&lt; &quot;input文件打开错误:&quot; &lt;&lt; &quot; &quot;&lt;&lt;arg&lt;&lt;endl; return 1; &#125; &#125; else &#123; output.open(arg); if(output.fail()) &#123; cout &lt;&lt; &quot;output文件打开错误：&quot;&lt;&lt; &quot; &quot;&lt;&lt;arg&lt;&lt;endl; return 1; &#125; &#125; &#125; //用户没有输入两个文件，应该退出 if(argc!=4) &#123; cout &lt;&lt; &quot;请输入四个命令行参数，依次为 程序名 -k或-d input.txt output.txt&quot;&lt;&lt;endl; return 1; &#125; //对文件进行加密 char ch; while(input.get(ch)) &#123; output.put(ch+key); &#125; return 0;&#125;","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"},{"name":"文件加密","slug":"文件加密","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"}]},{"title":"C++流之读写字符串","date":"2021-06-06T00:05:10.000Z","path":"2021/06/06/C-流之读写字符串/","text":"C++的输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标。下来介绍C++流类的串输入输出流。 字符串流的类型和头文件 字符串流的类型 istringstream：从字符串中读取字符。 ostringstream：将字符写入字符串。 stringstream：即可在字符串中写入字符，也可以读取字符。 字符串流的头文件​ 三种类型的字符串流的使用，头文件均为 \\ 打开字符串流 打开字符串输入流12istringstream strm;strm.str(letter); 这里的strm是字符串输入流的一个对象，于标准输入流的cin类似。 其中str是流类的一个成员函数，用于初始化strm，通过点记号来调用。 letter是一个字符串，可以是已存在字符串变量，也可以是自定义字符串(需加双引号)。 打开字符串输出流1ostringstream strm; 这里的strm是字符串输入流的一个对象，于标准输入流的cout类似。 字符串流读入和读出 字符串流读入1234istringstream strm;strm.str(&quot;2021 06 01&quot;);int num;strm&gt;&gt;num; 此时num的数值就是2021。 字符串读出12345ostringstream strm;int year=2021;int month= 6;int day=1;strm &lt;&lt;year&lt;&lt; &quot; &quot; &lt;&lt;month &lt;&lt; &quot; &quot;&lt;&lt;day; 此时字符串strm就是”2021 6 1“。 字符串于数值数据的相互转化 字符串转变为数值 字符串转为int型法一： 1234istringstream strm;strm.str(&quot;2021&quot;);int num;strm &gt;&gt; num; 法二： 123456stringstream strm;string letter = &quot;2021&quot;;int num;strm &lt;&lt; letter;strm&gt;&gt; num;strm.clear();//清空字符串流，再次使用需要重新格式化 法三 12string year = &quot;2021&quot;;int num = stoi(year); 字符串转为double型法一法二完全同上，只需将int改为double。 法三： 12string year = &quot;202.1&quot;;double num = stod(year); 数值转变为字符串 int型转变为字符串法一： 1234ostringstream strm;int num= &quot;2021&quot;;strm &lt;&lt; num;string letter = strm.str(); 法二： 123456stringstream strm;int num=2021;string letter;strm &lt;&lt; num;strm &gt;&gt; letter;strm.clear(); 法三： 12int num=2021;string letter = to_string(num); double 型转变为字符串int型的三种方法均适用。注意：法三字符串变量会保留数值（double型）的小数点后六位，如果不足六位的情况下会使用0补齐，例如：string letter = to_string(2021),此时letter= “2021.000000”。 源码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;sstream&gt;using namespace std;int main()&#123; //打开字符串流 istringstream input; ostringstream output; stringstream in_out_put; //初始化读入字符串流 input.str(&quot;2021 06 01&quot;); //以读入字符串流作为数据源 int num1,num2,num3; input &gt;&gt; num1; input &gt;&gt; num2; input &gt;&gt; num3; cout &lt;&lt; &quot;num1:&quot;&lt;&lt;num1&lt;&lt;endl; cout &lt;&lt; &quot;num2:&quot;&lt;&lt;num2&lt;&lt;endl; cout &lt;&lt; &quot;num3:&quot;&lt;&lt;num3&lt;&lt;endl; //以读出字符串流作为数据结果 output &lt;&lt; num1 &lt;&lt; &quot; &quot; &lt;&lt; num2 &lt;&lt; &quot; &quot; &lt;&lt; num3; string word = output.str(); cout &lt;&lt; &quot;word:&quot; &lt;&lt; word &lt;&lt;endl; //字符串转变为int型 //法一： istringstream input1; input1.str(&quot;2021&quot;); int num4; input1 &gt;&gt; num4; cout &lt;&lt;&quot;num4:&quot;&lt;&lt; num4 &lt;&lt; endl; //法二： stringstream in_out_put1; string letter = &quot;2021&quot;; int num5; in_out_put1 &lt;&lt; letter; in_out_put1 &gt;&gt; num5; in_out_put1.clear(); cout &lt;&lt;&quot;num5:&quot;&lt;&lt; num5 &lt;&lt; endl; //法三： string letter1= &quot;2021&quot;; int num6 = stoi(letter1); cout &lt;&lt; &quot;num6:&quot;&lt;&lt; num6&lt;&lt;endl; //字符串转变为double型 //法一： istringstream input2; input2.str(&quot;202.1&quot;); double num7; input2 &gt;&gt; num7; cout &lt;&lt;&quot;num7:&quot;&lt;&lt; num7 &lt;&lt; endl; //法二： stringstream in_out_put2; string letter2 = &quot;202.1&quot;; double num8; in_out_put2 &lt;&lt; letter2; in_out_put2 &gt;&gt; num8; in_out_put2.clear(); cout &lt;&lt;&quot;num8:&quot;&lt;&lt; num8 &lt;&lt; endl; //法三： string letter3= &quot;202.1&quot;; double num9 = stod(letter3); cout &lt;&lt; &quot;num9:&quot;&lt;&lt; num9&lt;&lt;endl; //int型转变为字符串 //法一： ostringstream output1; int num10 = 2021; output1 &lt;&lt; num10; string word1 = output1.str(); cout &lt;&lt; &quot;word1:&quot;&lt;&lt; word1&lt;&lt;endl; //法二： stringstream in_out_put3; int num11 = 2021; string word2; in_out_put3 &lt;&lt; num11; in_out_put3 &gt;&gt;word2; in_out_put3.clear(); cout &lt;&lt; &quot;word2:&quot;&lt;&lt; word2&lt;&lt;endl; //法三： int num12 = 2021; string word3=to_string(num12); cout &lt;&lt; &quot;word3:&quot;&lt;&lt;word3&lt;&lt;endl; //double型转变为字符串 //法一： ostringstream output2; double num13 = 202.1; output2 &lt;&lt; num13; string word4 = output2.str(); cout &lt;&lt; &quot;word4:&quot;&lt;&lt; word4&lt;&lt;endl; //法二： stringstream in_out_put4; double num14 = 202.1; string word5; in_out_put4 &lt;&lt; num14; in_out_put4 &gt;&gt;word5; in_out_put4.clear(); cout &lt;&lt; &quot;word5:&quot;&lt;&lt; word5&lt;&lt;endl; //法三： double num15 = 202.1; string word6=to_string(num15); cout &lt;&lt; &quot;word6:&quot;&lt;&lt;word6&lt;&lt;endl; return 0;&#125;","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"C++流之读写文本文件","date":"2021-06-05T01:45:54.000Z","path":"2021/06/05/C-流之读写文本文件/","text":"​ C++输入输出是基于流的概念。输入流是数据的源，输出流是数据的目标，下来介绍文件输入输出流。 文件流的类型和头文件 文件流有三种类型： 用于输入：ifstream 用于输出：ofstream 即可用于输入也可用于输出：fstream 当使用三种文件流的任何一个时，头文件均为 \\ 打开和关闭文件流，并判断是否打开成功 打开文件流 打开输入文件流： 12ifstream in_file;in_file.open(&quot;input.txt&quot;); 这里的 in_file 是文件输入流的一个对象，对于标准输入流 cin 的用法在其上完全适用。 其中open是其一个成员函数，使用点记号来进行调用。 input.txt 是储存在源文件下名为”input“的一个文本文档，里面的内容用于以后的输入。 打开输出文件流： 12ofstream out_file;out_file.open(&quot;output.txt&quot;); 这里的 out_file 是文件输出流的一个对象，对于标准输出流 cout 的用法在其上完全适用。 其中open是其一个成员函数，使用点记号来进行调用。 output.txt 是一个输出文件，使用上述语句时会在源文件中生成一个名为”output“的文本文档，输出的内容皆在这里显示。 判断是否成功打开输入文件流12345678910ifstream in_file;in_file.open(&quot;input.txt&quot;);if(in_file.fail())&#123;​ cout&lt;&lt; &quot;Can&#x27;t open input.txt&quot;&lt;&lt;endl;&#125;else&#123;​ 读取输入&#125; 注：这里的in_file.fail() 中的fail 是一个成员函数，如果打开文件失败，会返回一个true值。 关闭文件流123ifstream in_file;in_file.open(&quot;input.txt&quot;);in_file.close(); 注: 这里的in_file.close() 中的close是一个成员函数，一般在程序结束是所有之前打开的流都会自动关闭，只有在流变量(这里是in_file)处理另一个文件是，才需要手动关闭。 文件流读入和读出，并判断是否成功读入 文件流读入1234ifstream in_file;in_file.open(&quot;input.txt&quot;);string letter;in_file &gt;&gt; letter; 注：可以看到文件流的读入 in_file &gt;&gt; letter; 于标准读入cin&gt;&gt; letter; 用法相同；不同的是in_file &gt;&gt;letter;是从文本文档 input 中读入，而cin&gt;&gt;letter,是从键盘键入。 文件流读出1234ofstream out_file;out_file.open(&quot;output.txt&quot;);string letter2=&quot;hello world&quot;;out_file &lt;&lt; letter2; 注：可以看到文件流的读出 out_file &lt;&lt; letter2; 于标准读出cout &lt;&lt; letter2; 用法相同；不同的是out_file &lt;&lt; letter2;是将“hello world” 写入文本文档output中，而cout &lt;&lt; letter2,是将“hello world”写入显示屏。 判断是否读入成功123456789101112ifstream in_file;in_file.open(&quot;input.txt&quot;);string letter;in_file &gt;&gt; letter;if(in_file.fail())&#123;​ cout &lt;&lt; &quot;输入错误&quot;；&#125;else&#123;​ 处理输入；&#125; 注：可以看到其用法于cin.fail()用法相同，当输入错误(当试图从文本中读取数字例如：55，但读入的数据项并不是标准的格式化数字例如：55a，则读取失败，in_file.fail()会返回一个true值。 值得说明的是，当从文件读取输入时，数字格式错误并不是失败的唯一原因，假设已经使用了文件中包含的所有数据，并试图读取更多的数据项时，文件流就会进入失败状态，而对于格式输入流cin就会一直等待用户输入。因此当一个输入流文件中的数据类型均为数值，我们想要计算其均值，即可直接使用如下语句： 1234567891011ifstream in_file；in_file.open(input.txt);double tatol=0;double num1=0;double num;while(in_file&gt;&gt;num)&#123; tatol+=num; num1++;&#125;int average = tatol/num1; 举例读取文本文档input.txt中的所有行，并将其按行逆序输出到文本文档output.txt中。 示例代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;vector&gt;using namespace std;int main()&#123; ifstream in_file; in_file.open(&quot;input.txt&quot;);//打开输入流文件 if(in_file.fail())//判断是否成功打开文件 &#123; cout &lt;&lt; &quot;文件打开有误&quot;; &#125; else &#123; ofstream out_file; out_file.open(&quot;output.txt&quot;);//打开输出流文件 vector&lt;string&gt; letter; string word; while(getline(in_file,word))//文件流读入，getline为按行读入，当读取完全部数据返回false &#123; if(in_file.fail())//判断是否读入成功 &#123; cout &lt;&lt; &quot;数据类型不符，读入错误&quot;; &#125; else &#123; letter.push_back(word);//按行存储文件中的内容 &#125; &#125; for(int i=letter.size()-1;i&gt;=0;i--) &#123; out_file &lt;&lt; letter[i]&lt;&lt;endl;//文件流读出 &#125; in_file.close();//关闭输入流文件 out_file.close();//关闭输出流文件 &#125;&#125; ​","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"从宏观上看C++流","date":"2021-06-04T10:12:49.000Z","path":"2021/06/04/C-流/","text":"C++流主要是通过输入流和输出流来读写文件，其对于处理真实世界的数据是一个非常实用的技巧,以下来对其进行详细的介绍。 什么是C++流C++的流是一种数据的载体，通过它可以实现数据交换和传输。就像水流是由一串水组成的一样，C++的数据流就是由一串数据组成的更长数据。简单来说，C++流就是输入和输出，其中输入流就是数据从键盘、文件或者是指定字符串流入到程序中；输出流就是程序中的数据流向屏幕、文件或字符串。 C++中的输入流和输出流 通过标准输入设备——键盘（C++中使用cin），或标准输出设备——显示器（C++中使用cout）进行输入和输出操作，简称为标准I/O。 通过对文件进行输入和输出操作，简称为文件I/O。 通过对程序中的指定字符串进行输入和输出操作，简称为串I/O。 C++中输入输出流使用的头文件 标准输入输出：#include \\ 文件输入输出： #include \\ 串输入输出： #include \\ 为什么要使用C++流 毫无疑问，一个有意义的程序一定会有程序本身想要的输入，和你所想看到的输出，这是一个程序最本质的意义。 对于标准输入输出流：在所需要输入的数据比较简单，数量少，输出的数据也比较简单，并且是一个即时的数据，使用标准输入输出流是有很大裨益的。 对于文件输入输出流： 在所需要的数据很庞大，并且在文件中有着一定的规律（例如表格），使用文件输入流很有必要。 在需要对程序进行大量的测试，需要对同样或者大部分相同的数据进行输入，使用文件流可节省很多时间。 通过文件输入输出流可以对文件进行加密以保护文件的安全。 对于串输入输出流： 以字符串作为输入可以实现从字符串到数值型数据的转变。 当需要从一个长字符串中提取一些想要的信息，使用串输入输出流是比较方便的（例：从 “2021 年 6 月 1 日“中提取月份，即可将此长字符串作为一个输入流，依次读入到第三个数据即为月份）。 C++流我们应该学到什么 对于文件输入输出流的使用即读写文本文件。 对于串输入输出流的使用即读写字符串。 文件加密。 文件输入输出流的随机访问。 处理BMP格式的图像文件。 友情提示：若要详细学习C++流的5点内容，请点击标签中的C++流。","tags":[{"name":"C++流","slug":"C-流","permalink":"http://example.com/tags/C-%E6%B5%81/"}]},{"title":"C++操作图像中的像素-Picture类","date":"2021-06-04T09:45:23.670Z","path":"2021/06/04/C-操作图像中的像素/","text":"​ 数字图像由像素组成，在C++中操作图像即是对图像中的某些或全部像素的操作，下介绍使用picture类型对图片像素进行操作。 如何使用picture类型 将文件picture.cpp、picture.h、lodepng.cpp和lodepng.h复制到用户的源文件所在文件夹（注：文件可在wiley.com./go/bclo3中的配套代码下的ch04/worked_example_2下找到），如下图： 在工作空间中打开它们，具体步骤：右键picture-&gt;添加文件-&gt;同时打开4个文件，然后编译器会弹出信息，点击确定即可，打开之后如下图： 在头文件中使用如下语句：#include “picture.h”,注：picture.h应由引号而不是尖括号括起来。 将要处理的图片复制到源文件所在的文件夹，图片名称为queen注：图片的类型必需为png类型。 打开图片，使用如下代码：Picture pic(“queen.png”)。 ​ 该语句定义了一个Picture 类型的变量 pic，用于保存图片的像素。 ​ 图片中每一个像素都有x和y坐标，其中0&lt;=x&lt;pic.width()(即图片的宽度)，0&lt;=y&lt;pic.height()(即图片的高度);例如(0,0)就位于图片的左上角，且y轴向下。 ​ 对于每一个像素都有一个RGB颜色值，该值由三原色组成：红、绿、蓝。每一个原色值都在0~255之间，所以我们操作图片中的像素即通过改变像素的颜色值来达到我们的目的。 Picture类型部分成员函数 pic.width() 和 pic.height() ； 分别用来访问图片的的宽度和高度。 pic.red(x,y)、pic.blue(x,y) 和 pic.green(x,y) ； 分别用来获取像素(x,y)处红色原色值、蓝色原色值以及绿色原色值。 pic.set(x,y,red,green,bule)； 将像素(x,y)处设定为自定义原色值，其中后3个参数均为0~255之间的数值。 Picture pic2(“queen2.png”); pic.add(pic2,num1,num2); 这是在图片pic中添加图片pic2，其中num1，num2 分别为pic2相对于(0,0)这个位置的位移。 pic.save(“result.png”)； 将操作后的图片保存。注：会在源文件中生成一个名为result，类型为png的图片。 Picture pic3(num1,num2,num3,num4,num5); 不从源文件中加载图片，生成一张单色的图片，其中num1,num2 分别指定图片的宽度的高度，num3、num4、num5 分别代表着图片每一个像素的红、绿、蓝原色值。 举例：编写程序，将图片queen中的每一个像素的个原色值都变成其相反值。 示例代码：123456789101112131415161718192021#include &lt;iostream&gt;#include &quot;picture.h&quot;using namespace std;int main()&#123; Picture pic(&quot;queen.png&quot;); for(int i=0;i&lt;pic.height();i++) &#123; for(int j=0;j&lt;pic.width();j++) &#123; int red=pic.red(j,i); int green = pic.green(j,i); int bule=pic.blue(j,i); pic.set(j,i,255-red,255-green,255-bule); &#125; &#125; pic.save(&quot;upset_down.png&quot;); return 0;&#125;","tags":[{"name":"C++_picture","slug":"C-picture","permalink":"http://example.com/tags/C-picture/"}]}]